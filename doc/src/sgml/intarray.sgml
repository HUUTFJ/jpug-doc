<!-- doc/src/sgml/intarray.sgml -->

<sect1 id="intarray" xreflabel="intarray">
 <title>intarray</title>

 <indexterm zone="intarray">
  <primary>intarray</primary>
 </indexterm>

 <para>
<!--
  The <filename>intarray</filename> module provides a number of useful functions
  and operators for manipulating null-free arrays of integers.
  There is also support for indexed searches using some of the operators.
-->
<filename>intarray</filename>モジュールはNULLのない整数の配列の操作に便利な関数と演算子を多く提供します。
また、一部の演算子を使用したインデックス検索をサポートします。
 </para>

 <para>
<!--
  All of these operations will throw an error if a supplied array contains any
  NULL elements.
-->
配列にNULL要素が一つでも含まれていれば、これらの操作はすべてエラーを発生します。
 </para>

 <para>
<!--
  Many of these operations are only sensible for one-dimensional arrays.
  Although they will accept input arrays of more dimensions, the data is
  treated as though it were a linear array in storage order.
-->
これらの操作の多くは一次元配列に対してのみ適当なものです。
高次元の入力配列を受け付けますが、データは格納された順の一次元の配列であるかのように扱われます。
 </para>

 <para>
  This module is considered <quote>trusted</quote>, that is, it can be
  installed by non-superusers who have <literal>CREATE</literal> privilege
  on the current database.
 </para>

 <sect2>
<!--
  <title><filename>intarray</filename> Functions and Operators</title>
-->
  <title><filename>intarray</filename>の関数および演算子</title>

  <para>
<!--
   The functions provided by the <filename>intarray</filename> module
   are shown in <xref linkend="intarray-func-table"/>, the operators
   in <xref linkend="intarray-op-table"/>.
-->
<filename>intarray</filename>モジュールで提供される関数を<xref linkend="intarray-func-table"/>に、演算子を<xref linkend="intarray-op-table"/>に示します。
  </para>

  <table id="intarray-func-table">
<!--
   <title><filename>intarray</filename> Functions</title>
<<<<<<< HEAD
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para>
       <para>
        Example(s)
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>icount</primary></indexterm>
        <function>icount</function> ( <type>integer[]</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the number of elements in the array.
       </para>
       <para>
        <literal>icount('{1,2,3}'::integer[])</literal>
        <returnvalue>3</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort</primary></indexterm>
        <function>sort</function> ( <type>integer[]</type>, <parameter>dir</parameter> <type>text</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Sorts the array in either ascending or descending order.
        <parameter>dir</parameter> must be <literal>asc</literal>
        or <literal>desc</literal>.
       </para>
       <para>
        <literal>sort('{1,3,2}'::integer[], 'desc')</literal>
        <returnvalue>{3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>sort</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para role="func_signature">
        <indexterm><primary>sort_asc</primary></indexterm>
        <function>sort_asc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Sorts in ascending order.
       </para>
       <para>
        <literal>sort(array[11,77,44])</literal>
        <returnvalue>{11,44,77}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>sort_desc</primary></indexterm>
        <function>sort_desc</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Sorts in descending order.
       </para>
       <para>
        <literal>sort_desc(array[11,77,44])</literal>
        <returnvalue>{77,44,11}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>uniq</primary></indexterm>
        <function>uniq</function> ( <type>integer[]</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Removes adjacent duplicates.
       </para>
       <para>
        <literal>uniq(sort('{1,2,3,2,1}'::integer[]))</literal>
        <returnvalue>{1,2,3}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>idx</primary></indexterm>
        <function>idx</function> ( <type>integer[]</type>, <parameter>item</parameter> <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns index of the first array element
        matching <parameter>item</parameter>, or 0 if no match.
       </para>
       <para>
        <literal>idx(array[11,22,33,22,11], 22)</literal>
        <returnvalue>2</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>subarray</primary></indexterm>
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type>, <parameter>len</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Extracts the portion of the array starting at
        position <parameter>start</parameter>, with <parameter>len</parameter>
        elements.
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2, 3)</literal>
        <returnvalue>{2,3,2}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <function>subarray</function> ( <type>integer[]</type>, <parameter>start</parameter> <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Extracts the portion of the array starting at
        position <parameter>start</parameter>.
       </para>
       <para>
        <literal>subarray('{1,2,3,2,1}'::integer[], 2)</literal>
        <returnvalue>{2,3,2,1}</returnvalue>
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm><primary>intset</primary></indexterm>
        <function>intset</function> ( <type>integer</type> )
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Makes a single-element array.
       </para>
       <para>
        <literal>intset(42)</literal>
        <returnvalue>{42}</returnvalue>
       </para></entry>
      </row>
=======
-->
   <title><filename>intarray</filename>関数</title>

   <tgroup cols="5">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
      <entry>Example</entry>
      <entry>Result</entry>
-->
      <entry>関数</entry>
      <entry>戻り値の型</entry>
      <entry>説明</entry>
      <entry>例</entry>
      <entry>結果</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><function>icount(int[])</function><indexterm><primary>icount</primary></indexterm></entry>
      <entry><type>int</type></entry>
<!--
      <entry>number of elements in array</entry>
-->
      <entry>配列内の要素数</entry>
      <entry><literal>icount('{1,2,3}'::int[])</literal></entry>
      <entry><literal>3</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[], text dir)</function><indexterm><primary>sort</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>sort array &mdash; <parameter>dir</parameter> must be <literal>asc</literal> or <literal>desc</literal></entry>
-->
      <entry>配列のソート。<parameter>dir</parameter>は<literal>asc</literal>または<literal>desc</literal>のいずれかでなければなりません。</entry>
      <entry><literal>sort('{1,2,3}'::int[], 'desc')</literal></entry>
      <entry><literal>{3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>sort(int[])</function></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>sort in ascending order</entry>
-->
      <entry>昇順ソート</entry>
      <entry><literal>sort(array[11,77,44])</literal></entry>
      <entry><literal>{11,44,77}</literal></entry>
     </row>

     <row>
      <entry><function>sort_asc(int[])</function><indexterm><primary>sort_asc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>sort in ascending order</entry>
-->
      <entry>昇順ソート</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>sort_desc(int[])</function><indexterm><primary>sort_desc</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>sort in descending order</entry>
-->
      <entry>降順ソート</entry>
      <entry><literal></literal></entry>
      <entry><literal></literal></entry>
     </row>

     <row>
      <entry><function>uniq(int[])</function><indexterm><primary>uniq</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>remove adjacent duplicates</entry>
-->
      <entry>隣接する重複を削除</entry>
      <entry><literal>uniq(sort('{1,2,3,2,1}'::int[]))</literal></entry>
      <entry><literal>{1,2,3}</literal></entry>
     </row>

     <row>
      <entry><function>idx(int[], int item)</function><indexterm><primary>idx</primary></indexterm></entry>
      <entry><type>int</type></entry>
<!--
      <entry>index of first element matching <parameter>item</parameter> (0 if none)</entry>
-->
      <entry><parameter>item</parameter>に一致する要素番号（存在しなければ0）</entry>
      <entry><literal>idx(array[11,22,33,22,11], 22)</literal></entry>
      <entry><literal>2</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start, int len)</function><indexterm><primary>subarray</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>portion of array starting at position <parameter>start</parameter>, <parameter>len</parameter> elements</entry>
-->
      <entry><parameter>start</parameter>から始まり<parameter>len</parameter>個の要素の部分配列</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2, 3)</literal></entry>
      <entry><literal>{2,3,2}</literal></entry>
     </row>

     <row>
      <entry><function>subarray(int[], int start)</function></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>portion of array starting at position <parameter>start</parameter></entry>
-->
      <entry><parameter>start</parameter>から始まる部分配列</entry>
      <entry><literal>subarray('{1,2,3,2,1}'::int[], 2)</literal></entry>
      <entry><literal>{2,3,2,1}</literal></entry>
     </row>

     <row>
      <entry><function>intset(int)</function><indexterm><primary>intset</primary></indexterm></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>make single-element array</entry>
-->
      <entry>単一要素の配列を作成</entry>
      <entry><literal>intset(42)</literal></entry>
      <entry><literal>{42}</literal></entry>
     </row>

>>>>>>> doc_ja_12
    </tbody>
   </tgroup>
  </table>

  <table id="intarray-op-table">
<!--
   <title><filename>intarray</filename> Operators</title>
<<<<<<< HEAD
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Operator
       </para>
       <para>
        Description
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;&amp;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Do arrays overlap (have at least one element in common)?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@&gt;</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Does left array contain right array?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&lt;@</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Is left array contained in right array?
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type></type> <literal>#</literal> <type>integer[]</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the number of elements in the array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>#</literal> <type>integer</type>
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns index of the first array element
        matching the right argument, or 0 if no match.
        (Same as <function>idx</function> function.)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Adds element to end of array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>+</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Concatenates the arrays.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Removes entries matching the right argument from the array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>-</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Removes elements of the right array from the left array.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Computes the union of the arguments.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>|</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Computes the union of the arguments.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>&amp;</literal> <type>integer[]</type>
        <returnvalue>integer[]</returnvalue>
       </para>
       <para>
        Computes the intersection of the arguments.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>integer[]</type> <literal>@@</literal> <type>query_int</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Does array satisfy query?  (see below)
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <type>query_int</type> <literal>~~</literal> <type>integer[]</type>
        <returnvalue>boolean</returnvalue>
       </para>
       <para>
        Does array satisfy query?  (commutator of <literal>@@</literal>)
       </para></entry>
      </row>
=======
-->
   <title><filename>intarray</filename>演算子</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Operator</entry>
      <entry>Returns</entry>
      <entry>Description</entry>
-->
      <entry>演算子</entry>
      <entry>戻り値</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>int[] &amp;&amp; int[]</literal></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>overlap &mdash; <literal>true</literal> if arrays have at least one common element</entry>
-->
      <entry>重なり。配列間で少なくとも1つの共通要素がある場合<literal>true</literal>を返します。</entry>
     </row>
     <row>
      <entry><literal>int[] @&gt; int[]</literal></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>contains &mdash; <literal>true</literal> if left array contains right array</entry>
-->
      <entry>包含。左辺の配列が右辺の配列を含む場合<literal>true</literal>を返します。</entry>
     </row>
     <row>
      <entry><literal>int[] &lt;@ int[]</literal></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry>contained &mdash; <literal>true</literal> if left array is contained in right array</entry>
-->
      <entry>包含される。左辺の配列が右辺の配列に含まれる場合<literal>true</literal>を返します。</entry>
     </row>
     <row>
      <entry><literal># int[]</literal></entry>
      <entry><type>int</type></entry>
<!--
      <entry>number of elements in array</entry>
-->
      <entry>配列内の要素数</entry>
     </row>
     <row>
      <entry><literal>int[] # int</literal></entry>
      <entry><type>int</type></entry>
<!--
      <entry>index (same as <function>idx</function> function)</entry>
-->
      <entry>インデックス（<function>idx</function>関数と同じです）</entry>
     </row>
     <row>
      <entry><literal>int[] + int</literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>push element onto array (add it to end of array)</entry>
-->
      <entry>配列に要素をプッシュ（配列の末尾に追加）します</entry>
     </row>
     <row>
      <entry><literal>int[] + int[]  </literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>array concatenation (right array added to the end of left one)</entry>
-->
      <entry>配列を連結（右辺配列を左辺配列の末尾に追加）します</entry>
     </row>
     <row>
      <entry><literal>int[] - int</literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>remove entries matching right argument from array</entry>
-->
      <entry>配列から右辺の引数に一致する項目を削除します</entry>
     </row>
     <row>
      <entry><literal>int[] - int[]</literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>remove elements of right array from left</entry>
-->
      <entry>左辺の配列から右辺の配列要素を削除します</entry>
     </row>
     <row>
      <entry><literal>int[] | int</literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>union of arguments</entry>
-->
      <entry>引数をまとめます</entry>
     </row>
     <row>
      <entry><literal>int[] | int[]</literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>union of arrays</entry>
-->
      <entry>配列をまとめます</entry>
     </row>
     <row>
      <entry><literal>int[] &amp; int[]</literal></entry>
      <entry><type>int[]</type></entry>
<!--
      <entry>intersection of arrays</entry>
-->
      <entry>配列の共通部分</entry>
     </row>
     <row>
      <entry><literal>int[] @@ query_int</literal></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry><literal>true</literal> if array satisfies query (see below)</entry>
-->
      <entry>配列が問い合わせを満たす場合<literal>true</literal>（後述）</entry>
     </row>
     <row>
      <entry><literal>query_int ~~ int[]</literal></entry>
      <entry><type>boolean</type></entry>
<!--
      <entry><literal>true</literal> if array satisfies query (commutator of <literal>@@</literal>)</entry>
-->
      <entry>配列が問い合わせを満たす場合<literal>true</literal>（<literal>@@</literal>の交代演算子）</entry>
     </row>
>>>>>>> doc_ja_12
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   (Before PostgreSQL 8.2, the containment operators <literal>@&gt;</literal> and
   <literal>&lt;@</literal> were respectively called <literal>@</literal> and <literal>~</literal>.
   These names are still available, but are deprecated and will eventually be
   retired.  Notice that the old names are reversed from the convention
   formerly followed by the core geometric data types!)
-->
（PostgreSQL 8.2以前では、包含演算子<literal>@&gt;と</literal><literal>&lt;@</literal>はそれぞれ<literal>@</literal>と<literal>~</literal>と呼ばれていました。
これらの名前はまだ利用できますが、廃止予定であり、最終的にはなくなります。
古い名前はコアの幾何データ型が以前従っていた規約とは反対であることに注意してください。）
  </para>

  <para>
<!--
   The operators <literal>&amp;&amp;</literal>, <literal>@&gt;</literal> and
   <literal>&lt;@</literal> are equivalent to <productname>PostgreSQL</productname>'s built-in
   operators of the same names, except that they work only on integer arrays
   that do not contain nulls, while the built-in operators work for any array
   type.  This restriction makes them faster than the built-in operators
   in many cases.
-->
演算子<literal>&amp;&amp;</literal>、<literal>@&gt;</literal>と<literal>&lt;@</literal>は、これらはNULLを含まない整数配列のみで動作し、組み込み演算子はどの配列型に対しても動作する点を除き、同じ名前の<productname>PostgreSQL</productname>の組み込み演算子とそれぞれほぼ等価です。
この制限により、多くの場合、組み込み演算子より高速です。
  </para>

  <para>
<!--
   The <literal>@@</literal> and <literal>~~</literal> operators test whether an array
   satisfies a <firstterm>query</firstterm>, which is expressed as a value of a
   specialized data type <type>query_int</type>.  A <firstterm>query</firstterm>
   consists of integer values that are checked against the elements of
   the array, possibly combined using the operators <literal>&amp;</literal>
   (AND), <literal>|</literal> (OR), and <literal>!</literal> (NOT).  Parentheses
   can be used as needed.  For example,
   the query <literal>1&amp;(2|3)</literal> matches arrays that contain 1
   and also contain either 2 or 3.
-->
<literal>@@</literal>および<literal>~~</literal>演算子は、配列が特化したデータ型<type>query_int</type>で表現される<firstterm>問い合わせ</firstterm>を満たすかどうかを試験します。
<firstterm>問い合わせ</firstterm>は、おそらく<literal>&amp;</literal>(論理積)、<literal>|</literal> (論理和)、<literal>!</literal> (否定)演算子を組み合わせて使用した、配列要素に対して検査される整数値からなります。
例えば<literal>1&amp;(2|3)</literal>という問い合わせは1および、2か3のいずれかを含む配列に一致します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Index Support</title>
-->
  <title>インデックスサポート</title>

  <para>
<!--
   <filename>intarray</filename> provides index support for the
   <literal>&amp;&amp;</literal>, <literal>@&gt;</literal>, <literal>&lt;@</literal>,
   and <literal>@@</literal> operators, as well as regular array equality.
-->
<filename>intarray</filename>は<literal>&amp;&amp;</literal>、<literal>@&gt;</literal>、<literal>&lt;@</literal>、<literal>@@</literal>演算子に関して通常の配列等価性と同様にインデックスサポートを提供します。
  </para>

  <para>
<<<<<<< HEAD
   Two parameterized GiST index operator classes are provided:
=======
<!--
   Two GiST index operator classes are provided:
>>>>>>> doc_ja_12
   <literal>gist__int_ops</literal> (used by default) is suitable for
   small- to medium-size data sets, while
   <literal>gist__intbig_ops</literal> uses a larger signature and is more
   suitable for indexing large data sets (i.e., columns containing
   a large number of distinct array values).
   The implementation uses an RD-tree data structure with
   built-in lossy compression.
-->
2つのGiSTインデックス演算子クラスが提供されます。
<literal>gist__int_ops</literal>（デフォルトで使用されます）は小中規模要素数のデータセットに適します。
一方、<literal>gist__intbig_ops</literal>はより大きな署名を使用しますので、大規模データセット（つまり、異なった配列値を多数持つ列）のインデックスにより適しています。
実装は組み込みの非可逆圧縮を持ったRD-treeデータ構造を使用します。
  </para>

  <para>
<<<<<<< HEAD
   <literal>gist__int_ops</literal> approximates an integer set as an array of
   integer ranges.  Its optional integer parameter <literal>numranges</literal>
   determines the maximum number of ranges in
   one index key.  The default value of <literal>numranges</literal> is 100.
   Valid values are between 1 and 253.  Using larger arrays as GiST index
   keys leads to a more precise search (scanning a smaller fraction of the index and
   fewer heap pages), at the cost of a larger index.
  </para>

  <para>
   <literal>gist__intbig_ops</literal> approximates an integer set as a bitmap
   signature.  Its optional integer parameter <literal>siglen</literal>
   determines the signature length in bytes.
   The default signature length is 16 bytes.  Valid values of signature length
   are between 1 and 2024 bytes.  Longer signatures lead to a more precise
   search (scanning a smaller fraction of the index and fewer heap pages), at
   the cost of a larger index.
  </para>

  <para>
=======
<!--
>>>>>>> doc_ja_12
   There is also a non-default GIN operator class
   <literal>gin__int_ops</literal> supporting the same operators.
-->
また、同じ演算子をサポートするデフォルトではないGIN演算子クラス<literal>gin__int_ops</literal>も存在します。
  </para>

  <para>
<!--
   The choice between GiST and GIN indexing depends on the relative
   performance characteristics of GiST and GIN, which are discussed elsewhere.
-->
GiSTおよびGINインデックスのどちらを選択するかは、別途説明されるGiSTとGINの相対的な性能特徴に依存します。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Example</title>
-->
  <title>例</title>

<programlisting>
<!--
&#045;&#045; a message can be in one or more <quote>sections</quote>
-->
-- メッセージ(message)は1つ以上の<quote>節(section)</quote>の中にある
CREATE TABLE message (mid INT PRIMARY KEY, sections INT[], ...);

<<<<<<< HEAD
-- create specialized index with signature length of 32 bytes
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops(siglen=32));
=======
<!--
&#045;- create specialized index
-->
-- 特化したインデックスを作成
CREATE INDEX message_rdtree_idx ON message USING GIST (sections gist__int_ops);
>>>>>>> doc_ja_12

<!--
&#045;- select messages in section 1 OR 2 - OVERLAP operator
-->
-- 節1 OR 2のメッセージを選択 - OVERLAP演算子
SELECT message.mid FROM message WHERE message.sections &amp;&amp; '{1,2}';

<!--
&#045;- select messages in sections 1 AND 2 - CONTAINS operator
-->
-- 節1 AND 2のメッセージを選択 - CONTAINS演算子
SELECT message.mid FROM message WHERE message.sections @&gt; '{1,2}';

<!--
&#045;- the same, using QUERY operator
-->
-- 同上、QUERY演算子を使用
SELECT message.mid FROM message WHERE message.sections @@ '1&amp;2'::query_int;
</programlisting>
 </sect2>

 <sect2>
<!--
  <title>Benchmark</title>
-->
  <title>ベンチマーク</title>

  <para>
<!--
   The source directory <filename>contrib/intarray/bench</filename> contains a
   benchmark test suite, which can be run against an installed
   <productname>PostgreSQL</productname> server.  (It also requires <filename>DBD::Pg</filename>
   to be installed.)  To run:
-->
ソースディレクトリ以下の<filename>contrib/intarray/bench</filename>にはベンチマーク試験一式があり、インストールされた<productname>PostgreSQL</productname>サーバで実行できます。
(<filename>DBD::Pg</filename>もインストールされていないといけません。)
以下のように実行します。
  </para>

<programlisting>
cd .../contrib/intarray/bench
createdb TEST
psql -c "CREATE EXTENSION intarray" TEST
./create_test.pl | psql TEST
./bench.pl
</programlisting>

  <para>
<!--
   The <filename>bench.pl</filename> script has numerous options, which
   are displayed when it is run without any arguments.
-->
<filename>bench.pl</filename>スクリプトには多くのオプションがあります。
これらは引数を付けずに実行すると表示されます。
  </para>
 </sect2>

 <sect2>
<!--
  <title>Authors</title>
-->
  <title>作者</title>

  <para>
<!--
   All work was done by Teodor Sigaev (<email>teodor@sigaev.ru</email>) and
   Oleg Bartunov (<email>oleg@sai.msu.su</email>). See
   <ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink> for
   additional information. Andrey Oktyabrski did a great work on adding new
   functions and operations.
-->
Teodor Sigaev (<email>teodor@sigaev.ru</email>)とOleg Bartunov (<email>oleg@sai.msu.su</email>)によりすべての作業がなされました。
さらなる情報については<ulink url="http://www.sai.msu.su/~megera/postgres/gist/"></ulink>を参照してください。
Andrey Oktyabrskiは新しい関数、演算子の追加において素晴らしい作業を行いました。
  </para>
 </sect2>

</sect1>
