<!-- doc/src/sgml/monitoring.sgml -->

<chapter id="monitoring">
<!--
 <title>Monitoring Database Activity</title>
-->
<title>データベース活動状況の監視</title>

 <indexterm zone="monitoring">
<!--
  <primary>monitoring</primary>
  <secondary>database activity</secondary>
-->
  <primary>監視</primary>
  <secondary>データベース活動情報の</secondary>
 </indexterm>

 <indexterm zone="monitoring">
<!--
  <primary>database activity</primary>
  <secondary>monitoring</secondary>
-->
  <primary>データベース活動状況</primary>
  <secondary>の監視</secondary>
 </indexterm>

 <para>
<!--
  A database administrator frequently wonders, <quote>What is the system
  doing right now?</quote>
  This chapter discusses how to find that out.
-->
データベース管理者はよく、<quote>システムは今現在正しく動作しているか</quote>を気にします。
本章では監視方法について説明します。
 </para>

  <para>
<!--
   Several tools are available for monitoring database activity and
   analyzing performance.  Most of this chapter is devoted to describing
   <productname>PostgreSQL</productname>'s statistics collector,
   but one should not neglect regular Unix monitoring programs such as
   <command>ps</command>, <command>top</command>, <command>iostat</command>, and <command>vmstat</command>.
   Also, once one has identified a
   poorly-performing query, further investigation might be needed using
   <productname>PostgreSQL</productname>'s <xref linkend="sql-explain"/> command.
   <xref linkend="using-explain"/> discusses <command>EXPLAIN</command>
   and other methods for understanding the behavior of an individual
   query.
-->
データベース活動状況の監視と性能解析用のツールは多く存在します。
本章の大部分は<productname>PostgreSQL</productname>の統計情報コレクタの説明に費されていますが、<command>ps</command>や<command>top</command>、<command>iostat</command>、<command>vmstat</command>などの通常のUnix監視プログラムを無視すべきではありません。
また、性能が悪い問い合わせであると認知された問い合わせは、その後、<productname>PostgreSQL</productname>の<xref linkend="sql-explain"/>コマンドを使用して調査を行う必要が発生します。
<xref linkend="using-explain"/>では、個々の問い合わせの振舞いを理解するための、<command>EXPLAIN</command>やその他の方法について記載しています。
  </para>

 <sect1 id="monitoring-ps">
<!--
  <title>Standard Unix Tools</title>
-->
<title>標準的なUnixツール</title>

  <indexterm zone="monitoring-ps">
   <primary>ps</primary>
<!--
   <secondary>to monitor activity</secondary>
-->
   <secondary>活動状況監視用の</secondary>
  </indexterm>

  <para>
<!--
   On most Unix platforms, <productname>PostgreSQL</productname> modifies its
   command title as reported by <command>ps</command>, so that individual server
   processes can readily be identified.  A sample display is
-->
ほとんどのUNIXプラットフォームでは、<productname>PostgreSQL</productname>は、個々のサーバプロセスが容易に識別できるように、<command>ps</command>によって報告されるコマンドタイトル部分を変更します。
以下に表示例を示します。

<screen>
$ ps auxww | grep ^postgres
postgres  15551  0.0  0.1  57536  7132 pts/0    S    18:02   0:00 postgres -i
postgres  15554  0.0  0.0  57536  1184 ?        Ss   18:02   0:00 postgres: background writer
postgres  15555  0.0  0.0  57536   916 ?        Ss   18:02   0:00 postgres: checkpointer
postgres  15556  0.0  0.0  57536   916 ?        Ss   18:02   0:00 postgres: walwriter
postgres  15557  0.0  0.0  58504  2244 ?        Ss   18:02   0:00 postgres: autovacuum launcher
postgres  15558  0.0  0.0  17512  1068 ?        Ss   18:02   0:00 postgres: stats collector
postgres  15582  0.0  0.0  58772  3080 ?        Ss   18:04   0:00 postgres: joe runbug 127.0.0.1 idle
postgres  15606  0.0  0.0  58772  3052 ?        Ss   18:07   0:00 postgres: tgl regression [local] SELECT waiting
postgres  15610  0.0  0.0  58772  3056 ?        Ss   18:07   0:00 postgres: tgl regression [local] idle in transaction
</screen>

<!--
   (The appropriate invocation of <command>ps</command> varies across different
   platforms, as do the details of what is shown.  This example is from a
   recent Linux system.)  The first process listed here is the
   master server process.  The command arguments
   shown for it are the same ones used when it was launched.  The next five
   processes are background worker processes automatically launched by the
   master process.  (The <quote>stats collector</quote> process will not be present
   if you have set the system not to start the statistics collector; likewise
   the <quote>autovacuum launcher</quote> process can be disabled.)
   Each of the remaining
   processes is a server process handling one client connection.  Each such
   process sets its command line display in the form
-->
（<command>ps</command>の適切な呼び出し方はプラットフォームによって異なります。
同様に、何が詳細に表示されるのかも異なります。
この例は最近のLinuxシステムのものです。）
この一覧の最初のプロセスはマスタサーバプロセスです。
表示されているコマンド引数は、起動時に使用されたものと同じものです。
次の5つのプロセスは、マスタプロセスから自動的に起動されるバックグラウンドワーカープロセスです。
（システムを統計情報コレクタが起動しないように設定していた場合は<quote>統計情報コレクタ</quote>はありません。同様に<quote>自動バキュームランチャ</quote>を無効にできます。）
残るプロセスはそれぞれ、1つのクライアント接続を取り扱うサーバプロセスです。
それぞれのプロセスは、次の形式のコマンドライン表示を設定します。

<screen>
postgres: <replaceable>user</replaceable> <replaceable>database</replaceable> <replaceable>host</replaceable> <replaceable>activity</replaceable>
</screen>

<!--
  The user, database, and (client) host items remain the same for
  the life of the client connection, but the activity indicator changes.
  The activity can be <literal>idle</literal> (i.e., waiting for a client command),
  <literal>idle in transaction</literal> (waiting for client inside a <command>BEGIN</command> block),
  or a command type name such as <literal>SELECT</literal>.  Also,
  <literal>waiting</literal> is appended if the server process is presently waiting
  on a lock held by another session.  In the above example we can infer
  that process 15606 is waiting for process 15610 to complete its transaction
  and thereby release some lock.  (Process 15610 must be the blocker, because
  there is no other active session.  In more complicated cases it would be
  necessary to look into the
  <link linkend="view-pg-locks"><structname>pg_locks</structname></link>
  system view to determine who is blocking whom.)
-->
ユーザ、データベース、(クライアント)ホストという項目はクライアントの存続期間中変更されることはありませんが、活動状況を示す部分は変わります。
活動状況は、<literal>idle</literal>（つまり、クライアントからのコマンド待ち状態）、<literal>idle in transaction</literal>（<command>BEGIN</command>ブロックの内側でのクライアントの待ち状態）、または<literal>SELECT</literal>のようなコマンド種類名のいずれかとなります。
また、そのサーバプロセスが他のセッションによって保持されたロックを待っている状態の場合は、<literal>waiting</literal>が追加されます。
上の例では、プロセス15606はプロセス15610におけるトランザクションの完了とそれに伴うロックの解放を待っていると推測することができます。
（他に実行中のセッションがありませんので、プロセス15610がブロックしている側であるはずです。
もっと複雑な場合では<link linkend="view-pg-locks"><structname>pg_locks</structname></link>システムビューを検索し、どのプロセスがどのプロセスをブロックしているか決定しなければなりません。）
  </para>

  <para>
<!--
   If <xref linkend="guc-cluster-name"/> has been configured the
   cluster name will also be shown in <command>ps</command> output:
-->
<xref linkend="guc-cluster-name"/>が設定されていれば、<command>ps</command>の出力でクラスタ名も表示されます。
<screen>
$ psql -c 'SHOW cluster_name'
 cluster_name
--------------
 server1
(1 row)

$ ps aux|grep server1
postgres   27093  0.0  0.0  30096  2752 ?        Ss   11:34   0:00 postgres: server1: background writer
...
</screen>
  </para>

  <para>
<!--
   If you have turned off <xref linkend="guc-update-process-title"/> then the
   activity indicator is not updated; the process title is set only once
   when a new process is launched.  On some platforms this saves a measurable
   amount of per-command overhead;  on others it's insignificant.
-->
<xref linkend="guc-update-process-title"/>を無効にした場合、活動情報を示す部分は更新されません。
新しいプロセスが起動した時に一度、プロセスの表題は設定されます。
プラットフォームの中には、これによりコマンドごとのオーバヘッドをかなり抑えられるものもありますし、まったく意味がないものもあります。
  </para>

  <tip>
  <para>
<!--
  <productname>Solaris</productname> requires special handling. You must
  use <command>/usr/ucb/ps</command>, rather than
  <command>/bin/ps</command>. You also must use two <option>w</option>
  flags, not just one. In addition, your original invocation of the
  <command>postgres</command> command must have a shorter
  <command>ps</command> status display than that provided by each
  server process.  If you fail to do all three things, the <command>ps</command>
  output for each server process will be the original <command>postgres</command>
  command line.
-->
<productname>Solaris</productname>では特別な取り扱いが必要です。
<command>/bin/ps</command>ではなく、<command>/usr/ucb/ps</command>を使用しなければなりません。
また、<command>w</command>フラグを1つではなく2つ使用しなければなりません。
さらに、元の<command>postgres</command>の呼び出しに関する<command>ps</command>のステータス表示は、各サーバプロセスに関するステータス表示よりも短くなければなりません。
この3条件を全て満たさないと、各サーバプロセスの<command>ps</command>の出力は、元の<application>postgres</application>のコマンドラインのものになってしまいます。
  </para>
  </tip>
 </sect1>

 <sect1 id="monitoring-stats">
<!--
  <title>The Statistics Collector</title>
-->
<title>統計情報コレクタ</title>

  <indexterm zone="monitoring-stats">
<!--
   <primary>statistics</primary>
-->
<primary>統計情報</primary>
  </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname>'s <firstterm>statistics collector</firstterm>
   is a subsystem that supports collection and reporting of information about
   server activity.  Presently, the collector can count accesses to tables
   and indexes in both disk-block and individual-row terms.  It also tracks
   the total number of rows in each table, and information about vacuum and
   analyze actions for each table.  It can also count calls to user-defined
   functions and the total time spent in each one.
-->
<productname>PostgreSQL</productname>の<firstterm>統計情報コレクタ</firstterm>はサーバの活動状況に関する情報を収集し、報告するサブシステムです。
現在、コレクタはテーブルとインデックスへのアクセスをディスクブロックおよび個々の行単位で数えることができます。
またこれは、各テーブル内の総行数、および、各テーブルでのバキュームやアナライズの実施情報を追跡します。
また、ユーザ定義関数の呼ばれた回数、それぞれの消費した総時間をカウントします。
  </para>

  <para>
<!--
   <productname>PostgreSQL</productname> also supports reporting dynamic
   information about exactly what is going on in the system right now, such as
   the exact command currently being executed by other server processes, and
   which other connections exist in the system.  This facility is independent
   of the collector process.
-->
また、<productname>PostgreSQL</productname>は他のサーバプロセスによって現在実行されている正確なコマンドなど現在システム内で起きていること、またシステム内にどんな他の接続が存在するかということについての動的情報を正確に報告する機能を持ちます。
これはコレクタプロセスから独立している機能です。
  </para>

 <sect2 id="monitoring-stats-setup">
<!--
  <title>Statistics Collection Configuration</title>
-->
<title>統計情報収集のための設定</title>

  <para>
<!--
   Since collection of statistics adds some overhead to query execution,
   the system can be configured to collect or not collect information.
   This is controlled by configuration parameters that are normally set in
   <filename>postgresql.conf</filename>.  (See <xref linkend="runtime-config"/> for
   details about setting configuration parameters.)
-->
統計情報の収集によって問い合わせの実行に少しオーバーヘッドが加わりますので、システムは情報を収集するようにもしないようにも設定することができます。
これは通常は<filename>postgresql.conf</filename>内で設定される、設定パラメータによって制御されます
（設定パラメータの設定についての詳細は<xref linkend="runtime-config"/>を参照してください）。
  </para>

  <para>
<!--
   The parameter <xref linkend="guc-track-activities"/> enables monitoring
   of the current command being executed by any server process.
-->
<xref linkend="guc-track-activities"/>パラメータにより、すべてのサーバプロセスで現在実行されているコマンドを監視することができます。
  </para>

  <para>
<!--
   The parameter <xref linkend="guc-track-counts"/> controls whether
   statistics are collected about table and index accesses.
-->
<xref linkend="guc-track-counts"/>パラメータは、テーブルおよびインデックスアクセスに関する統計情報を収集するかどうか制御します。
  </para>

  <para>
<!--
   The parameter <xref linkend="guc-track-functions"/> enables tracking of
   usage of user-defined functions.
-->
<xref linkend="guc-track-functions"/>パラメータは、ユーザ定義関数の使用状況を追跡するかどうかを指定できます。
  </para>

  <para>
<!--
   The parameter <xref linkend="guc-track-io-timing"/> enables monitoring
   of block read and write times.
-->
<xref linkend="guc-track-io-timing"/>パラメータは、ブロック読み取りおよび書き込み回数の監視するかどうかを指定できます。
  </para>

  <para>
<!--
   Normally these parameters are set in <filename>postgresql.conf</filename> so
   that they apply to all server processes, but it is possible to turn
   them on or off in individual sessions using the <xref
   linkend="sql-set"/> command. (To prevent
   ordinary users from hiding their activity from the administrator,
   only superusers are allowed to change these parameters with
   <command>SET</command>.)
-->
通常、これらの変数は全てのサーバプロセスに適用できるように<filename>postgresql.conf</filename>内で設定されます。
しかし、<xref linkend="sql-set"/>コマンドを使用して、個別のセッションで有効または無効にできます。
（一般ユーザがその活動を管理者に隠すことを防止するために、スーパーユーザのみが<command>SET</command>を使用してこれらのパラメータを変更できます。）
  </para>

  <para>
<!--
   The statistics collector transmits the collected information to other
   <productname>PostgreSQL</productname> processes through temporary files.
   These files are stored in the directory named by the
   <xref linkend="guc-stats-temp-directory"/> parameter,
   <filename>pg_stat_tmp</filename> by default.
   For better performance, <varname>stats_temp_directory</varname> can be
   pointed at a RAM-based file system, decreasing physical I/O requirements.
   When the server shuts down cleanly, a permanent copy of the statistics
   data is stored in the <filename>pg_stat</filename> subdirectory, so that
   statistics can be retained across server restarts.  When recovery is
   performed at server start (e.g., after immediate shutdown, server crash,
   and point-in-time recovery), all statistics counters are reset.
-->
統計情報コレクタは収集した情報を他の<productname>PostgreSQL</productname>プロセスに一時ファイルを介して送信します。
これらのファイルは<xref linkend="guc-stats-temp-directory"/>で指名されたディレクトリ、デフォルトは<filename>pg_stat_tmp</filename>内に格納されます。
性能を向上させるために、<varname>stats_temp_directory</varname>をRAMベースのファイルシステムを指し示すようにして、物理的なI/O要求を減らすことができます。
サーバが正しくシャットダウンした際は、統計情報がサーバの再起動を跨がって保持されるように、統計情報データの永続的なコピーが<filename>pg_stat</filename>サブディレクトリに格納されます。
サーバ起動時にリカバリが実施される場合(例えば、即時シャットダウンやサーバクラッシュ、ポイントインタイムリカバリ)、統計カウンタをすべてリセットします。
  </para>

 </sect2>

 <sect2 id="monitoring-stats-views">
<!--
  <title>Viewing Statistics</title>
-->
<title>統計情報の表示</title>

  <para>
<!--
   Several predefined views, listed in <xref
   linkend="monitoring-stats-dynamic-views-table"/>, are available to show
   the current state of the system. There are also several other
   views, listed in <xref
   linkend="monitoring-stats-views-table"/>, available to show the results
   of statistics collection.  Alternatively, one can
   build custom views using the underlying statistics functions, as discussed
   in <xref linkend="monitoring-stats-functions"/>.
-->
システムの現在の状態を表示するために、いくつかの定義済みのビューがあり、<xref linkend="monitoring-stats-dynamic-views-table"/>に一覧されています。
また、統計情報の収集結果を表示するために、他にもいくつかのビューがあり、<xref linkend="monitoring-stats-views-table"/>に一覧されています。
他にも、<xref linkend="monitoring-stats-functions"/>で説明する、基礎的な統計情報関数を使用した独自のビューを構築することもできます。
  </para>

  <para>
<!--
   When using the statistics to monitor collected data, it is important
   to realize that the information does not update instantaneously.
   Each individual server process transmits new statistical counts to
   the collector just before going idle; so a query or transaction still in
   progress does not affect the displayed totals.  Also, the collector itself
   emits a new report at most once per <varname>PGSTAT_STAT_INTERVAL</varname>
   milliseconds (500 ms unless altered while building the server).  So the
   displayed information lags behind actual activity.  However, current-query
   information collected by <varname>track_activities</varname> is
   always up-to-date.
-->
この統計情報を使用して、収集されるデータを監視する場合、この情報は即座に更新されないことを認識することが重要です。
個別のサーバプロセスは、待機状態になる直前に、新しい統計情報に関する数をコレクタに送信します。
ですので、実行中の問い合わせやトランザクションは表示上の総和には影響を与えません。
また、コレクタ自体もおよそ<varname>PGSTAT_STAT_INTERVAL</varname>（サーバ構築時に変更しない限り500 ms）ミリ秒に一度新しい報告を出力します。
ですので、表示上の情報は実際の活動から遅れて表示されます。
しかし、<varname>track_activities</varname>で収集される現在の問い合わせの情報は常に最新です。
  </para>

  <para>
<!--
   Another important point is that when a server process is asked to display
   any of these statistics, it first fetches the most recent report emitted by
   the collector process and then continues to use this snapshot for all
   statistical views and functions until the end of its current transaction.
   So the statistics will show static information as long as you continue the
   current transaction.  Similarly, information about the current queries of
   all sessions is collected when any such information is first requested
   within a transaction, and the same information will be displayed throughout
   the transaction.
   This is a feature, not a bug, because it allows you to perform several
   queries on the statistics and correlate the results without worrying that
   the numbers are changing underneath you.  But if you want to see new
   results with each query, be sure to do the queries outside any transaction
   block.  Alternatively, you can invoke
   <function>pg_stat_clear_snapshot</function>(), which will discard the
   current transaction's statistics snapshot (if any).  The next use of
   statistical information will cause a new snapshot to be fetched.
-->
この他の重要なポイントは、いつサーバプロセスが統計情報を表示するように尋ねられるかです。
サーバプロセスは、まずコレクタによって発行された最も最近の報告を取り出します。
そして、現在のトランザクションが終わるまで、全ての統計情報ビューと関数においてこのスナップショットを使用し続けます。
ですから、現在のトランザクションを続けている間、統計情報は一定の情報を示します。
同様に、全セッションの現在の問い合わせに関する情報も、そうした情報がトランザクションで最初に要求された時に収集され、そのトランザクションの間同じ情報が表示されます。
これはバグではなく、特徴です。
なぜなら、これにより、知らない間に値が変更することを考慮することなく、統計情報に対して複数の問い合わせを実行し、その結果を相関することができるからです。
しかし、各問い合わせで新しい結果を取り出したい場合は、確実にトランザクションブロックの外側でその問い合わせを行ってください。
他にも<function>pg_stat_clear_snapshot</function>()を呼び出すこともできます。
これは現在のトランザクションの統計情報スナップショットを（もしあれば）破棄します。
次に統計情報を使用する場合に新しいスナップショットを取り出すことになります。
  </para>

  <para>
<!--
   A transaction can also see its own statistics (as yet untransmitted to the
   collector) in the views <structname>pg_stat_xact_all_tables</structname>,
   <structname>pg_stat_xact_sys_tables</structname>,
   <structname>pg_stat_xact_user_tables</structname>, and
   <structname>pg_stat_xact_user_functions</structname>.  These numbers do not act as
   stated above; instead they update continuously throughout the transaction.
-->
トランザクションからは、<structname>pg_stat_xact_all_tables</structname>、<structname>pg_stat_xact_sys_tables</structname>、<structname>pg_stat_xact_user_tables</structname>、<structname>pg_stat_xact_user_functions</structname>、およびこれらのビューの元となっている関数を通じて、自身の統計情報(まだコレクタに送られていない)も参照することができます。
   これらの数値はトランザクション中に継続的に更新されていくため上記の様な(静的な情報を示す)振る舞いとはなりません。
  </para>

  <para>
<!--
   Some of the information in the dynamic statistics views shown in <xref
   linkend="monitoring-stats-dynamic-views-table"/> is security restricted.
   Ordinary users can only see all the information about their own sessions
   (sessions belonging to a role that they are a member of).  In rows about
   other sessions, many columns will be null.  Note, however, that the
   existence of a session and its general properties such as its sessions user
   and database are visible to all users.  Superusers and members of the
   built-in role <literal>pg_read_all_stats</literal> (see also <xref
   linkend="default-roles"/>) can see all the information about all sessions.
-->
<xref linkend="monitoring-stats-dynamic-views-table"/>で表示される一部の動的な統計ビューにはセキュリティ制限があります。
一般ユーザは自身のセッション（メンバとなっているロールに属するセッション）に関する全情報だけを参照できます。
他セッションに関する行では多くの列がNULLになるでしょう。
しかしながら、セッションの存在とセッションのユーザとデータベースなどの一般的な属性は全ユーザに可視であることに注意してください。
スーパーユーザと組み込みロール<literal>pg_read_all_stats</literal>（<xref linkend="default-roles"/>も参照してください）のメンバも全セッションに関する全情報を参照できます。
  </para>

  <table id="monitoring-stats-dynamic-views-table">
<!--
   <title>Dynamic Statistics Views</title>
-->
<title>動的統計情報ビュー</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>View Name</entry>
      <entry>Description</entry>
-->
<entry>ビュー名</entry>
<entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry>
       <structname>pg_stat_activity</structname>
       <indexterm><primary>pg_stat_activity</primary></indexterm>
      </entry>
      <entry>
<!--
       One row per server process, showing information related to
       the current activity of that process, such as state and current query.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-activity-view">
       <structname>pg_stat_activity</structname></link> for details.
=======
       See <xref linkend="pg-stat-activity-view"/> for details.
-->
サーバプロセスあたり１行の形式で、状態や現在の問い合わせ等のプロセスの現在の活動状況に関連した情報を表示します。
詳細については<xref linkend="pg-stat-activity-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_replication</structname><indexterm><primary>pg_stat_replication</primary></indexterm></entry>
<!--
      <entry>One row per WAL sender process, showing statistics about
       replication to that sender's connected standby server.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-replication-view">
       <structname>pg_stat_replication</structname></link> for details.
=======
       See <xref linkend="pg-stat-replication-view"/> for details.
-->
      <entry>
WAL送信プロセス毎に１行の形式で、送信サーバが接続したスタンバイサーバへのレプリケーションに関する統計情報を表示します。
詳細については<xref linkend="pg-stat-replication-view"/>を参照して下さい。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_wal_receiver</structname><indexterm><primary>pg_stat_wal_receiver</primary></indexterm></entry>
<!--
      <entry>Only one row, showing statistics about the WAL receiver from
       that receiver's connected server.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-wal-receiver-view">
       <structname>pg_stat_wal_receiver</structname></link> for details.
=======
       See <xref linkend="pg-stat-wal-receiver-view"/> for details.
-->
      <entry>
１行の形式で、受信サーバが接続したサーバからWALレシーバに関する統計情報を表示します。
詳細については<xref linkend="pg-stat-wal-receiver-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_subscription</structname><indexterm><primary>pg_stat_subscription</primary></indexterm></entry>
<!--
      <entry>At least one row per subscription, showing information about
       the subscription workers.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-subscription">
       <structname>pg_stat_subscription</structname></link> for details.
=======
       See <xref linkend="pg-stat-subscription"/> for details.
-->
      <entry>
1つのサブスクリプションにつき少なくとも1行の形式で、サブスクリプションワーカに関する情報を表示します。
詳細については<xref linkend="pg-stat-subscription"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_ssl</structname><indexterm><primary>pg_stat_ssl</primary></indexterm></entry>
<!--
      <entry>One row per connection (regular and replication), showing information about
       SSL used on this connection.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-ssl-view">
       <structname>pg_stat_ssl</structname></link> for details.
=======
       See <xref linkend="pg-stat-ssl-view"/> for details.
-->
      <entry>
接続（通常およびレプリケーション）あたり1行の形式で、接続に使われるSSLの情報を表示します。
詳しくは<xref linkend="pg-stat-ssl-view"/>を参照して下さい。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_gssapi</structname><indexterm><primary>pg_stat_gssapi</primary></indexterm></entry>
<!--
      <entry>One row per connection (regular and replication), showing information about
       GSSAPI authentication and encryption used on this connection.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-gssapi-view">
       <structname>pg_stat_gssapi</structname></link> for details.
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_progress_analyze</structname><indexterm><primary>pg_stat_progress_analyze</primary></indexterm></entry>
      <entry>One row for each backend (including autovacuum worker processes) running
       <command>ANALYZE</command>, showing current progress.
       See <xref linkend='analyze-progress-reporting'/>.
=======
       See <xref linkend="pg-stat-gssapi-view"/> for details.
-->
     <entry>
接続（通常およびレプリケーション）あたり1行の形式で、接続に使われるGSSAPI認証と暗号化に関する情報を表示します。
詳しくは<xref linkend="pg-stat-gssapi-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_progress_create_index</structname><indexterm><primary>pg_stat_progress_create_index</primary></indexterm></entry>
<!--
      <entry>One row for each backend running <command>CREATE INDEX</command> or <command>REINDEX</command>, showing
      current progress.
      See <xref linkend='create-index-progress-reporting'/>.
-->
     <entry>
<command>CREATE INDEX</command>または<command>REINDEX</command>を実行する各バックエンド実行ごとに1行の形式で、現在の進捗を表示します。
<xref linkend='create-index-progress-reporting'/>を参照してください。
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_progress_vacuum</structname><indexterm><primary>pg_stat_progress_vacuum</primary></indexterm></entry>
<!--
      <entry>One row for each backend (including autovacuum worker processes) running
       <command>VACUUM</command>, showing current progress.
       See <xref linkend='vacuum-progress-reporting'/>.
-->
      <entry>
VACUUMを実行している（自動バキュームワーカプロセスを含んだ）各バックエンドごとに１行の形式で、現在の進捗を表示します。
<xref linkend='vacuum-progress-reporting'/>を参照してください。
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_progress_cluster</structname><indexterm><primary>pg_stat_progress_cluster</primary></indexterm></entry>
<!--
      <entry>One row for each backend running
       <command>CLUSTER</command> or <command>VACUUM FULL</command>, showing current progress.
       See <xref linkend='cluster-progress-reporting'/>.
-->
      <entry>
<command>CLUSTER</command>または<command>VACUUM FULL</command>を実行している各バックエンドごと1行の形式で、現在の進捗を表示します。
<xref linkend='cluster-progress-reporting'/>を参照してください。
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_progress_basebackup</structname><indexterm><primary>pg_stat_progress_basebackup</primary></indexterm></entry>
      <entry>One row for each WAL sender process streaming a base backup,
       showing current progress.
       See <xref linkend='basebackup-progress-reporting'/>.
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <table id="monitoring-stats-views-table">
<!--
   <title>Collected Statistics Views</title>
-->
   <title>収集済み統計情報ビュー</title>

   <tgroup cols="2">
    <thead>
     <row>
<!--
      <entry>View Name</entry>
      <entry>Description</entry>
-->
      <entry>ビュー名</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><structname>pg_stat_archiver</structname><indexterm><primary>pg_stat_archiver</primary></indexterm></entry>
<!--
      <entry>One row only, showing statistics about the
       WAL archiver process's activity. See
<<<<<<< HEAD
       <link linkend="monitoring-pg-stat-archiver-view">
       <structname>pg_stat_archiver</structname></link> for details.
=======
       <xref linkend="pg-stat-archiver-view"/> for details.
-->
      <entry>
WALアーカイバプロセスの活動状況に関する統計情報を１行のみで表示します
詳細については<xref linkend="pg-stat-archiver-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_bgwriter</structname><indexterm><primary>pg_stat_bgwriter</primary></indexterm></entry>
<!--
      <entry>One row only, showing statistics about the
       background writer process's activity. See
<<<<<<< HEAD
       <link linkend="monitoring-pg-stat-bgwriter-view">
       <structname>pg_stat_bgwriter</structname></link> for details.
=======
       <xref linkend="pg-stat-bgwriter-view"/> for details.
-->
      <entry>
バックグラウンドライタプロセスの活動状況に関する統計情報を１行のみで表示します。
詳細については<xref linkend="pg-stat-bgwriter-view"/>を参照してください。
>>>>>>> doc_ja_12
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_database</structname><indexterm><primary>pg_stat_database</primary></indexterm></entry>
<!--
      <entry>One row per database, showing database-wide statistics. See
<<<<<<< HEAD
       <link linkend="monitoring-pg-stat-database-view">
       <structname>pg_stat_database</structname></link> for details.
=======
       <xref linkend="pg-stat-database-view"/> for details.
-->
      <entry>
データベース当たり１行の形で、データベース全体の情報を表示します。
詳細については<xref linkend="pg-stat-database-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_database_conflicts</structname><indexterm><primary>pg_stat_database_conflicts</primary></indexterm></entry>
      <entry>
<!--
       One row per database, showing database-wide statistics about
       query cancels due to conflict with recovery on standby servers.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-database-conflicts-view">
       <structname>pg_stat_database_conflicts</structname></link> for details.
=======
       See <xref linkend="pg-stat-database-conflicts-view"/> for details.
-->
データベース毎に１行の形式で、スタンバイサーバにおける復旧との競合のためにキャンセルされた問い合わせについてのデータベース全体の統計情報を表示します。
詳細については<xref linkend="pg-stat-database-conflicts-view"/>を参照して下さい。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_tables</structname><indexterm><primary>pg_stat_all_tables</primary></indexterm></entry>
      <entry>
<!--
       One row for each table in the current database, showing statistics
       about accesses to that specific table.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-all-tables-view">
       <structname>pg_stat_all_tables</structname></link> for details.
=======
       See <xref linkend="pg-stat-all-tables-view"/> for details.
-->
現在のデータベースの各テーブルごとに１行の形で、特定のテーブルへのアクセスに関する統計情報を示します。
詳細については<xref linkend="pg-stat-all-tables-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_tables</structname><indexterm><primary>pg_stat_sys_tables</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_stat_all_tables</structname>, except that only
      system tables are shown.</entry>
-->
      <entry>
システムテーブルのみが表示される点を除き、<structname>pg_stat_all_tables</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_tables</structname><indexterm><primary>pg_stat_user_tables</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_stat_all_tables</structname>, except that only user
      tables are shown.</entry>
-->
<entry>
ユーザテーブルのみが表示される点を除き、<structname>pg_stat_all_tables</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_all_tables</structname><indexterm><primary>pg_stat_xact_all_tables</primary></indexterm></entry>
      <!--
      <entry>Similar to <structname>pg_stat_all_tables</structname>, but counts actions
      taken so far within the current transaction (which are <emphasis>not</emphasis>
      yet included in <structname>pg_stat_all_tables</structname> and related views).
      The columns for numbers of live and dead rows and vacuum and
      analyze actions are not present in this view.</entry>
      -->
     <entry>
<structname>pg_stat_all_tables</structname>と似ていますが、現在のトランザクションにて実施された処理結果をカウントします。(数値が見える時点では、これらの数値は<structname>pg_stat_all_tables</structname>と関連するビューに含まれて<emphasis>いません</emphasis>。)
このビューでは、有効行数、無効行数、およびバキュームやアナライズの活動は表示しません。
     </entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_sys_tables</structname><indexterm><primary>pg_stat_xact_sys_tables</primary></indexterm></entry>
      <!--
      <entry>Same as <structname>pg_stat_xact_all_tables</structname>, except that only
      system tables are shown.</entry>
      -->
      <entry>
      システムテーブルのみが表示される点を除き、<structname>pg_stat_xact_all_tables</structname>と同じです。
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_user_tables</structname><indexterm><primary>pg_stat_xact_user_tables</primary></indexterm></entry>
      <!--
      <entry>Same as <structname>pg_stat_xact_all_tables</structname>, except that only
      user tables are shown.</entry>
      -->
      <entry>
      ユーザテーブルのみが表示される点を除き、<structname>pg_stat_xact_all_tables</structname>と同じです。
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_all_indexes</structname><indexterm><primary>pg_stat_all_indexes</primary></indexterm></entry>
      <entry>
<!--
       One row for each index in the current database, showing statistics
       about accesses to that specific index.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-stat-all-indexes-view">
       <structname>pg_stat_all_indexes</structname></link> for details.
=======
       See <xref linkend="pg-stat-all-indexes-view"/> for details.
-->
現在のデータベースのインデックスごとに１行の形で、特定のインデックスへのアクセスに関する統計情報を示します。
詳細については<xref linkend="pg-stat-all-indexes-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_sys_indexes</structname><indexterm><primary>pg_stat_sys_indexes</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_stat_all_indexes</structname>, except that only
      indexes on system tables are shown.</entry>
-->
      <entry>
システムテーブルのインデックスのみが表示される点を除き、<structname>pg_stat_all_indexes</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_indexes</structname><indexterm><primary>pg_stat_user_indexes</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_stat_all_indexes</structname>, except that only
      indexes on user tables are shown.</entry>
-->
      <entry>
ユーザテーブルのインデックスのみが表示される点を除き、<structname>pg_stat_all_indexes</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_tables</structname><indexterm><primary>pg_statio_all_tables</primary></indexterm></entry>
      <entry>
<!--
       One row for each table in the current database, showing statistics
       about I/O on that specific table.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-statio-all-tables-view">
       <structname>pg_statio_all_tables</structname></link> for details.
=======
       See <xref linkend="pg-statio-all-tables-view"/> for details.
-->
現在のデータベース内のテーブルごとに１行の形で、特定のテーブルに対するI/Oに関する統計情報を示します。
詳細については<xref linkend="pg-statio-all-tables-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_tables</structname><indexterm><primary>pg_statio_sys_tables</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_statio_all_tables</structname>, except that only
      system tables are shown.</entry>
-->
      <entry>
システムテーブルのみが表示される点を除き、<structname>pg_statio_all_tables</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_tables</structname><indexterm><primary>pg_statio_user_tables</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_statio_all_tables</structname>, except that only
      user tables are shown.</entry>
-->
      <entry>
ユーザテーブルのみが表示される点を除き、<structname>pg_statio_all_tables</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_indexes</structname><indexterm><primary>pg_statio_all_indexes</primary></indexterm></entry>
      <entry>
<!--
       One row for each index in the current database,
       showing statistics about I/O on that specific index.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-statio-all-indexes-view">
       <structname>pg_statio_all_indexes</structname></link> for details.
=======
       See <xref linkend="pg-statio-all-indexes-view"/> for details.
-->
現在のデータベース内のインデックスごとに１行の形で、特定のインデックスに対するI/Oに関する統計情報を示します。
詳細については<xref linkend="pg-statio-all-indexes-view"/>を示します。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_indexes</structname><indexterm><primary>pg_statio_sys_indexes</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_statio_all_indexes</structname>, except that only
      indexes on system tables are shown.</entry>
-->
      <entry>
システムテーブルのインデックスのみが表示される点を除き、<structname>pg_statio_all_indexes</structname> と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_indexes</structname><indexterm><primary>pg_statio_user_indexes</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_statio_all_indexes</structname>, except that only
      indexes on user tables are shown.</entry>
-->
      <entry>
ユーザテーブルのインデックスのみが表示される点を除き、<structname>pg_statio_all_indexes</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_statio_all_sequences</structname><indexterm><primary>pg_statio_all_sequences</primary></indexterm></entry>
     <entry>
<!--
       One row for each sequence in the current database,
       showing statistics about I/O on that specific sequence.
<<<<<<< HEAD
       See <link linkend="monitoring-pg-statio-all-sequences-view">
       <structname>pg_statio_all_sequences</structname></link> for details.
=======
       See <xref linkend="pg-statio-all-sequences-view"/> for details.
-->
現在のデータベース内のシーケンスごとに１行の形で、特定のシーケンスに対するI/Oに関する統計情報を示します。
詳細については<xref linkend="pg-statio-all-sequences-view"/>を参照してください。
>>>>>>> doc_ja_12
     </entry>
     </row>

     <row>
      <entry><structname>pg_statio_sys_sequences</structname><indexterm><primary>pg_statio_sys_sequences</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_statio_all_sequences</structname>, except that only
      system sequences are shown.  (Presently, no system sequences are defined,
      so this view is always empty.)</entry>
-->
<entry>
システムシーケンスのみが表示される点を除き、<structname>pg_statio_all_sequences</structname>と同じです
（現時点では、システムシーケンスは定義されていませんので、このビューは常に空です）。
</entry>
     </row>

     <row>
      <entry><structname>pg_statio_user_sequences</structname><indexterm><primary>pg_statio_user_sequences</primary></indexterm></entry>
<!--
      <entry>Same as <structname>pg_statio_all_sequences</structname>, except that only
      user sequences are shown.</entry>
-->
      <entry>
ユーザシーケンスのみが表示される点を除き、<structname>pg_statio_all_sequences</structname>と同じです。
</entry>
     </row>

     <row>
      <entry><structname>pg_stat_user_functions</structname><indexterm><primary>pg_stat_user_functions</primary></indexterm></entry>
      <entry>
<!--
       One row for each tracked function, showing statistics
       about executions of that function. See
<<<<<<< HEAD
       <link linkend="monitoring-pg-stat-user-functions-view">
       <structname>pg_stat_user_functions</structname></link> for details.
=======
       <xref linkend="pg-stat-user-functions-view"/> for details.
-->
追跡された関数ごとに１行の形で、関数の実行に関する統計情報を示します。
詳細については<xref linkend="pg-stat-user-functions-view"/>を参照してください。
>>>>>>> doc_ja_12
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_xact_user_functions</structname><indexterm><primary>pg_stat_xact_user_functions</primary></indexterm></entry>
<!--
      <entry>Similar to <structname>pg_stat_user_functions</structname>, but counts only
      calls during the current transaction (which are <emphasis>not</emphasis>
      yet included in <structname>pg_stat_user_functions</structname>).</entry>
-->
      <entry>
<structname>pg_stat_user_functions</structname>と似ていますが、現在のトランザクション中に呼び出されたものだけをカウントします。
(数値が見える時点では、これらの数値は<structname>pg_stat_user_functions</structname>に含まれて<emphasis>いません</emphasis>。)
      </entry>
     </row>

     <row>
      <entry><structname>pg_stat_slru</structname><indexterm><primary>pg_stat_slru</primary></indexterm></entry>
      <entry>One row per SLRU, showing statistics of operations. See
       <link linkend="monitoring-pg-stat-slru-view">
       <structname>pg_stat_slru</structname></link> for details.
      </entry>
     </row>

    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The per-index statistics are particularly useful to determine which
   indexes are being used and how effective they are.
-->
インデックス単位の統計情報は、どのインデックスが使用され、どの程度効果があるのかを評価する際に、特に有用です。
  </para>

  <para>
<!--
   The <structname>pg_statio_</structname> views are primarily useful to
   determine the effectiveness of the buffer cache.  When the number
   of actual disk reads is much smaller than the number of buffer
   hits, then the cache is satisfying most read requests without
   invoking a kernel call. However, these statistics do not give the
   entire story: due to the way in which <productname>PostgreSQL</productname>
   handles disk I/O, data that is not in the
   <productname>PostgreSQL</productname> buffer cache might still reside in the
   kernel's I/O cache, and might therefore still be fetched without
   requiring a physical read. Users interested in obtaining more
   detailed information on <productname>PostgreSQL</productname> I/O behavior are
   advised to use the <productname>PostgreSQL</productname> statistics collector
   in combination with operating system utilities that allow insight
   into the kernel's handling of I/O.
-->
<structname>pg_statio_</structname>ビューは主に、バッファキャッシュの効率を評価する際に有用です。
実ディスク読み取りの数がバッファヒットの数よりもかなり少ないのであれば、そのキャッシュはカーネル呼び出しを行うことなく、ほとんどの読み取り要求を満足させています。
しかし、<productname>PostgreSQL</productname>バッファキャッシュに存在しないデータはカーネルのI/Oキャッシュにある可能性があり、そのため、物理的な読み取りを行うことなく取り出される可能性があるという<productname>PostgreSQL</productname>のディスクI/Oの取り扱いのため、これらの統計情報は、完全な論拠を提供しません。
<productname>PostgreSQL</productname>のI/O動作に関するより詳細な情報を入手したいのであれば、<productname>PostgreSQL</productname>統計情報コレクタとカーネルのI/Oの取り扱いの監視を行うオペレーティングシステムユーティリティを組み合わせることを勧めます。
  </para>

 </sect2>

 <sect2 id="monitoring-pg-stat-activity-view">
  <title><structname>pg_stat_activity</structname></title>

  <indexterm>
   <primary>pg_stat_activity</primary>
  </indexterm>

  <para>
   The <structname>pg_stat_activity</structname> view will have one row
   per server process, showing information related to
   the current activity of that process.
  </para>

  <table id="pg-stat-activity-view" xreflabel="pg_stat_activity">
<!--
   <title><structname>pg_stat_activity</structname> View</title>
<<<<<<< HEAD
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the database this backend is connected to
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of the database this backend is connected to
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of this backend
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>leader_pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of the parallel group leader, if this process is a
       parallel query worker.  <literal>NULL</literal> if this process is a
       parallel group leader or does not participate in parallel query.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>usesysid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the user logged into this backend
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>usename</structfield> <type>name</type>
      </para>
      <para>
       Name of the user logged into this backend
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>application_name</structfield> <type>text</type>
      </para>
      <para>
       Name of the application that is connected
       to this backend
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_addr</structfield> <type>inet</type>
      </para>
      <para>
       IP address of the client connected to this backend.
       If this field is null, it indicates either that the client is
       connected via a Unix socket on the server machine or that this is an
       internal process such as autovacuum.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_hostname</structfield> <type>text</type>
      </para>
      <para>
       Host name of the connected client, as reported by a
       reverse DNS lookup of <structfield>client_addr</structfield>. This field will
       only be non-null for IP connections, and only when <xref linkend="guc-log-hostname"/> is enabled.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_port</structfield> <type>integer</type>
      </para>
      <para>
       TCP port number that the client is using for communication
       with this backend, or <literal>-1</literal> if a Unix socket is used.
       If this field is null, it indicates that this is an internal server process.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backend_start</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time when this process was started.  For client backends,
       this is the time the client connected to the server.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>xact_start</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time when this process' current transaction was started, or null
       if no transaction is active. If the current
       query is the first of its transaction, this column is equal to the
       <structfield>query_start</structfield> column.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>query_start</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time when the currently active query was started, or if
       <structfield>state</structfield> is not <literal>active</literal>, when the last query
       was started
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>state_change</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time when the <structfield>state</structfield> was last changed
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>wait_event_type</structfield> <type>text</type>
      </para>
      <para>
       The type of event for which the backend is waiting, if any;
       otherwise NULL.  See <xref linkend="wait-event-table"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>wait_event</structfield> <type>text</type>
      </para>
      <para>
       Wait event name if backend is currently waiting, otherwise NULL.
       See <xref linkend="wait-event-activity-table"/> through
       <xref linkend="wait-event-timeout-table"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>state</structfield> <type>text</type>
      </para>
      <para>
       Current overall state of this backend.
       Possible values are:
       <itemizedlist>
        <listitem>
        <para>
          <literal>active</literal>: The backend is executing a query.
=======
-->
   <title><structname>pg_stat_activity</structname>ビュー</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
    <row>
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the database this backend is connected to</entry>
-->
     <entry>
バックエンドが接続するデータベースのOIDです。
     </entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the database this backend is connected to</entry>
-->
     <entry>
バックエンドが接続するデータベースの名前です。
     </entry>
    </row>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of this backend</entry>
-->
     <entry>
バックエンドのプロセスIDです。
     </entry>
    </row>
    <row>
     <entry><structfield>usesysid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the user logged into this backend</entry>
-->
     <entry>
バックエンドにログインしたユーザの識別子です。
     </entry>
    </row>
    <row>
     <entry><structfield>usename</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the user logged into this backend</entry>
-->
     <entry>バックエンドに接続したユーザの名前です。</entry>
    </row>
    <row>
     <entry><structfield>application_name</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Name of the application that is connected
      to this backend</entry>
-->
     <entry>
バックエンドに接続したアプリケーションの名前です。
     </entry>
    </row>
    <row>
     <entry><structfield>client_addr</structfield></entry>
     <entry><type>inet</type></entry>
<!--
     <entry>IP address of the client connected to this backend.
      If this field is null, it indicates either that the client is
      connected via a Unix socket on the server machine or that this is an
      internal process such as autovacuum.
-->
     <entry>
バックエンドに接続したクライアントのIPアドレスです。
このフィールドがNULLである場合、これはクライアントがサーバマシン上のUnixソケット経由で接続されたか、自動バキュームなど内部処理であることを示します。
     </entry>
    </row>
    <row>
     <entry><structfield>client_hostname</structfield></entry>
     <entry><type>text</type></entry>
     <entry>
<!--
     <entry>Host name of the connected client, as reported by a
      reverse DNS lookup of <structfield>client_addr</structfield>. This field will
      only be non-null for IP connections, and only when <xref
      linkend="guc-log-hostname"/> is enabled.
-->
<structfield>client_addr</structfield>の逆引き検索により報告された、接続クライアントのホスト名です。
IP接続、かつ<xref linkend="guc-log-hostname"/>が有効である場合にのみこのフィールドは非NULLになります。
     </entry>
    </row>
    <row>
     <entry><structfield>client_port</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>TCP port number that the client is using for communication
      with this backend, or <literal>-1</literal> if a Unix socket is used
-->
     <entry>
クライアントがバックエンドとの通信に使用するTCPポート、もしUnixソケットを使用する場合は<literal>-1</literal>です。
     </entry>
    </row>
    <row>
     <entry><structfield>backend_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time when this process was started.  For client backends,
      this is the time the client connected to the server.
-->
     <entry>
プロセスが開始した時刻です。
クライアントのバックエンドについては、クライアントがサーバに接続した時刻です。
     </entry>
    </row>
    <row>
     <entry><structfield>xact_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time when this process' current transaction was started, or null
      if no transaction is active. If the current
      query is the first of its transaction, this column is equal to the
      <structfield>query_start</structfield> column.
-->
     <entry>
プロセスの現在のトランザクションが開始した時刻です。
活動中のトランザクションがない場合はNULLです。
現在の問い合わせがトランザクションの先頭である場合、この列は<structfield>query_start</structfield>列と同じです。
     </entry>
    </row>
    <row>
     <entry><structfield>query_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time when the currently active query was started, or if
      <structfield>state</structfield> is not <literal>active</literal>, when the last query
      was started
-->
     <entry>
現在有効な問い合わせが開始した時刻です。
もし<structfield>state</structfield>が<literal>active</literal>でない場合は直前の問い合わせが開始した時刻です。
     </entry>
    </row>
    <row>
     <entry><structfield>state_change</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time when the <structfield>state</structfield> was last changed</entry>
-->
     <entry><structfield>state</structfield>の最終変更時刻です。</entry>
    </row>
     <row>
      <entry><structfield>wait_event_type</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>The type of event for which the backend is waiting, if any;
       otherwise NULL. Possible values are:
-->
      <entry>
バックエンドが待機しているイベントがあれば、その型、なければNULLとなります。
以下のいずれかの値を取ることができます。
       <itemizedlist>
        <listitem>
         <para>
<!--
          <literal>LWLock</literal>: The backend is waiting for a lightweight lock.
          Each such lock protects a particular data structure in shared memory.
          <literal>wait_event</literal> will contain a name identifying the purpose
          of the lightweight lock.  (Some locks have specific names; others
          are part of a group of locks each with a similar purpose.)
-->
<literal>LWLock</literal>: バックエンドは軽量ロックを待っています。
このようなそれぞれのロックは、共有メモリ内の特定のデータ構造を保護します。
<literal>wait_event</literal>には軽量ロックの目的を特定する名前が入ります。
（特定の名前がついたロックもあれば、似たような目的のロックのグループの一部となっているものもあります。）
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>Lock</literal>: The backend is waiting for a heavyweight lock.
          Heavyweight locks, also known as lock manager locks or simply locks,
          primarily protect SQL-visible objects such as tables.  However,
          they are also used to ensure mutual exclusion for certain internal
          operations such as relation extension.  <literal>wait_event</literal> will
          identify the type of lock awaited.
-->
<literal>Lock</literal>: バックエンドは重量ロックを待っています。
ロックマネージャロックや単にロックとしても知られている重量ロックは、主にテーブルのようなSQLで可視なオブジェクトを保護します。
しかし、それらはリレーション拡張のような、なんらかの内部操作のために相互排他的に確保するためにも使用されます。
<literal>wait_event</literal>は、待たせているロックの型を識別します。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>BufferPin</literal>: The server process is waiting to access to
          a data buffer during a period when no other process can be
          examining that buffer.  Buffer pin waits can be protracted if
          another process holds an open cursor which last read data from the
          buffer in question.
-->
<literal>BufferPin</literal>: サーバプロセスは、ほかのどのプロセスもデータバッファを調べることができない期間に、データバッファにアクセスするために待機しています。
バッファピン待機は、他のプロセスが該当のバッファから最後に読み込んだデータのオープンカーソルを保持している場合に長引かされることがあります。
         </para>
        </listitem>
        <listitem>
         <para>
<!--
          <literal>Activity</literal>: The server process is idle.  This is used by
          system processes waiting for activity in their main processing loop.
          <literal>wait_event</literal> will identify the specific wait point.
-->
<literal>Activity</literal>: サーバプロセスはアイドル状態です。
システムプロセスがメインの処理ループ内で活動を待機している時に使用されます。
<literal>wait_event</literal>によりその待機点が特定できます。
>>>>>>> doc_ja_12
         </para>
        </listitem>
        <listitem>
         <para>
<<<<<<< HEAD
          <literal>idle</literal>: The backend is waiting for a new client command.
=======
<!--
          <literal>Extension</literal>: The server process is waiting for activity
          in an extension module.  This category is useful for modules to
          track custom waiting points.
-->
<literal>Extension</literal>: サーバプロセスは拡張モジュール内で活動を待機しています。
この分類は、カスタム待機点を追跡するモジュールで役に立ちます。
>>>>>>> doc_ja_12
         </para>
        </listitem>
        <listitem>
         <para>
<<<<<<< HEAD
          <literal>idle in transaction</literal>: The backend is in a transaction,
          but is not currently executing a query.
=======
<!--
          <literal>Client</literal>: The server process is waiting for some activity
          on a socket from user applications, and that the server expects
          something to happen that is independent from its internal processes.
          <literal>wait_event</literal> will identify the specific wait point.
-->
<literal>Client</literal>: サーバプロセスはユーザアプリケーションによるソケット上での何らかの活動を待機しており、またサーバはその内部プロセスとは無関係の何かが起きることを期待しています。
<literal>wait_event</literal>によりその待機点が特定できます。
>>>>>>> doc_ja_12
         </para>
        </listitem>
        <listitem>
         <para>
<<<<<<< HEAD
          <literal>idle in transaction (aborted)</literal>: This state is similar to
          <literal>idle in transaction</literal>, except one of the statements in
          the transaction caused an error.
=======
<!--
          <literal>IPC</literal>: The server process is waiting for some activity
          from another process in the server.  <literal>wait_event</literal> will
          identify the specific wait point.
-->
<literal>IPC</literal>: サーバプロセスは、サーバ内の別のプロセスによる何らかの活動を待機しています。
<literal>wait_event</literal>によりその待機点が特定できます。
>>>>>>> doc_ja_12
         </para>
        </listitem>
        <listitem>
         <para>
<<<<<<< HEAD
          <literal>fastpath function call</literal>: The backend is executing a
          fast-path function.
=======
<!--
          <literal>Timeout</literal>: The server process is waiting for a timeout
          to expire.  <literal>wait_event</literal> will identify the specific wait
          point.
-->
<literal>Timeout</literal>: サーバプロセスはタイムアウトが満了するのを待機しています。
<literal>wait_event</literal>によりその待機点が特定できます。
>>>>>>> doc_ja_12
         </para>
        </listitem>
        <listitem>
         <para>
<<<<<<< HEAD
          <literal>disabled</literal>: This state is reported if <xref linkend="guc-track-activities"/> is disabled in this backend.
=======
<!--
          <literal>IO</literal>: The server process is waiting for a IO to complete.
          <literal>wait_event</literal> will identify the specific wait point.
-->
<literal>IO</literal>: サーバプロセスは入出力が完了するのを待機しています。
<literal>wait_event</literal>によりその待機点が特定できます。
>>>>>>> doc_ja_12
         </para>
       </listitem>
       </itemizedlist>
      </para></entry>
     </row>
<<<<<<< HEAD

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backend_xid</structfield> <type>xid</type>
      </para>
      <para>
       Top-level transaction identifier of this backend, if any.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backend_xmin</structfield> <type>xid</type>
      </para>
      <para>
       The current backend's <literal>xmin</literal> horizon.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>query</structfield> <type>text</type>
      </para>
      <para>
       Text of this backend's most recent query. If
       <structfield>state</structfield> is <literal>active</literal> this field shows the
       currently executing query. In all other states, it shows the last query
       that was executed. By default the query text is truncated at 1024
       bytes; this value can be changed via the parameter
       <xref linkend="guc-track-activity-query-size"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backend_type</structfield> <type>text</type>
      </para>
      <para>
       Type of current backend. Possible types are
       <literal>autovacuum launcher</literal>, <literal>autovacuum worker</literal>,
       <literal>logical replication launcher</literal>,
       <literal>logical replication worker</literal>,
       <literal>parallel worker</literal>, <literal>background writer</literal>,
       <literal>client backend</literal>, <literal>checkpointer</literal>,
       <literal>startup</literal>, <literal>walreceiver</literal>,
       <literal>walsender</literal> and <literal>walwriter</literal>.
       In addition, background workers registered by extensions may have
       additional types.
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

=======
    <row>
     <entry><structfield>wait_event</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Wait event name if backend is currently waiting, otherwise NULL.
     See <xref linkend="wait-event-table"/> for details.
-->
     <entry>
バックエンドが現在待機している場合は待機イベント名、その他はNULL。
詳細は<xref linkend="wait-event-table"/>を参照してください。
     </entry>
    </row>
    <row>
     <entry><structfield>state</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Current overall state of this backend.
       Possible values are:
-->
     <entry>
現在のバックエンドの総体的な状態です。
以下のいずれかの値を取ることができます。
       <itemizedlist>
         <listitem>
          <para>
<!--
           <literal>active</literal>: The backend is executing a query.
-->
           <literal>active</literal>: バックエンドは問い合わせを実行中です。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>idle</literal>: The backend is waiting for a new client command.
-->
           <literal>idle</literal>: バックエンドは新しいクライアントからのコマンドを待機しています。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>idle in transaction</literal>: The backend is in a transaction,
           but is not currently executing a query.
-->
           <literal>idle in transaction</literal>: バックエンドはトランザクションの内部にいますが、現在実行中の問い合わせがありません。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>idle in transaction (aborted)</literal>: This state is similar to
           <literal>idle in transaction</literal>, except one of the statements in
           the transaction caused an error.
-->
           <literal>idle in transaction (aborted)</literal>: この状態は<literal>idle in transaction</literal>と似ていますが、トランザクション内のある文がエラーになっている点が異なります。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>fastpath function call</literal>: The backend is executing a
           fast-path function.
-->
           <literal>fastpath function call</literal>: バックエンドは近道関数を実行中です。
          </para>
         </listitem>
         <listitem>
           <para>
<!--
           <literal>disabled</literal>: This state is reported if <xref
           linkend="guc-track-activities"/> is disabled in this backend.
-->
           <literal>disabled</literal>: この状態は、このバックエンドで<xref linkend="guc-track-activities"/>が無効である場合に報告されます。
          </para>
         </listitem>
       </itemizedlist>
     </entry>
    </row>
    <row>
     <entry><structfield>backend_xid</structfield></entry>
     <entry><type>xid</type></entry>
<!--
     <entry>Top-level transaction identifier of this backend, if any.</entry>
-->
     <entry>
もしあれば、このバックエンドの最上位のトランザクション識別子。
     </entry>
    </row>
    <row>
     <entry><structfield>backend_xmin</structfield></entry>
     <entry><type>xid</type></entry>
<!--
     <entry>The current backend's <literal>xmin</literal> horizon.</entry>
-->
     <entry>
現在のバックエンドの<literal>xmin</literal>。
     </entry>
    </row>
    <row>
     <entry><structfield>query</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Text of this backend's most recent query. If
      <structfield>state</structfield> is <literal>active</literal> this field shows the
      currently executing query. In all other states, it shows the last query
      that was executed. By default the query text is truncated at 1024
      bytes; this value can be changed via the parameter
      <xref linkend="guc-track-activity-query-size"/>.
-->
<entry>
バックエンドの最も最近の問い合わせテキストです。
<structfield>state</structfield>が<literal>active</literal>の場合、現在実行中の問い合わせを意味します。
その他のすべての状態では、実行済みの最後の問い合わせを示します。
デフォルトでは問い合わせのテキストは1024バイトで切り捨てられますが、この値はパラメータ<xref linkend="guc-track-activity-query-size"/>により変更できます。
     </entry>
    </row>
    <row>
     <entry><structfield>backend_type</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Type of current backend. Possible types are
      <literal>autovacuum launcher</literal>, <literal>autovacuum worker</literal>,
      <literal>logical replication launcher</literal>,
      <literal>logical replication worker</literal>,
      <literal>parallel worker</literal>, <literal>background writer</literal>,
      <literal>client backend</literal>, <literal>checkpointer</literal>,
      <literal>startup</literal>, <literal>walreceiver</literal>,
      <literal>walsender</literal> and <literal>walwriter</literal>.
      In addition, background workers registered by extensions may have
      additional types.
-->
     <entry>
現在のバックエンドの種別です。
取り得る値は<literal>autovacuum launcher</literal>、<literal>autovacuum worker</literal>、<literal>logical replication launcher</literal>、<literal>logical replication worker</literal>、<literal>parallel worker</literal>, <literal>background writer</literal>、<literal>client backend</literal>、<literal>checkpointer</literal>、<literal>startup</literal>、<literal>walreceiver</literal>、<literal>walsender</literal>、<literal>walwriter</literal>です。
これに加えて、拡張によって登録されたバックグラウンドワーカは追加の型を持つかも知れません。
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_activity</structname> view will have one row
   per server process, showing information related to
   the current activity of that process.
-->
<structname>pg_stat_activity</structname>はサーバプロセス毎に、そのプロセスの現在の活動に関連する情報を表示する１行を持ちます。
  </para>

>>>>>>> doc_ja_12
  <note>
   <para>
<!--
    The <structfield>wait_event</structfield> and <structfield>state</structfield> columns are
    independent.  If a backend is in the <literal>active</literal> state,
    it may or may not be <literal>waiting</literal> on some event.  If the state
    is <literal>active</literal> and <structfield>wait_event</structfield> is non-null, it
    means that a query is being executed, but is being blocked somewhere
    in the system.
-->
<structfield>wait_event</structfield>と<structfield>state</structfield>列は独立しています。
バックエンドが<literal>active</literal>状態である場合、いくつかのイベントでは<literal>waiting</literal>かもしれませんし、そうでないかもしれません。
状態が<literal>active</literal>であり、<structfield>wait_event</structfield>がNULLでない場合、問い合わせは実行中ですが、システム内のどこかでブロックされていることを意味します。
   </para>
  </note>

  <table id="wait-event-table">
<<<<<<< HEAD
   <title>Wait Event Types</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>Wait Event Type</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>Activity</literal></entry>
      <entry>The server process is idle.  This event type indicates a process
       waiting for activity in its main processing loop.
       <literal>wait_event</literal> will identify the specific wait point;
       see <xref linkend="wait-event-activity-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>BufferPin</literal></entry>
      <entry>The server process is waiting for exclusive access to
       a data buffer.  Buffer pin waits can be protracted if
       another process holds an open cursor that last read data from the
       buffer in question. See <xref linkend="wait-event-bufferpin-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>Client</literal></entry>
      <entry>The server process is waiting for activity on a socket
       connected to a user application.  Thus, the server expects something
       to happen that is independent of its internal processes.
       <literal>wait_event</literal> will identify the specific wait point;
       see <xref linkend="wait-event-client-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>Extension</literal></entry>
      <entry>The server process is waiting for some condition defined by an
       extension module.
       See <xref linkend="wait-event-extension-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>IO</literal></entry>
      <entry>The server process is waiting for an I/O operation to complete.
       <literal>wait_event</literal> will identify the specific wait point;
       see <xref linkend="wait-event-io-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>IPC</literal></entry>
      <entry>The server process is waiting for some interaction with
       another server process.  <literal>wait_event</literal> will
       identify the specific wait point;
       see <xref linkend="wait-event-ipc-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>Lock</literal></entry>
      <entry>The server process is waiting for a heavyweight lock.
       Heavyweight locks, also known as lock manager locks or simply locks,
       primarily protect SQL-visible objects such as tables.  However,
       they are also used to ensure mutual exclusion for certain internal
       operations such as relation extension.  <literal>wait_event</literal>
       will identify the type of lock awaited;
       see <xref linkend="wait-event-lock-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>LWLock</literal></entry>
      <entry> The server process is waiting for a lightweight lock.
       Most such locks protect a particular data structure in shared memory.
       <literal>wait_event</literal> will contain a name identifying the purpose
       of the lightweight lock.  (Some locks have specific names; others
       are part of a group of locks each with a similar purpose.)
       See <xref linkend="wait-event-lwlock-table"/>.
      </entry>
     </row>
     <row>
      <entry><literal>Timeout</literal></entry>
      <entry>The server process is waiting for a timeout
       to expire.  <literal>wait_event</literal> will identify the specific wait
       point; see <xref linkend="wait-event-timeout-table"/>.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-activity-table">
   <title>Wait Events of Type <literal>Activity</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>Activity</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>
=======
<!--
   <title><structname>wait_event</structname> Description</title>
-->
   <title><structname>wait_event</structname>の説明</title>

    <tgroup cols="3">
      <thead>
       <row>
<!--
        <entry>Wait Event Type</entry>
        <entry>Wait Event Name</entry>
        <entry>Description</entry>
-->
        <entry>待機イベント型</entry>
        <entry>待機イベント名</entry>
        <entry>説明</entry>
       </row>
      </thead>

      <tbody>
       <row>
        <entry morerows="64"><literal>LWLock</literal></entry>
        <entry><literal>ShmemIndexLock</literal></entry>
<!--
        <entry>Waiting to find or allocate space in shared memory.</entry>
-->
        <entry>共有メモリ内に領域を発見する、もしくは割り当てるのを待っています。</entry>
       </row>
       <row>
        <entry><literal>OidGenLock</literal></entry>
<!--
        <entry>Waiting to allocate or assign an OID.</entry>
-->
        <entry>OIDを割り当て、または付与するのを待っています。</entry>
       </row>
        <row>
         <entry><literal>XidGenLock</literal></entry>
<!--
         <entry>Waiting to allocate or assign a transaction id.</entry>
-->
        <entry>トランザクションIDを割り当て、または付与するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>ProcArrayLock</literal></entry>
<!--
         <entry>Waiting to get a snapshot or clearing a transaction id at
         transaction end.</entry>
-->
         <entry>トランザクションの終了にてスナップショットを取得、またはトランザクションIDを消去するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SInvalReadLock</literal></entry>
<!--
         <entry>Waiting to retrieve or remove messages from shared invalidation
         queue.</entry>
-->
         <entry>共有無効化キュー内のメッセージを検索、もしくは削除するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SInvalWriteLock</literal></entry>
<!--
         <entry>Waiting to add a message in shared invalidation queue.</entry>
-->
         <entry>共有無効化キュー内のメッセージを追加するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>WALBufMappingLock</literal></entry>
<!--
         <entry>Waiting to replace a page in WAL buffers.</entry>
-->
         <entry>WALバッファ内のページの置き換えを待っています。</entry>
        </row>
        <row>
         <entry><literal>WALWriteLock</literal></entry>
<!--
         <entry>Waiting for WAL buffers to be written to disk.</entry>
-->
         <entry>WALバッファがディスクに書き込まれるのを待っています。</entry>
        </row>
        <row>
         <entry><literal>ControlFileLock</literal></entry>
<!--
         <entry>Waiting to read or update the control file or creation of a
         new WAL file.</entry>
-->
         <entry>制御ファイルの読み込みもしくは更新、または新しいWALファイルの作成を待っています。</entry>
        </row>
        <row>
         <entry><literal>CheckpointLock</literal></entry>
<!--
         <entry>Waiting to perform checkpoint.</entry>
-->
         <entry>チェックポイントを処理することを待っています。</entry>
        </row>
        <row>
         <entry><literal>CLogControlLock</literal></entry>
<!--
         <entry>Waiting to read or update transaction status.</entry>
-->
         <entry>トランザクションの状態を読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SubtransControlLock</literal></entry>
<!--
         <entry>Waiting to read or update sub-transaction information.</entry>
-->
         <entry>サブトランザクション情報の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>MultiXactGenLock</literal></entry>
<!--
         <entry>Waiting to read or update shared multixact state.</entry>
-->
         <entry>共有マルチトランザクション状態の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>MultiXactOffsetControlLock</literal></entry>
<!--
         <entry>Waiting to read or update multixact offset mappings.</entry>
-->
         <entry>マルチトランザクションオフセットマッピングの読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>MultiXactMemberControlLock</literal></entry>
<!--
         <entry>Waiting to read or update multixact member mappings.</entry>
-->
         <entry>マルチトランザクションメンバーマッピングの読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>RelCacheInitLock</literal></entry>
<!--
         <entry>Waiting to read or write relation cache initialization
         file.</entry>
-->
         <entry>リレーションキャッシュ初期化ファイルの読み込み、または書き込みするのを待っています。</entry>
        </row>
        <row>
         <entry><literal>CheckpointerCommLock</literal></entry>
<!--
         <entry>Waiting to manage fsync requests.</entry>
-->
         <entry>fsyncリクエストを管理するために待機しています。</entry>
        </row>
        <row>
         <entry><literal>TwoPhaseStateLock</literal></entry>
<!--
         <entry>Waiting to read or update the state of prepared transactions.</entry>
-->
         <entry>プリペアードトランザクションの状態を読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>TablespaceCreateLock</literal></entry>
<!--
         <entry>Waiting to create or drop the tablespace.</entry>
-->
         <entry>テーブルスペースの作成、または削除するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>BtreeVacuumLock</literal></entry>
<!--
          <entry>Waiting to read or update vacuum-related information for a
          B-tree index.</entry>
-->
          <entry>B-Treeインデックスのバキュームに関連した情報の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>AddinShmemInitLock</literal></entry>
<!--
         <entry>Waiting to manage space allocation in shared memory.</entry>
-->
         <entry>共有メモリの領域確保を管理するために待機しています。</entry>
        </row>
        <row>
         <entry><literal>AutovacuumLock</literal></entry>
<!--
         <entry>Autovacuum worker or launcher waiting to update or
         read the current state of autovacuum workers.</entry>
-->
         <entry>自動バキュームワーカの現在の状態を更新、または読み込むために待機している自動バキュームワーカまたはランチャ。</entry>
        </row>
        <row>
         <entry><literal>AutovacuumScheduleLock</literal></entry>
<!--
         <entry>Waiting to ensure that the table it has selected for a vacuum
         still needs vacuuming.
-->
         <entry>
バキューム対象として選定されたテーブルが、まだバキューム処理が必要であることを確認するために待っています。
         </entry>
        </row>
        <row>
         <entry><literal>SyncScanLock</literal></entry>
<!--
         <entry>Waiting to get the start location of a scan on a table for
         synchronized scans.</entry>
-->
         <entry>同期スキャンのためにテーブル上のスキャン開始位置を取得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>RelationMappingLock</literal></entry>
<!--
         <entry>Waiting to update the relation map file used to store catalog
         to filenode mapping.
-->
         <entry>
ファイルノードマッピングへカタログを格納するために使用される、リレーションマップファイルを更新するのを待っています。
         </entry>
        </row>
        <row>
         <entry><literal>AsyncCtlLock</literal></entry>
<!--
         <entry>Waiting to read or update shared notification state.</entry>
-->
         <entry>共有通知状態の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>AsyncQueueLock</literal></entry>
<!--
          <entry>Waiting to read or update notification messages.</entry>
-->
         <entry>通知メッセージの読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SerializableXactHashLock</literal></entry>
<!--
         <entry>Waiting to retrieve or store information about serializable
         transactions.</entry>
-->
         <entry>シリアライザブルトランザクションに関する情報を検索、または格納するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SerializableFinishedListLock</literal></entry>
<!--
         <entry>Waiting to access the list of finished serializable
         transactions.</entry>
-->
         <entry>完了したシリアライザブルトランザクションの一覧へアクセスするのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SerializablePredicateLockListLock</literal></entry>
<!--
         <entry>Waiting to perform an operation on a list of locks held by
         serializable transactions.</entry>
-->
         <entry>シリアライザブルトランザクションによって保持されたロックの一覧への操作を処理するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>OldSerXidLock</literal></entry>
<!--
         <entry>Waiting to read or record conflicting serializable
         transactions.</entry>
-->
         <entry>衝突しているシリアライザブルトランザクションの読み込み、または記録するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>SyncRepLock</literal></entry>
<!--
         <entry>Waiting to read or update information about synchronous
         replicas.</entry>
-->
         <entry>同期レプリカに関する情報の読み込み、または更新のために待機しています。</entry>
        </row>
        <row>
         <entry><literal>BackgroundWorkerLock</literal></entry>
<!--
         <entry>Waiting to read or update background worker state.</entry>
-->
         <entry>バックグラウンドワーカ状態の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>DynamicSharedMemoryControlLock</literal></entry>
<!--
         <entry>Waiting to read or update dynamic shared memory state.</entry>
-->
         <entry>動的共有メモリ状態の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>AutoFileLock</literal></entry>
<!--
         <entry>Waiting to update the <filename>postgresql.auto.conf</filename> file.</entry>
-->
         <entry><filename>postgresql.auto.conf</filename>ファイルの更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotAllocationLock</literal></entry>
<!--
         <entry>Waiting to allocate or free a replication slot.</entry>
-->
         <entry>レプリケーションスロットの割り当て、または解放するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotControlLock</literal></entry>
<!--
         <entry>Waiting to read or update replication slot state.</entry>
-->
         <entry>レプリケーションスロット状態の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>CommitTsControlLock</literal></entry>
<!--
         <entry>Waiting to read or update transaction commit timestamps.</entry>
-->
         <entry>トランザクションコミットタイムスタンプの読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>CommitTsLock</literal></entry>
<!--
         <entry>Waiting to read or update the last value set for the
         transaction timestamp.</entry>
-->
         <entry>トランザクションタイムスタンプのために設定された最新の値を読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationOriginLock</literal></entry>
<!--
         <entry>Waiting to setup, drop or use replication origin.</entry>
-->
         <entry>レプリケーションオリジンのセットアップ、削除、または使用を待っています。</entry>
        </row>
        <row>
         <entry><literal>MultiXactTruncationLock</literal></entry>
<!--
         <entry>Waiting to read or truncate multixact information.</entry>
-->
         <entry>マルチトランザクション情報の読み込み、またはトランケートを行うのを待っています。</entry>
        </row>
        <row>
         <entry><literal>OldSnapshotTimeMapLock</literal></entry>
<!--
         <entry>Waiting to read or update old snapshot control information.</entry>
-->
         <entry>古いスナップショット制御情報の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRepWorkerLock</literal></entry>
<!--
         <entry>Waiting for action on logical replication worker to finish.</entry>
-->
         <entry>論理レプリケーションワーカの動作が完了するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>CLogTruncationLock</literal></entry>
         <entry>Waiting to execute <function>txid_status</function> or update
         the oldest transaction id available to it.</entry>
        </row>
        <row>
         <entry><literal>clog</literal></entry>
<!--
         <entry>Waiting for I/O on a clog (transaction status) buffer.</entry>
-->
         <entry>clog（トランザクション状態）バッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>commit_timestamp</literal></entry>
<!--
         <entry>Waiting for I/O on commit timestamp buffer.</entry>
-->
         <entry>コミットタイムスタンプバッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>subtrans</literal></entry>
<!--
         <entry>Waiting for I/O a subtransaction buffer.</entry>
-->
         <entry>サブトランザクションバッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>multixact_offset</literal></entry>
<!--
         <entry>Waiting for I/O on a multixact offset buffer.</entry>
-->
         <entry>マルチトランザクションオフセットバッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>multixact_member</literal></entry>
<!--
         <entry>Waiting for I/O on a multixact_member buffer.</entry>
-->
         <entry>マルチトランザクションメンバーバッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>async</literal></entry>
<!--
         <entry>Waiting for I/O on an async (notify) buffer.</entry>
-->
         <entry>非同期（通知）バッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>oldserxid</literal></entry>
<!--
         <entry>Waiting for I/O on an oldserxid buffer.</entry>
-->
         <entry>oldserxidバッファのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>wal_insert</literal></entry>
<!--
         <entry>Waiting to insert WAL into a memory buffer.</entry>
-->
         <entry>メモリバッファにWALを挿入するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>buffer_content</literal></entry>
<!--
         <entry>Waiting to read or write a data page in memory.</entry>
-->
         <entry>メモリ内のデータページを読み込み、または書き込むのを待っています。</entry>
        </row>
        <row>
         <entry><literal>buffer_io</literal></entry>
<!--
         <entry>Waiting for I/O on a data page.</entry>
-->
         <entry>データページのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>replication_origin</literal></entry>
<!--
         <entry>Waiting to read or update the replication progress.</entry>
-->
         <entry>レプリケーション進捗の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>replication_slot_io</literal></entry>
<!--
         <entry>Waiting for I/O on a replication slot.</entry>
-->
         <entry>レプリケーションスロットのI/Oを待機しています。</entry>
        </row>
        <row>
         <entry><literal>proc</literal></entry>
<!--
         <entry>Waiting to read or update the fast-path lock information.</entry>
-->
         <entry>ファストパスロック情報の読み込み、または更新するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>buffer_mapping</literal></entry>
<!--
         <entry>Waiting to associate a data block with a buffer in the buffer
         pool.</entry>
-->
         <entry>データブロックをバッファプール内のバッファと関連付けるのを待っています。</entry>
        </row>
        <row>
         <entry><literal>lock_manager</literal></entry>
<!--
         <entry>Waiting to add or examine locks for backends, or waiting to
         join or exit a locking group (used by parallel query).</entry>
-->
         <entry>バックエンドのロックの追加、もしくは検査するのを待っています。
         または、（並列問い合わせによって使用される）ロッキンググループへ加わる、または抜けるのを待っています。</entry>
        </row>
        <row>
         <entry><literal>predicate_lock_manager</literal></entry>
<!--
         <entry>Waiting to add or examine predicate lock information.</entry>
-->
         <entry>述語ロック情報の追加、もしくは検査するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>serializable_xact</literal></entry>
<!--
         <entry>Waiting to perform an operation on a serializable transaction
         in a parallel query.</entry>
-->
         <entry>並列問い合わせでシリアライザブルトランザクション上の操作を実行するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>parallel_query_dsa</literal></entry>
<!--
         <entry>Waiting for parallel query dynamic shared memory allocation lock.</entry>
-->
         <entry>パラレルクエリの動的共有メモリ割り当てロックを待機しています。</entry>
        </row>
        <row>
         <entry><literal>tbm</literal></entry>
<!--
         <entry>Waiting for TBM shared iterator lock.</entry>
-->
         <entry>TBM共有イテレータロックを待機しています。</entry>
        </row>
        <row>
         <entry><literal>parallel_append</literal></entry>
<!--
         <entry>Waiting to choose the next subplan during Parallel Append plan
         execution.</entry>
-->
         <entry>パラレルアペンド計画を実行中に次のサブプランの選択を待機しています。</entry>
        </row>
        <row>
         <entry><literal>parallel_hash_join</literal></entry>
<!--
         <entry>Waiting to allocate or exchange a chunk of memory or update
         counters during Parallel Hash plan execution.</entry>
-->
         <entry>パラレルハッシュ計画を実行中に、メモリチャンクまたは更新カウンタの割り当てまたは交換を待機しています。</entry>
        </row>
        <row>
         <entry morerows="9"><literal>Lock</literal></entry>
         <entry><literal>relation</literal></entry>
<!--
         <entry>Waiting to acquire a lock on a relation.</entry>
-->
         <entry>リレーション上のロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>extend</literal></entry>
<!--
         <entry>Waiting to extend a relation.</entry>
-->
         <entry>リレーションを拡張するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>page</literal></entry>
<!--
         <entry>Waiting to acquire a lock on page of a relation.</entry>
-->
         <entry>リレーションのページ上のロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>tuple</literal></entry>
<!--
         <entry>Waiting to acquire a lock on a tuple.</entry>
-->
         <entry>タプル上のロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>transactionid</literal></entry>
<!--
         <entry>Waiting for a transaction to finish.</entry>
-->
         <entry>トランザクションが終了するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>virtualxid</literal></entry>
<!--
         <entry>Waiting to acquire a virtual xid lock.</entry>
-->
         <entry>仮想xidロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>speculative token</literal></entry>
<!--
         <entry>Waiting to acquire a speculative insertion lock.</entry>
-->
         <entry>投機的挿入ロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>object</literal></entry>
<!--
         <entry>Waiting to acquire a lock on a non-relation database object.</entry>
-->
         <entry>非リレーションデータベースオブジェクト上のロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>userlock</literal></entry>
<!--
         <entry>Waiting to acquire a user lock.</entry>
-->
         <entry>ユーザロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>advisory</literal></entry>
<!--
         <entry>Waiting to acquire an advisory user lock.</entry>
-->
         <entry>助言ユーザロックを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry><literal>BufferPin</literal></entry>
         <entry><literal>BufferPin</literal></entry>
<!--
         <entry>Waiting to acquire a pin on a buffer.</entry>
-->
         <entry>バッファ上のピンを獲得するのを待っています。</entry>
        </row>
        <row>
         <entry morerows="13"><literal>Activity</literal></entry>
         <entry><literal>ArchiverMain</literal></entry>
<!--
         <entry>Waiting in main loop of the archiver process.</entry>
-->
         <entry>アーカイバプロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>AutoVacuumMain</literal></entry>
<!--
         <entry>Waiting in main loop of autovacuum launcher process.</entry>
-->
         <entry>自動バキュームのランチャプロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>BgWriterHibernate</literal></entry>
<!--
         <entry>Waiting in background writer process, hibernating.</entry>
-->
         <entry>バックグラウンドライタプロセス内で待機し、休止状態になっています。</entry>
        </row>
        <row>
         <entry><literal>BgWriterMain</literal></entry>
<!--
         <entry>Waiting in main loop of background writer process background worker.</entry>
-->
         <entry>バックグラウンドライタプロセスのバックグラウンドワーカのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>CheckpointerMain</literal></entry>
<!--
         <entry>Waiting in main loop of checkpointer process.</entry>
-->
         <entry>チェックポインタプロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalApplyMain</literal></entry>
<!--
         <entry>Waiting in main loop of logical apply process.</entry>
-->
         <entry>ロジカルアプライプロセスのメインループ内で待機しています。</entry>

        </row>
        <row>
         <entry><literal>LogicalLauncherMain</literal></entry>
<!--
         <entry>Waiting in main loop of logical launcher process.</entry>
-->
         <entry>ロジカルランチャプロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>PgStatMain</literal></entry>
<!--
         <entry>Waiting in main loop of the statistics collector process.</entry>
-->
         <entry>統計情報収集プロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>RecoveryWalAll</literal></entry>
<!--
         <entry>Waiting for WAL from a stream at recovery.</entry>
-->
         <entry>リカバリ時にストリームからのWALを待機しています。</entry>
        </row>
        <row>
         <entry><literal>RecoveryWalStream</literal></entry>
         <entry>
<!--
          Waiting when WAL data is not available from any kind of sources
          (local, archive or stream) before trying again to retrieve WAL data,
          at recovery.
-->
         これからリカバリ時にWALデータを再度取得しようとしており、まだあらゆる種類のソース（ローカル、アーカイブ、またはストリーム）からWALデータが得られない状態で待機しています。
         </entry>
        </row>
        <row>
         <entry><literal>SysLoggerMain</literal></entry>
<!--
         <entry>Waiting in main loop of syslogger process.</entry>
-->
         <entry>sysloggerプロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>WalReceiverMain</literal></entry>
<!--
         <entry>Waiting in main loop of WAL receiver process.</entry>
-->
         <entry>WAL受信プロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>WalSenderMain</literal></entry>
<!--
         <entry>Waiting in main loop of WAL sender process.</entry>
-->
         <entry>WAL送信プロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>WalWriterMain</literal></entry>
<!--
         <entry>Waiting in main loop of WAL writer process.</entry>
-->
         <entry>WAL書き込みプロセスのメインループ内で待機しています。</entry>
        </row>
        <row>
         <entry morerows="8"><literal>Client</literal></entry>
         <entry><literal>ClientRead</literal></entry>
<!--
         <entry>Waiting to read data from the client.</entry>
-->
         <entry>クライアントからのデータの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ClientWrite</literal></entry>
<!--
         <entry>Waiting to write data to the client.</entry>
-->
         <entry>クライアントへのデータの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>GSSOpenServer</literal></entry>
<!--
         <entry>Waiting to read data from the client while establishing the GSSAPI session.</entry>
-->
         <entry>GSSAPセッションを確立する際にクライアントからのデータ読み込みを待っています。</entry>
        </row>
        <row>
         <entry><literal>LibPQWalReceiverConnect</literal></entry>
<!--
         <entry>Waiting in WAL receiver to establish connection to remote server.</entry>
-->
         <entry>WAL受信プロセス内でリモートサーバへの接続が確立するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LibPQWalReceiverReceive</literal></entry>
<!--
         <entry>Waiting in WAL receiver to receive data from remote server.</entry>
-->
         <entry>WAL受信プロセス内でリモートサーバからデータを受信するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SSLOpenServer</literal></entry>
<!--
         <entry>Waiting for SSL while attempting connection.</entry>
-->
         <entry>接続試行中にSSLを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WalReceiverWaitStart</literal></entry>
<!--
         <entry>Waiting for startup process to send initial data for streaming replication.</entry>
-->
         <entry>起動プロセスがストリーミングレプリケーションの初期データを送信するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WalSenderWaitForWAL</literal></entry>
<!--
         <entry>Waiting for WAL to be flushed in WAL sender process.</entry>
-->
         <entry>WALがWAL送信プロセス内でフラッシュされるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WalSenderWriteData</literal></entry>
<!--
         <entry>Waiting for any activity when processing replies from WAL receiver in WAL sender process.</entry>
-->
         <entry>WAL送信プロセス内でWAL受信者からの応答を処理している時に、何らかの活動を待機しています。</entry>
        </row>
        <row>
         <entry><literal>Extension</literal></entry>
         <entry><literal>Extension</literal></entry>
<!--
         <entry>Waiting in an extension.</entry>
-->
         <entry>拡張内で待機しています。</entry>
        </row>
        <row>
         <entry morerows="36"><literal>IPC</literal></entry>
         <entry><literal>BgWorkerShutdown</literal></entry>
<!--
         <entry>Waiting for background worker to shut down.</entry>
-->
         <entry>バックグラウンドワーカがシャットダウンするのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>BgWorkerStartup</literal></entry>
<!--
         <entry>Waiting for background worker to start up.</entry>
-->
         <entry>バックグラウンドワーカが起動するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>BtreePage</literal></entry>
<!--
         <entry>Waiting for the page number needed to continue a parallel B-tree scan to become available.</entry>
-->
         <entry>パラレルBツリースキャンに必要なページ番号が利用可能になるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>CheckpointDone</literal></entry>
<!--
         <entry>Waiting for a checkpoint to complete.</entry>
-->
         <entry>チェックポイントが完了するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>CheckpointStart</literal></entry>
<!--
         <entry>Waiting for a checkpoint to start.</entry>
-->
         <entry>チェックポイントが開始するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ClogGroupUpdate</literal></entry>
<!--
         <entry>Waiting for group leader to update transaction status at transaction end.</entry>
-->
         <entry>トランザクション終了時にグループリーダによるトランザクション状態の更新を待機しています。</entry>
        </row>
        <row>
         <entry><literal>ExecuteGather</literal></entry>
<!--
         <entry>Waiting for activity from child process when executing <literal>Gather</literal> node.</entry>
-->
         <entry><literal>Gather</literal>ノードの実行時に子プロセスの活動を待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/Batch/Allocating</literal></entry>
<!--
          <entry>Waiting for an elected Parallel Hash participant to allocate a hash table.</entry>
-->
          <entry>選ばれたパラレルハッシュ参加者がハッシュテーブルを獲得するのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/Batch/Electing</literal></entry>
<!--
          <entry>Electing a Parallel Hash participant to allocate a hash table.</entry>
-->
          <entry>ハッシュテーブルを獲得するパラレルハッシュ参加者を選んでいます。</entry>
        </row>
        <row>
          <entry><literal>Hash/Batch/Loading</literal></entry>
<!--
          <entry>Waiting for other Parallel Hash participants to finish loading a hash table.</entry>
-->
          <entry>他のパラレルハッシュ参加者がハッシュテーブルのロードを完了させるのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/Build/Allocating</literal></entry>
<!--
          <entry>Waiting for an elected Parallel Hash participant to allocate the initial hash table.</entry>
-->
          <entry>選ばれたパラレルハッシュ参加者が初期ハッシュテーブルを獲得するのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/Build/Electing</literal></entry>
<!--
          <entry>Electing a Parallel Hash participant to allocate the initial hash table.</entry>
-->
          <entry>初期ハッシュテーブルを獲得するパラレルハッシュ参加者を選んでいます。</entry>
        </row>
        <row>
          <entry><literal>Hash/Build/HashingInner</literal></entry>
<!--
          <entry>Waiting for other Parallel Hash participants to finish hashing the inner relation.</entry>
-->
          <entry>他のパラレルハッシュ参加者がインナーリレーションのハッシュを完了させるのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/Build/HashingOuter</literal></entry>
<!--
          <entry>Waiting for other Parallel Hash participants to finish partitioning the outer relation.</entry>
-->
          <entry>他のパラレルハッシュ参加者がアウターリレーションのパーティショニングを完了させるのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBatches/Allocating</literal></entry>
<!--
          <entry>Waiting for an elected Parallel Hash participant to allocate more batches.</entry>
-->
          <entry>選ばれたパラレルハッシュ参加者が追加バッチを獲得するのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBatches/Deciding</literal></entry>
<!--
          <entry>Electing a Parallel Hash participant to decide on future batch growth.</entry>
-->
          <entry>将来のバッチの増加を決めるパラレルハッシュ参加者を選んでいます。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBatches/Electing</literal></entry>
<!--
          <entry>Electing a Parallel Hash participant to allocate more batches.</entry>
-->
          <entry>追加バッチを獲得するパラレルハッシュ参加者を選んでいます。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBatches/Finishing</literal></entry>
<!--
          <entry>Waiting for an elected Parallel Hash participant to decide on future batch growth.</entry>
-->
          <entry>選ばれたパラレルハッシュ参加者が将来のバッチの増加を決めるのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBatches/Repartitioning</literal></entry>
<!--
          <entry>Waiting for other Parallel Hash participants to finishing repartitioning.</entry>
-->
          <entry>他のパラレルハッシュ参加者がリパーティショニングを完了させるのを待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBuckets/Allocating</literal></entry>
<!--
          <entry>Waiting for an elected Parallel Hash participant to finish allocating more buckets.</entry>
-->
          <entry>選ばれたパラレルハッシュ参加者による追加バケット獲得の完了を待機しています。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBuckets/Electing</literal></entry>
<!--
          <entry>Electing a Parallel Hash participant to allocate more buckets.</entry>
-->
          <entry>追加バケットを獲得するパラレルハッシュ参加者を選んでいます。</entry>
        </row>
        <row>
          <entry><literal>Hash/GrowBuckets/Reinserting</literal></entry>
<!--
          <entry>Waiting for other Parallel Hash participants to finish inserting tuples into new buckets.</entry>
-->
          <entry>他のパラレルハッシュ参加者が新しいバケットに対するタプル挿入を完了させるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalSyncData</literal></entry>
<!--
         <entry>Waiting for logical replication remote server to send data for initial table synchronization.</entry>
-->
         <entry>論理レプリケーションのリモートサーバが最初のテーブル同期のためのデータを送信するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalSyncStateChange</literal></entry>
<!--
         <entry>Waiting for logical replication remote server to change state.</entry>
-->
         <entry>論理レプリケーションのリモートサーバが状態を変更するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>MessageQueueInternal</literal></entry>
<!--
         <entry>Waiting for other process to be attached in shared message queue.</entry>
-->
         <entry>他のプロセスが共有メッセージキューにアタッチされるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>MessageQueuePutMessage</literal></entry>
<!--
         <entry>Waiting to write a protocol message to a shared message queue.</entry>
-->
         <entry>共有メッセージキューにプロトコルのメッセージを書くのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>MessageQueueReceive</literal></entry>
<!--
         <entry>Waiting to receive bytes from a shared message queue.</entry>
-->
         <entry>共有メッセージキューからバイトを受信するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>MessageQueueSend</literal></entry>
<!--
         <entry>Waiting to send bytes to a shared message queue.</entry>
-->
         <entry>共有メッセージキューにバイトを送信するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ParallelBitmapScan</literal></entry>
<!--
         <entry>Waiting for parallel bitmap scan to become initialized.</entry>
-->
         <entry>パラレルビットマップスキャンが初期化されるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ParallelCreateIndexScan</literal></entry>
<!--
         <entry>Waiting for parallel <command>CREATE INDEX</command> workers to finish heap scan.</entry>
-->
         <entry>パラレル<command>CREATE INDEX</command>ワーカーがヒープスキャンを完了させるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ParallelFinish</literal></entry>
         <entry>Waiting for parallel workers to finish computing.</entry>
        </row>
        <row>
         <entry><literal>ProcArrayGroupUpdate</literal></entry>
         <entry>Waiting for group leader to clear transaction id at transaction end.</entry>
        </row>
        <row>
         <entry><literal>Promote</literal></entry>
<!--
         <entry>Waiting for standby promotion.</entry>
-->
         <entry>スタンバイの昇格を待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationOriginDrop</literal></entry>
<!--
         <entry>Waiting for a replication origin to become inactive to be dropped.</entry>
-->
         <entry>レプリケーションオリジンが削除できるよう非活動状態になるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotDrop</literal></entry>
<!--
         <entry>Waiting for a replication slot to become inactive to be dropped.</entry>
-->
         <entry>レプリケーションスロットが削除できるよう非活動状態になるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SafeSnapshot</literal></entry>
<!--
         <entry>Waiting for a snapshot for a <literal>READ ONLY DEFERRABLE</literal> transaction.</entry>
-->
         <entry><literal>READ ONLY DEFERRABLE</literal>のトランザクションのスナップショットを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SyncRep</literal></entry>
<!--
         <entry>Waiting for confirmation from remote server during synchronous replication.</entry>
-->
         <entry>同期レプリケーション中に、リモートサーバからの確認を待機しています。</entry>
        </row>
        <row>
         <entry morerows="2"><literal>Timeout</literal></entry>
         <entry><literal>BaseBackupThrottle</literal></entry>
<!--
         <entry>Waiting during base backup when throttling activity.</entry>
-->
         <entry>スロットル活動時にベースバックアップで待機しています。</entry>
        </row>
        <row>
         <entry><literal>PgSleep</literal></entry>
<!--
         <entry>Waiting in process that called <function>pg_sleep</function>.</entry>
-->
         <entry><function>pg_sleep</function>を呼び出したプロセス内で待機しています。</entry>
        </row>
        <row>
         <entry><literal>RecoveryApplyDelay</literal></entry>
<!--
         <entry>Waiting to apply WAL at recovery because it is delayed.</entry>
-->
         <entry>リカバリ時のWAL適用が遅延させられたため待機しています。</entry>
        </row>
        <row>
         <entry morerows="67"><literal>IO</literal></entry>
         <entry><literal>BufFileRead</literal></entry>
<!--
         <entry>Waiting for a read from a buffered file.</entry>
-->
         <entry>バッファファイルからの読み取りを待機しています。</entry>
        </row>
        <row>
         <entry><literal>BufFileWrite</literal></entry>
<!--
         <entry>Waiting for a write to a buffered file.</entry>
-->
         <entry>バッファファイルへの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ControlFileRead</literal></entry>
<!--
         <entry>Waiting for a read from the control file.</entry>
-->
         <entry>制御ファイルからの読み取りを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ControlFileSync</literal></entry>
<!--
         <entry>Waiting for the control file to reach stable storage.</entry>
-->
         <entry>制御ファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ControlFileSyncUpdate</literal></entry>
<!--
         <entry>Waiting for an update to the control file to reach stable storage.</entry>
-->
         <entry>制御ファイルの更新が安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ControlFileWrite</literal></entry>
<!--
         <entry>Waiting for a write to the control file.</entry>
-->
         <entry>制御ファイルへの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ControlFileWriteUpdate</literal></entry>
<!--
         <entry>Waiting for a write to update the control file.</entry>
-->
         <entry>制御ファイルの更新の書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>CopyFileRead</literal></entry>
<!--
         <entry>Waiting for a read during a file copy operation.</entry>
-->
         <entry>ファイルコピーの操作の間、読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>CopyFileWrite</literal></entry>
<!--
         <entry>Waiting for a write during a file copy operation.</entry>
-->
         <entry>ファイルコピーの操作の間、書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileExtend</literal></entry>
<!--
         <entry>Waiting for a relation data file to be extended.</entry>
-->
         <entry>リレーションのデータファイルが拡張されるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileFlush</literal></entry>
<!--
         <entry>Waiting for a relation data file to reach stable storage.</entry>
-->
         <entry>リレーションのデータファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileImmediateSync</literal></entry>
<!--
         <entry>Waiting for an immediate synchronization of a relation data file to stable storage.</entry>
-->
         <entry>リレーションのデータファイルが安定したストレージに即座に同期されるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFilePrefetch</literal></entry>
<!--
         <entry>Waiting for an asynchronous prefetch from a relation data file.</entry>
-->
         <entry>リレーションのデータファイルからの非同期プリフェッチを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileRead</literal></entry>
<!--
         <entry>Waiting for a read from a relation data file.</entry>
-->
         <entry>リレーションのデータファイルからの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileSync</literal></entry>
<!--
         <entry>Waiting for changes to a relation data file to reach stable storage.</entry>
-->
         <entry>リレーションのデータファイルへの変更が安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileTruncate</literal></entry>
<!--
         <entry>Waiting for a relation data file to be truncated.</entry>
-->
         <entry>リレーションのデータファイルが切り詰められるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DataFileWrite</literal></entry>
<!--
         <entry>Waiting for a write to a relation data file.</entry>
-->
         <entry>リレーションのデータファイルへの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>DSMFillZeroWrite</literal></entry>
<!--
         <entry>Waiting to write zero bytes to a dynamic shared memory backing file.</entry>
-->
         <entry>動的共有メモリの背後のファイルにゼロのバイトを書き込むのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileAddToDataDirRead</literal></entry>
<!--
         <entry>Waiting for a read while adding a line to the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルに行を追加する間の読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileAddToDataDirSync</literal></entry>
<!--
         <entry>Waiting for data to reach stable storage while adding a line to the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルに行を追加する間、データが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileAddToDataDirWrite</literal></entry>
<!--
         <entry>Waiting for a write while adding a line to the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルに行を追加する間、書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileCreateRead</literal></entry>
<!--
         <entry>Waiting to read while creating the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルを作成する間、読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileCreateSync</literal></entry>
<!--
         <entry>Waiting for data to reach stable storage while creating the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルを作成する間、データが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileCreateWrite</literal></entry>
<!--
         <entry>Waiting for a write while creating the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルを作成する間、書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LockFileReCheckDataDirRead</literal></entry>
<!--
         <entry>Waiting for a read during recheck of the data directory lock file.</entry>
-->
         <entry>データディレクトリのロックファイルを再検査する間に読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRewriteCheckpointSync</literal></entry>
<!--
         <entry>Waiting for logical rewrite mappings to reach stable storage during a checkpoint.</entry>
-->
         <entry>チェックポイントの間に、論理的な再書き込みのマッピングがストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRewriteMappingSync</literal></entry>
<!--
         <entry>Waiting for mapping data to reach stable storage during a logical rewrite.</entry>
-->
         <entry>論理的な再書き込みの間に、マッピングデータが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRewriteMappingWrite</literal></entry>
<!--
         <entry>Waiting for a write of mapping data during a logical rewrite.</entry>
-->
         <entry>論理的な再書き込みの間に、マッピングデータの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRewriteSync</literal></entry>
<!--
         <entry>Waiting for logical rewrite mappings to reach stable storage.</entry>
-->
         <entry>論理的な再書き込みのマッピングが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRewriteTruncate</literal></entry>
<!--
         <entry>Waiting for truncate of mapping data during a logical rewrite.</entry>
-->
         <entry>論理的な再書き込みの際にマッピングデータが切り捨てられるのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>LogicalRewriteWrite</literal></entry>
<!--
         <entry>Waiting for a write of logical rewrite mappings.</entry>
-->
         <entry>論理的な再書き込みのマッピングの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>RelationMapRead</literal></entry>
<!--
         <entry>Waiting for a read of the relation map file.</entry>
-->
         <entry>リレーションのマップファイルの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>RelationMapSync</literal></entry>
<!--
         <entry>Waiting for the relation map file to reach stable storage.</entry>
-->
         <entry>リレーションのマップファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>RelationMapWrite</literal></entry>
<!--
         <entry>Waiting for a write to the relation map file.</entry>
-->
         <entry>リレーションのマップファイルの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReorderBufferRead</literal></entry>
<!--
         <entry>Waiting for a read during reorder buffer management.</entry>
-->
         <entry>並べ替えのバッファ管理の間に読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReorderBufferWrite</literal></entry>
<!--
         <entry>Waiting for a write during reorder buffer management.</entry>
-->
         <entry>並べ替えのバッファ管理の間に書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReorderLogicalMappingRead</literal></entry>
<!--
         <entry>Waiting for a read of a logical mapping during reorder buffer management.</entry>
-->
         <entry>並べ替えのバッファ管理の間に、論理マッピングの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotRead</literal></entry>
<!--
         <entry>Waiting for a read from a replication slot control file.</entry>
-->
         <entry>レプリケーションスロットの制御ファイルからの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotRestoreSync</literal></entry>
<!--
         <entry>Waiting for a replication slot control file to reach stable storage while restoring it to memory.</entry>
-->
         <entry>レプリケーションスロットの制御ファイルをメモリにリストアする間、それが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotSync</literal></entry>
<!--
         <entry>Waiting for a replication slot control file to reach stable storage.</entry>
-->
         <entry>レプリケーションスロットの制御ファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>ReplicationSlotWrite</literal></entry>
<!--
         <entry>Waiting for a write to a replication slot control file.</entry>
-->
         <entry>レプリケーションスロットの制御ファイルへの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SLRUFlushSync</literal></entry>
<!--
         <entry>Waiting for SLRU data to reach stable storage during a checkpoint or database shutdown.</entry>
-->
         <entry>チェックポイントまたはデータベースのシャットダウン中に、SLRUデータが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SLRURead</literal></entry>
<!--
         <entry>Waiting for a read of an SLRU page.</entry>
-->
         <entry>SLRUページの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SLRUSync</literal></entry>
<!--
         <entry>Waiting for SLRU data to reach stable storage following a page write.</entry>
-->
         <entry>ページ書き込みの後、SLRUデータが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SLRUWrite</literal></entry>
<!--
         <entry>Waiting for a write of an SLRU page.</entry>
-->
         <entry>SLRUページの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SnapbuildRead</literal></entry>
<!--
         <entry>Waiting for a read of a serialized historical catalog snapshot.</entry>
-->
         <entry>シリアライズされた通時的カタログのスナップショットの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SnapbuildSync</literal></entry>
<!--
         <entry>Waiting for a serialized historical catalog snapshot to reach stable storage.</entry>
-->
         <entry>シリアライズされた通時的カタログのスナップショットが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>SnapbuildWrite</literal></entry>
<!--
         <entry>Waiting for a write of a serialized historical catalog snapshot.</entry>
-->
         <entry>シリアライズされた通時的スナップショットの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TimelineHistoryFileSync</literal></entry>
<!--
         <entry>Waiting for a timeline history file received via streaming replication to reach stable storage.</entry>
-->
         <entry>ストリーミングレプリケーションを経由して受け取ったタイムラインの履歴ファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TimelineHistoryFileWrite</literal></entry>
<!--
         <entry>Waiting for a write of a timeline history file received via streaming replication.</entry>
-->
         <entry>ストリーミングレプリケーションを経由して受け取ったタイムラインの履歴ファイルの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TimelineHistoryRead</literal></entry>
<!--
         <entry>Waiting for a read of a timeline history file.</entry>
-->
         <entry>タイムラインの履歴ファイルの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TimelineHistorySync</literal></entry>
<!--
         <entry>Waiting for a newly created timeline history file to reach stable storage.</entry>
-->
         <entry>新しく作成されたタイムラインの履歴ファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TimelineHistoryWrite</literal></entry>
<!--
         <entry>Waiting for a write of a newly created timeline history file.</entry>
-->
         <entry>新しく作成されたタイムラインの履歴ファイルの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TwophaseFileRead</literal></entry>
<!--
         <entry>Waiting for a read of a two phase state file.</entry>
-->
         <entry>二相の状態ファイルの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TwophaseFileSync</literal></entry>
<!--
         <entry>Waiting for a two phase state file to reach stable storage.</entry>
-->
         <entry>二相の状態ファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>TwophaseFileWrite</literal></entry>
<!--
         <entry>Waiting for a write of a two phase state file.</entry>
-->
         <entry>二相の状態ファイルの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALBootstrapSync</literal></entry>
<!--
         <entry>Waiting for WAL to reach stable storage during bootstrapping.</entry>
-->
         <entry>ブートストラップ時にWALが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALBootstrapWrite</literal></entry>
<!--
         <entry>Waiting for a write of a WAL page during bootstrapping.</entry>
-->
         <entry>ブートストラップ時にWALページの書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALCopyRead</literal></entry>
<!--
         <entry>Waiting for a read when creating a new WAL segment by copying an existing one.</entry>
-->
         <entry>既存のWALセグメントをコピーして新しいWALセグメントを作成する時に読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALCopySync</literal></entry>
<!--
         <entry>Waiting a new WAL segment created by copying an existing one to reach stable storage.</entry>
-->
         <entry>既存のWALセグメントをコピーして作成した新しいWALセグメントが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALCopyWrite</literal></entry>
<!--
         <entry>Waiting for a write when creating a new WAL segment by copying an existing one.</entry>
-->
         <entry>既存のWALセグメントをコピーして新しいWALセグメントを作成する時に書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALInitSync</literal></entry>
<!--
         <entry>Waiting for a newly initialized WAL file to reach stable storage.</entry>
-->
         <entry>新しく初期化されたWALファイルが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALInitWrite</literal></entry>
<!--
         <entry>Waiting for a write while initializing a new WAL file.</entry>
-->
         <entry>新しいWALファイルを初期化している時に書き込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALRead</literal></entry>
<!--
         <entry>Waiting for a read from a WAL file.</entry>
-->
         <entry>WALファイルからの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALSenderTimelineHistoryRead</literal></entry>
<!--
         <entry>Waiting for a read from a timeline history file during walsender timeline command.</entry>
-->
         <entry>WAL送信サーバのタイムラインコマンドで、タイムラインの履歴ファイルの読み込みを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALSync</literal></entry>
<!--
         <entry>Waiting for a WAL file to reach stable storage.</entry>
-->
         <entry>WALファイルが永続ストレージに達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALSyncMethodAssign</literal></entry>
<!--
         <entry>Waiting for data to reach stable storage while assigning WAL sync method.</entry>
-->
         <entry>WALの同期方法を割り当てている時にデータが安定したストレージに到達するのを待機しています。</entry>
        </row>
        <row>
         <entry><literal>WALWrite</literal></entry>
<!--
         <entry>Waiting for a write to a WAL file.</entry>
-->
         <entry>WALファイルへの書き込みを待機しています。</entry>
        </row>
      </tbody>
     </tgroup>
    </table>

   <note>
    <para>
<!--
     For tranches registered by extensions, the name is specified by extension
     and this will be displayed as <structfield>wait_event</structfield>.  It is quite
     possible that user has registered the tranche in one of the backends (by
     having allocation in dynamic shared memory) in which case other backends
     won't have that information, so we display <literal>extension</literal> for such
     cases.
-->
拡張によって登録されたトランシェでは、名称が拡張によって指定され、それが<structfield>wait_event</structfield>として表示されます。
ユーザが（動的共有メモリ内に割り当てを持つことにより）バックエンドの一つの中で、そのトランシェを登録することは十分考えられますが、その場合は他のバックエンドはその情報を持たないので、このような場合には<literal>extension</literal>と表示します。
    </para>
   </note>

   <para>
<!--
     Here is an example of how wait events can be viewed
-->
以下に、待機イベントが表示される例を示します。
>>>>>>> doc_ja_12

    <tbody>
     <row>
      <entry><literal>ArchiverMain</literal></entry>
      <entry>Waiting in main loop of archiver process.</entry>
     </row>
     <row>
      <entry><literal>AutoVacuumMain</literal></entry>
      <entry>Waiting in main loop of autovacuum launcher process.</entry>
     </row>
     <row>
      <entry><literal>BgWriterHibernate</literal></entry>
      <entry>Waiting in background writer process, hibernating.</entry>
     </row>
     <row>
      <entry><literal>BgWriterMain</literal></entry>
      <entry>Waiting in main loop of background writer process.</entry>
     </row>
     <row>
      <entry><literal>CheckpointerMain</literal></entry>
      <entry>Waiting in main loop of checkpointer process.</entry>
     </row>
     <row>
      <entry><literal>LogicalApplyMain</literal></entry>
      <entry>Waiting in main loop of logical replication apply process.</entry>
     </row>
     <row>
      <entry><literal>LogicalLauncherMain</literal></entry>
      <entry>Waiting in main loop of logical replication launcher process.</entry>
     </row>
     <row>
      <entry><literal>PgStatMain</literal></entry>
      <entry>Waiting in main loop of statistics collector process.</entry>
     </row>
     <row>
      <entry><literal>RecoveryWalStream</literal></entry>
      <entry>Waiting in main loop of startup process for WAL to arrive, during
       streaming recovery.</entry>
     </row>
     <row>
      <entry><literal>SysLoggerMain</literal></entry>
      <entry>Waiting in main loop of syslogger process.</entry>
     </row>
     <row>
      <entry><literal>WalReceiverMain</literal></entry>
      <entry>Waiting in main loop of WAL receiver process.</entry>
     </row>
     <row>
      <entry><literal>WalSenderMain</literal></entry>
      <entry>Waiting in main loop of WAL sender process.</entry>
     </row>
     <row>
      <entry><literal>WalWriterMain</literal></entry>
      <entry>Waiting in main loop of WAL writer process.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

<<<<<<< HEAD
  <table id="wait-event-bufferpin-table">
   <title>Wait Events of Type <literal>BufferPin</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>BufferPin</literal> Wait Event</entry>
=======
  <table id="pg-stat-replication-view" xreflabel="pg_stat_replication">
<!--
   <title><structname>pg_stat_replication</structname> View</title>
-->
   <title><structname>pg_stat_replication</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
>>>>>>> doc_ja_12
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

<<<<<<< HEAD
    <tbody>
     <row>
      <entry><literal>BufferPin</literal></entry>
      <entry>Waiting to acquire an exclusive pin on a buffer.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-client-table">
   <title>Wait Events of Type <literal>Client</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>Client</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>ClientRead</literal></entry>
      <entry>Waiting to read data from the client.</entry>
     </row>
     <row>
      <entry><literal>ClientWrite</literal></entry>
      <entry>Waiting to write data to the client.</entry>
     </row>
     <row>
      <entry><literal>GSSOpenServer</literal></entry>
      <entry>Waiting to read data from the client while establishing a GSSAPI
       session.</entry>
     </row>
     <row>
      <entry><literal>LibPQWalReceiverConnect</literal></entry>
      <entry>Waiting in WAL receiver to establish connection to remote
       server.</entry>
     </row>
     <row>
      <entry><literal>LibPQWalReceiverReceive</literal></entry>
      <entry>Waiting in WAL receiver to receive data from remote server.</entry>
     </row>
     <row>
      <entry><literal>SSLOpenServer</literal></entry>
      <entry>Waiting for SSL while attempting connection.</entry>
     </row>
     <row>
      <entry><literal>WalReceiverWaitStart</literal></entry>
      <entry>Waiting for startup process to send initial data for streaming
       replication.</entry>
     </row>
     <row>
      <entry><literal>WalSenderWaitForWAL</literal></entry>
      <entry>Waiting for WAL to be flushed in WAL sender process.</entry>
     </row>
     <row>
      <entry><literal>WalSenderWriteData</literal></entry>
      <entry>Waiting for any activity when processing replies from WAL
       receiver in WAL sender process.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-extension-table">
   <title>Wait Events of Type <literal>Extension</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>Extension</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>Extension</literal></entry>
      <entry>Waiting in an extension.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-io-table">
   <title>Wait Events of Type <literal>IO</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>IO</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>BufFileRead</literal></entry>
      <entry>Waiting for a read from a buffered file.</entry>
     </row>
     <row>
      <entry><literal>BufFileWrite</literal></entry>
      <entry>Waiting for a write to a buffered file.</entry>
     </row>
     <row>
      <entry><literal>ControlFileRead</literal></entry>
      <entry>Waiting for a read from the <filename>pg_control</filename>
       file.</entry>
     </row>
     <row>
      <entry><literal>ControlFileSync</literal></entry>
      <entry>Waiting for the <filename>pg_control</filename> file to reach
       durable storage.</entry>
     </row>
     <row>
      <entry><literal>ControlFileSyncUpdate</literal></entry>
      <entry>Waiting for an update to the <filename>pg_control</filename> file
       to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>ControlFileWrite</literal></entry>
      <entry>Waiting for a write to the <filename>pg_control</filename>
       file.</entry>
     </row>
     <row>
      <entry><literal>ControlFileWriteUpdate</literal></entry>
      <entry>Waiting for a write to update the <filename>pg_control</filename>
       file.</entry>
     </row>
     <row>
      <entry><literal>CopyFileRead</literal></entry>
      <entry>Waiting for a read during a file copy operation.</entry>
     </row>
     <row>
      <entry><literal>CopyFileWrite</literal></entry>
      <entry>Waiting for a write during a file copy operation.</entry>
     </row>
     <row>
      <entry><literal>DSMFillZeroWrite</literal></entry>
      <entry>Waiting to fill a dynamic shared memory backing file with
       zeroes.</entry>
     </row>
     <row>
      <entry><literal>DataFileExtend</literal></entry>
      <entry>Waiting for a relation data file to be extended.</entry>
     </row>
     <row>
      <entry><literal>DataFileFlush</literal></entry>
      <entry>Waiting for a relation data file to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>DataFileImmediateSync</literal></entry>
      <entry>Waiting for an immediate synchronization of a relation data file to
       durable storage.</entry>
     </row>
     <row>
      <entry><literal>DataFilePrefetch</literal></entry>
      <entry>Waiting for an asynchronous prefetch from a relation data
       file.</entry>
     </row>
     <row>
      <entry><literal>DataFileRead</literal></entry>
      <entry>Waiting for a read from a relation data file.</entry>
     </row>
     <row>
      <entry><literal>DataFileSync</literal></entry>
      <entry>Waiting for changes to a relation data file to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>DataFileTruncate</literal></entry>
      <entry>Waiting for a relation data file to be truncated.</entry>
     </row>
     <row>
      <entry><literal>DataFileWrite</literal></entry>
      <entry>Waiting for a write to a relation data file.</entry>
     </row>
     <row>
      <entry><literal>LockFileAddToDataDirRead</literal></entry>
      <entry>Waiting for a read while adding a line to the data directory lock
       file.</entry>
     </row>
     <row>
      <entry><literal>LockFileAddToDataDirSync</literal></entry>
      <entry>Waiting for data to reach durable storage while adding a line to the
       data directory lock file.</entry>
     </row>
     <row>
      <entry><literal>LockFileAddToDataDirWrite</literal></entry>
      <entry>Waiting for a write while adding a line to the data directory
       lock file.</entry>
     </row>
     <row>
      <entry><literal>LockFileCreateRead</literal></entry>
      <entry>Waiting to read while creating the data directory lock
       file.</entry>
     </row>
     <row>
      <entry><literal>LockFileCreateSync</literal></entry>
      <entry>Waiting for data to reach durable storage while creating the data
       directory lock file.</entry>
     </row>
     <row>
      <entry><literal>LockFileCreateWrite</literal></entry>
      <entry>Waiting for a write while creating the data directory lock
       file.</entry>
     </row>
     <row>
      <entry><literal>LockFileReCheckDataDirRead</literal></entry>
      <entry>Waiting for a read during recheck of the data directory lock
       file.</entry>
     </row>
     <row>
      <entry><literal>LogicalRewriteCheckpointSync</literal></entry>
      <entry>Waiting for logical rewrite mappings to reach durable storage
       during a checkpoint.</entry>
     </row>
     <row>
      <entry><literal>LogicalRewriteMappingSync</literal></entry>
      <entry>Waiting for mapping data to reach durable storage during a logical
       rewrite.</entry>
     </row>
     <row>
      <entry><literal>LogicalRewriteMappingWrite</literal></entry>
      <entry>Waiting for a write of mapping data during a logical
       rewrite.</entry>
     </row>
     <row>
      <entry><literal>LogicalRewriteSync</literal></entry>
      <entry>Waiting for logical rewrite mappings to reach durable
       storage.</entry>
     </row>
     <row>
      <entry><literal>LogicalRewriteTruncate</literal></entry>
      <entry>Waiting for truncate of mapping data during a logical
       rewrite.</entry>
     </row>
     <row>
      <entry><literal>LogicalRewriteWrite</literal></entry>
      <entry>Waiting for a write of logical rewrite mappings.</entry>
     </row>
     <row>
      <entry><literal>RelationMapRead</literal></entry>
      <entry>Waiting for a read of the relation map file.</entry>
     </row>
     <row>
      <entry><literal>RelationMapSync</literal></entry>
      <entry>Waiting for the relation map file to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>RelationMapWrite</literal></entry>
      <entry>Waiting for a write to the relation map file.</entry>
     </row>
     <row>
      <entry><literal>ReorderBufferRead</literal></entry>
      <entry>Waiting for a read during reorder buffer management.</entry>
     </row>
     <row>
      <entry><literal>ReorderBufferWrite</literal></entry>
      <entry>Waiting for a write during reorder buffer management.</entry>
     </row>
     <row>
      <entry><literal>ReorderLogicalMappingRead</literal></entry>
      <entry>Waiting for a read of a logical mapping during reorder buffer
       management.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotRead</literal></entry>
      <entry>Waiting for a read from a replication slot control file.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotRestoreSync</literal></entry>
      <entry>Waiting for a replication slot control file to reach durable storage
       while restoring it to memory.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotSync</literal></entry>
      <entry>Waiting for a replication slot control file to reach durable
       storage.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotWrite</literal></entry>
      <entry>Waiting for a write to a replication slot control file.</entry>
     </row>
     <row>
      <entry><literal>SLRUFlushSync</literal></entry>
      <entry>Waiting for SLRU data to reach durable storage during a checkpoint
       or database shutdown.</entry>
     </row>
     <row>
      <entry><literal>SLRURead</literal></entry>
      <entry>Waiting for a read of an SLRU page.</entry>
     </row>
     <row>
      <entry><literal>SLRUSync</literal></entry>
      <entry>Waiting for SLRU data to reach durable storage following a page
       write.</entry>
     </row>
     <row>
      <entry><literal>SLRUWrite</literal></entry>
      <entry>Waiting for a write of an SLRU page.</entry>
     </row>
     <row>
      <entry><literal>SnapbuildRead</literal></entry>
      <entry>Waiting for a read of a serialized historical catalog
       snapshot.</entry>
     </row>
     <row>
      <entry><literal>SnapbuildSync</literal></entry>
      <entry>Waiting for a serialized historical catalog snapshot to reach
       durable storage.</entry>
     </row>
     <row>
      <entry><literal>SnapbuildWrite</literal></entry>
      <entry>Waiting for a write of a serialized historical catalog
       snapshot.</entry>
     </row>
     <row>
      <entry><literal>TimelineHistoryFileSync</literal></entry>
      <entry>Waiting for a timeline history file received via streaming
       replication to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>TimelineHistoryFileWrite</literal></entry>
      <entry>Waiting for a write of a timeline history file received via
       streaming replication.</entry>
     </row>
     <row>
      <entry><literal>TimelineHistoryRead</literal></entry>
      <entry>Waiting for a read of a timeline history file.</entry>
     </row>
     <row>
      <entry><literal>TimelineHistorySync</literal></entry>
      <entry>Waiting for a newly created timeline history file to reach durable
       storage.</entry>
     </row>
     <row>
      <entry><literal>TimelineHistoryWrite</literal></entry>
      <entry>Waiting for a write of a newly created timeline history
       file.</entry>
     </row>
     <row>
      <entry><literal>TwophaseFileRead</literal></entry>
      <entry>Waiting for a read of a two phase state file.</entry>
     </row>
     <row>
      <entry><literal>TwophaseFileSync</literal></entry>
      <entry>Waiting for a two phase state file to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>TwophaseFileWrite</literal></entry>
      <entry>Waiting for a write of a two phase state file.</entry>
     </row>
     <row>
      <entry><literal>WALBootstrapSync</literal></entry>
      <entry>Waiting for WAL to reach durable storage during
       bootstrapping.</entry>
     </row>
     <row>
      <entry><literal>WALBootstrapWrite</literal></entry>
      <entry>Waiting for a write of a WAL page during bootstrapping.</entry>
     </row>
     <row>
      <entry><literal>WALCopyRead</literal></entry>
      <entry>Waiting for a read when creating a new WAL segment by copying an
       existing one.</entry>
     </row>
     <row>
      <entry><literal>WALCopySync</literal></entry>
      <entry>Waiting for a new WAL segment created by copying an existing one to
       reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>WALCopyWrite</literal></entry>
      <entry>Waiting for a write when creating a new WAL segment by copying an
       existing one.</entry>
     </row>
     <row>
      <entry><literal>WALInitSync</literal></entry>
      <entry>Waiting for a newly initialized WAL file to reach durable
       storage.</entry>
     </row>
     <row>
      <entry><literal>WALInitWrite</literal></entry>
      <entry>Waiting for a write while initializing a new WAL file.</entry>
     </row>
     <row>
      <entry><literal>WALRead</literal></entry>
      <entry>Waiting for a read from a WAL file.</entry>
     </row>
     <row>
      <entry><literal>WALSenderTimelineHistoryRead</literal></entry>
      <entry>Waiting for a read from a timeline history file during a walsender
       timeline command.</entry>
     </row>
     <row>
      <entry><literal>WALSync</literal></entry>
      <entry>Waiting for a WAL file to reach durable storage.</entry>
     </row>
     <row>
      <entry><literal>WALSyncMethodAssign</literal></entry>
      <entry>Waiting for data to reach durable storage while assigning a new
       WAL sync method.</entry>
     </row>
     <row>
      <entry><literal>WALWrite</literal></entry>
      <entry>Waiting for a write to a WAL file.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-ipc-table">
   <title>Wait Events of Type <literal>IPC</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>IPC</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>BackupWaitWalArchive</literal></entry>
      <entry>Waiting for WAL files required for a backup to be successfully
       archived.</entry>
     </row>
     <row>
      <entry><literal>BgWorkerShutdown</literal></entry>
      <entry>Waiting for background worker to shut down.</entry>
     </row>
     <row>
      <entry><literal>BgWorkerStartup</literal></entry>
      <entry>Waiting for background worker to start up.</entry>
     </row>
     <row>
      <entry><literal>BtreePage</literal></entry>
      <entry>Waiting for the page number needed to continue a parallel B-tree
       scan to become available.</entry>
     </row>
     <row>
      <entry><literal>CheckpointDone</literal></entry>
      <entry>Waiting for a checkpoint to complete.</entry>
     </row>
     <row>
      <entry><literal>CheckpointStart</literal></entry>
      <entry>Waiting for a checkpoint to start.</entry>
     </row>
     <row>
      <entry><literal>ExecuteGather</literal></entry>
      <entry>Waiting for activity from a child process while
       executing a <literal>Gather</literal> plan node.</entry>
     </row>
     <row>
      <entry><literal>HashBatchAllocate</literal></entry>
      <entry>Waiting for an elected Parallel Hash participant to allocate a hash
       table.</entry>
     </row>
     <row>
      <entry><literal>HashBatchElect</literal></entry>
      <entry>Waiting to elect a Parallel Hash participant to allocate a hash
       table.</entry>
     </row>
     <row>
      <entry><literal>HashBatchLoad</literal></entry>
      <entry>Waiting for other Parallel Hash participants to finish loading a
       hash table.</entry>
     </row>
     <row>
      <entry><literal>HashBuildAllocate</literal></entry>
      <entry>Waiting for an elected Parallel Hash participant to allocate the
       initial hash table.</entry>
     </row>
     <row>
      <entry><literal>HashBuildElect</literal></entry>
      <entry>Waiting to elect a Parallel Hash participant to allocate the
       initial hash table.</entry>
     </row>
     <row>
      <entry><literal>HashBuildHashInner</literal></entry>
      <entry>Waiting for other Parallel Hash participants to finish hashing the
       inner relation.</entry>
     </row>
     <row>
      <entry><literal>HashBuildHashOuter</literal></entry>
      <entry>Waiting for other Parallel Hash participants to finish partitioning
       the outer relation.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBatchesAllocate</literal></entry>
      <entry>Waiting for an elected Parallel Hash participant to allocate more
       batches.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBatchesDecide</literal></entry>
      <entry>Waiting to elect a Parallel Hash participant to decide on future
       batch growth.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBatchesElect</literal></entry>
      <entry>Waiting to elect a Parallel Hash participant to allocate more
       batches.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBatchesFinish</literal></entry>
      <entry>Waiting for an elected Parallel Hash participant to decide on
       future batch growth.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBatchesRepartition</literal></entry>
      <entry>Waiting for other Parallel Hash participants to finish
       repartitioning.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBucketsAllocate</literal></entry>
      <entry>Waiting for an elected Parallel Hash participant to finish
       allocating more buckets.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBucketsElect</literal></entry>
      <entry>Waiting to elect a Parallel Hash participant to allocate more
       buckets.</entry>
     </row>
     <row>
      <entry><literal>HashGrowBucketsReinsert</literal></entry>
      <entry>Waiting for other Parallel Hash participants to finish inserting
       tuples into new buckets.</entry>
     </row>
     <row>
      <entry><literal>LogicalSyncData</literal></entry>
      <entry>Waiting for a logical replication remote server to send data for
       initial table synchronization.</entry>
     </row>
     <row>
      <entry><literal>LogicalSyncStateChange</literal></entry>
      <entry>Waiting for a logical replication remote server to change
       state.</entry>
     </row>
     <row>
      <entry><literal>MessageQueueInternal</literal></entry>
      <entry>Waiting for another process to be attached to a shared message
       queue.</entry>
     </row>
     <row>
      <entry><literal>MessageQueuePutMessage</literal></entry>
      <entry>Waiting to write a protocol message to a shared message queue.</entry>
     </row>
     <row>
      <entry><literal>MessageQueueReceive</literal></entry>
      <entry>Waiting to receive bytes from a shared message queue.</entry>
     </row>
     <row>
      <entry><literal>MessageQueueSend</literal></entry>
      <entry>Waiting to send bytes to a shared message queue.</entry>
     </row>
     <row>
      <entry><literal>ParallelBitmapScan</literal></entry>
      <entry>Waiting for parallel bitmap scan to become initialized.</entry>
     </row>
     <row>
      <entry><literal>ParallelCreateIndexScan</literal></entry>
      <entry>Waiting for parallel <command>CREATE INDEX</command> workers to
       finish heap scan.</entry>
     </row>
     <row>
      <entry><literal>ParallelFinish</literal></entry>
      <entry>Waiting for parallel workers to finish computing.</entry>
     </row>
     <row>
      <entry><literal>ProcArrayGroupUpdate</literal></entry>
      <entry>Waiting for the group leader to clear the transaction ID at
       end of a parallel operation.</entry>
     </row>
     <row>
      <entry><literal>ProcSignalBarrier</literal></entry>
      <entry>Waiting for a barrier event to be processed by all
       backends.</entry>
     </row>
     <row>
      <entry><literal>Promote</literal></entry>
      <entry>Waiting for standby promotion.</entry>
     </row>
     <row>
      <entry><literal>RecoveryConflictSnapshot</literal></entry>
      <entry>Waiting for recovery conflict resolution for a vacuum
       cleanup.</entry>
     </row>
     <row>
      <entry><literal>RecoveryConflictTablespace</literal></entry>
      <entry>Waiting for recovery conflict resolution for dropping a
       tablespace.</entry>
     </row>
     <row>
      <entry><literal>RecoveryPause</literal></entry>
      <entry>Waiting for recovery to be resumed.</entry>
     </row>
     <row>
      <entry><literal>ReplicationOriginDrop</literal></entry>
      <entry>Waiting for a replication origin to become inactive so it can be
       dropped.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotDrop</literal></entry>
      <entry>Waiting for a replication slot to become inactive so it can be
       dropped.</entry>
     </row>
     <row>
      <entry><literal>SafeSnapshot</literal></entry>
      <entry>Waiting to obtain a valid snapshot for a <literal>READ ONLY
       DEFERRABLE</literal> transaction.</entry>
     </row>
     <row>
      <entry><literal>SyncRep</literal></entry>
      <entry>Waiting for confirmation from a remote server during synchronous
       replication.</entry>
     </row>
     <row>
      <entry><literal>XactGroupUpdate</literal></entry>
      <entry>Waiting for the group leader to update transaction status at
       end of a parallel operation.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-lock-table">
   <title>Wait Events of Type <literal>Lock</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>Lock</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>advisory</literal></entry>
      <entry>Waiting to acquire an advisory user lock.</entry>
     </row>
     <row>
      <entry><literal>extend</literal></entry>
      <entry>Waiting to extend a relation.</entry>
     </row>
     <row>
      <entry><literal>frozenid</literal></entry>
      <entry>Waiting to
       update <structname>pg_database</structname>.<structfield>datfrozenxid</structfield>
       and <structname>pg_database</structname>.<structfield>datminmxid</structfield>.</entry>
     </row>
     <row>
      <entry><literal>object</literal></entry>
      <entry>Waiting to acquire a lock on a non-relation database object.</entry>
     </row>
     <row>
      <entry><literal>page</literal></entry>
      <entry>Waiting to acquire a lock on a page of a relation.</entry>
     </row>
     <row>
      <entry><literal>relation</literal></entry>
      <entry>Waiting to acquire a lock on a relation.</entry>
     </row>
     <row>
      <entry><literal>spectoken</literal></entry>
      <entry>Waiting to acquire a speculative insertion lock.</entry>
     </row>
     <row>
      <entry><literal>transactionid</literal></entry>
      <entry>Waiting for a transaction to finish.</entry>
     </row>
     <row>
      <entry><literal>tuple</literal></entry>
      <entry>Waiting to acquire a lock on a tuple.</entry>
     </row>
     <row>
      <entry><literal>userlock</literal></entry>
      <entry>Waiting to acquire a user lock.</entry>
     </row>
     <row>
      <entry><literal>virtualxid</literal></entry>
      <entry>Waiting to acquire a virtual transaction ID lock.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="wait-event-lwlock-table">
   <title>Wait Events of Type <literal>LWLock</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>LWLock</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>AddinShmemInit</literal></entry>
      <entry>Waiting to manage an extension's space allocation in shared
       memory.</entry>
     </row>
     <row>
      <entry><literal>AutoFile</literal></entry>
      <entry>Waiting to update the <filename>postgresql.auto.conf</filename>
       file.</entry>
     </row>
     <row>
      <entry><literal>Autovacuum</literal></entry>
      <entry>Waiting to read or update the current state of autovacuum
       workers.</entry>
     </row>
     <row>
      <entry><literal>AutovacuumSchedule</literal></entry>
      <entry>Waiting to ensure that a table selected for autovacuum
       still needs vacuuming.</entry>
     </row>
     <row>
      <entry><literal>BackgroundWorker</literal></entry>
      <entry>Waiting to read or update background worker state.</entry>
     </row>
     <row>
      <entry><literal>BtreeVacuum</literal></entry>
      <entry>Waiting to read or update vacuum-related information for a
       B-tree index.</entry>
     </row>
     <row>
      <entry><literal>BufferContent</literal></entry>
      <entry>Waiting to access a data page in memory.</entry>
     </row>
     <row>
      <entry><literal>BufferIO</literal></entry>
      <entry>Waiting for I/O on a data page.</entry>
     </row>
     <row>
      <entry><literal>BufferMapping</literal></entry>
      <entry>Waiting to associate a data block with a buffer in the buffer
       pool.</entry>
     </row>
     <row>
      <entry><literal>Checkpoint</literal></entry>
      <entry>Waiting to begin a checkpoint.</entry>
     </row>
     <row>
      <entry><literal>CheckpointerComm</literal></entry>
      <entry>Waiting to manage fsync requests.</entry>
     </row>
     <row>
      <entry><literal>CommitTs</literal></entry>
      <entry>Waiting to read or update the last value set for a
       transaction commit timestamp.</entry>
     </row>
     <row>
      <entry><literal>CommitTsBuffer</literal></entry>
      <entry>Waiting for I/O on a commit timestamp SLRU buffer.</entry>
     </row>
     <row>
      <entry><literal>CommitTsSLRU</literal></entry>
      <entry>Waiting to access the commit timestamp SLRU cache.</entry>
     </row>
     <row>
      <entry><literal>ControlFile</literal></entry>
      <entry>Waiting to read or update the <filename>pg_control</filename>
       file or create a new WAL file.</entry>
     </row>
     <row>
      <entry><literal>DynamicSharedMemoryControl</literal></entry>
      <entry>Waiting to read or update dynamic shared memory allocation
       information.</entry>
     </row>
     <row>
      <entry><literal>LockFastPath</literal></entry>
      <entry>Waiting to read or update a process' fast-path lock
       information.</entry>
     </row>
     <row>
      <entry><literal>LockManager</literal></entry>
      <entry>Waiting to read or update information
       about <quote>heavyweight</quote> locks.</entry>
     </row>
     <row>
      <entry><literal>LogicalRepWorker</literal></entry>
      <entry>Waiting to read or update the state of logical replication
       workers.</entry>
     </row>
     <row>
      <entry><literal>MultiXactGen</literal></entry>
      <entry>Waiting to read or update shared multixact state.</entry>
     </row>
     <row>
      <entry><literal>MultiXactMemberBuffer</literal></entry>
      <entry>Waiting for I/O on a multixact member SLRU buffer.</entry>
     </row>
     <row>
      <entry><literal>MultiXactMemberSLRU</literal></entry>
      <entry>Waiting to access the multixact member SLRU cache.</entry>
     </row>
     <row>
      <entry><literal>MultiXactOffsetBuffer</literal></entry>
      <entry>Waiting for I/O on a multixact offset SLRU buffer.</entry>
     </row>
     <row>
      <entry><literal>MultiXactOffsetSLRU</literal></entry>
      <entry>Waiting to access the multixact offset SLRU cache.</entry>
     </row>
     <row>
      <entry><literal>MultiXactTruncation</literal></entry>
      <entry>Waiting to read or truncate multixact information.</entry>
     </row>
     <row>
      <entry><literal>NotifyBuffer</literal></entry>
      <entry>Waiting for I/O on a <command>NOTIFY</command> message SLRU
       buffer.</entry>
     </row>
     <row>
      <entry><literal>NotifyQueue</literal></entry>
      <entry>Waiting to read or update <command>NOTIFY</command> messages.</entry>
     </row>
     <row>
      <entry><literal>NotifyQueueTail</literal></entry>
      <entry>Waiting to update limit on <command>NOTIFY</command> message
       storage.</entry>
     </row>
     <row>
      <entry><literal>NotifySLRU</literal></entry>
      <entry>Waiting to access the <command>NOTIFY</command> message SLRU
       cache.</entry>
     </row>
     <row>
      <entry><literal>OidGen</literal></entry>
      <entry>Waiting to allocate a new OID.</entry>
     </row>
     <row>
      <entry><literal>OldSnapshotTimeMap</literal></entry>
      <entry>Waiting to read or update old snapshot control information.</entry>
     </row>
     <row>
      <entry><literal>ParallelAppend</literal></entry>
      <entry>Waiting to choose the next subplan during Parallel Append plan
       execution.</entry>
     </row>
     <row>
      <entry><literal>ParallelHashJoin</literal></entry>
      <entry>Waiting to synchronize workers during Parallel Hash Join plan
       execution.</entry>
     </row>
     <row>
      <entry><literal>ParallelQueryDSA</literal></entry>
      <entry>Waiting for parallel query dynamic shared memory allocation.</entry>
     </row>
     <row>
      <entry><literal>PerSessionDSA</literal></entry>
      <entry>Waiting for parallel query dynamic shared memory allocation.</entry>
     </row>
     <row>
      <entry><literal>PerSessionRecordType</literal></entry>
      <entry>Waiting to access a parallel query's information about composite
       types.</entry>
     </row>
     <row>
      <entry><literal>PerSessionRecordTypmod</literal></entry>
      <entry>Waiting to access a parallel query's information about type
       modifiers that identify anonymous record types.</entry>
     </row>
     <row>
      <entry><literal>PerXactPredicateList</literal></entry>
      <entry>Waiting to access the list of predicate locks held by the current
       serializable transaction during a parallel query.</entry>
     </row>
     <row>
      <entry><literal>PredicateLockManager</literal></entry>
      <entry>Waiting to access predicate lock information used by
       serializable transactions.</entry>
     </row>
     <row>
      <entry><literal>ProcArray</literal></entry>
      <entry>Waiting to access the shared per-process data structures
       (typically, to get a snapshot or report a session's transaction
       ID).</entry>
     </row>
     <row>
      <entry><literal>RelationMapping</literal></entry>
      <entry>Waiting to read or update
       a <filename>pg_filenode.map</filename> file (used to track the
       filenode assignments of certain system catalogs).</entry>
     </row>
     <row>
      <entry><literal>RelCacheInit</literal></entry>
      <entry>Waiting to read or update a <filename>pg_internal.init</filename>
       relation cache initialization file.</entry>
     </row>
     <row>
      <entry><literal>ReplicationOrigin</literal></entry>
      <entry>Waiting to create, drop or use a replication origin.</entry>
     </row>
     <row>
      <entry><literal>ReplicationOriginState</literal></entry>
      <entry>Waiting to read or update the progress of one replication
       origin.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotAllocation</literal></entry>
      <entry>Waiting to allocate or free a replication slot.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotControl</literal></entry>
      <entry>Waiting to read or update replication slot state.</entry>
     </row>
     <row>
      <entry><literal>ReplicationSlotIO</literal></entry>
      <entry>Waiting for I/O on a replication slot.</entry>
     </row>
     <row>
      <entry><literal>SerialBuffer</literal></entry>
      <entry>Waiting for I/O on a serializable transaction conflict SLRU
       buffer.</entry>
     </row>
     <row>
      <entry><literal>SerializableFinishedList</literal></entry>
      <entry>Waiting to access the list of finished serializable
       transactions.</entry>
     </row>
     <row>
      <entry><literal>SerializablePredicateList</literal></entry>
      <entry>Waiting to access the list of predicate locks held by
       serializable transactions.</entry>
     </row>
     <row>
      <entry><literal>SerializableXactHash</literal></entry>
      <entry>Waiting to read or update information about serializable
       transactions.</entry>
     </row>
     <row>
      <entry><literal>SerialSLRU</literal></entry>
      <entry>Waiting to access the serializable transaction conflict SLRU
       cache.</entry>
     </row>
     <row>
      <entry><literal>SharedTidBitmap</literal></entry>
      <entry>Waiting to access a shared TID bitmap during a parallel bitmap
       index scan.</entry>
     </row>
     <row>
      <entry><literal>SharedTupleStore</literal></entry>
      <entry>Waiting to access a shared tuple store during parallel
       query.</entry>
     </row>
     <row>
      <entry><literal>ShmemIndex</literal></entry>
      <entry>Waiting to find or allocate space in shared memory.</entry>
     </row>
     <row>
      <entry><literal>SInvalRead</literal></entry>
      <entry>Waiting to retrieve messages from the shared catalog invalidation
       queue.</entry>
     </row>
     <row>
      <entry><literal>SInvalWrite</literal></entry>
      <entry>Waiting to add a message to the shared catalog invalidation
      queue.</entry>
     </row>
     <row>
      <entry><literal>SubtransBuffer</literal></entry>
      <entry>Waiting for I/O on a sub-transaction SLRU buffer.</entry>
     </row>
     <row>
      <entry><literal>SubtransSLRU</literal></entry>
      <entry>Waiting to access the sub-transaction SLRU cache.</entry>
     </row>
     <row>
      <entry><literal>SyncRep</literal></entry>
      <entry>Waiting to read or update information about the state of
       synchronous replication.</entry>
     </row>
     <row>
      <entry><literal>SyncScan</literal></entry>
      <entry>Waiting to select the starting location of a synchronized table
       scan.</entry>
     </row>
     <row>
      <entry><literal>TablespaceCreate</literal></entry>
      <entry>Waiting to create or drop a tablespace.</entry>
     </row>
     <row>
      <entry><literal>TwoPhaseState</literal></entry>
      <entry>Waiting to read or update the state of prepared transactions.</entry>
     </row>
     <row>
      <entry><literal>WALBufMapping</literal></entry>
      <entry>Waiting to replace a page in WAL buffers.</entry>
     </row>
     <row>
      <entry><literal>WALInsert</literal></entry>
      <entry>Waiting to insert WAL data into a memory buffer.</entry>
     </row>
     <row>
      <entry><literal>WALWrite</literal></entry>
      <entry>Waiting for WAL buffers to be written to disk.</entry>
     </row>
     <row>
      <entry><literal>WrapLimitsVacuum</literal></entry>
      <entry>Waiting to update limits on transaction id and multixact
       consumption.</entry>
     </row>
     <row>
      <entry><literal>XactBuffer</literal></entry>
      <entry>Waiting for I/O on a transaction status SLRU buffer.</entry>
     </row>
     <row>
      <entry><literal>XactSLRU</literal></entry>
      <entry>Waiting to access the transaction status SLRU cache.</entry>
     </row>
     <row>
      <entry><literal>XactTruncation</literal></entry>
      <entry>Waiting to execute <function>pg_xact_status</function> or update
       the oldest transaction ID available to it.</entry>
     </row>
     <row>
      <entry><literal>XidGen</literal></entry>
      <entry>Waiting to allocate a new transaction ID.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

   <note>
    <para>
     Extensions can add <literal>LWLock</literal> types to the list shown in
     <xref linkend="wait-event-lwlock-table"/>.  In some cases, the name
     assigned by an extension will not be available in all server processes;
     so an <literal>LWLock</literal> wait event might be reported as
     just <quote><literal>extension</literal></quote> rather than the
     extension-assigned name.
    </para>
   </note>

  <table id="wait-event-timeout-table">
   <title>Wait Events of Type <literal>Timeout</literal></title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><literal>Timeout</literal> Wait Event</entry>
      <entry>Description</entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry><literal>BaseBackupThrottle</literal></entry>
      <entry>Waiting during base backup when throttling activity.</entry>
     </row>
     <row>
      <entry><literal>PgSleep</literal></entry>
      <entry>Waiting due to a call to <function>pg_sleep</function> or
       a sibling function.</entry>
     </row>
     <row>
      <entry><literal>RecoveryApplyDelay</literal></entry>
      <entry>Waiting to apply WAL during recovery because of a delay
       setting.</entry>
     </row>
     <row>
      <entry><literal>RecoveryRetrieveRetryInterval</literal></entry>
      <entry>Waiting during recovery when WAL data is not available from any
       source (<filename>pg_wal</filename>, archive or stream).</entry>
     </row>
     <row>
      <entry><literal>VacuumDelay</literal></entry>
      <entry>Waiting in a cost-based vacuum delay point.</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

   <para>
     Here is an example of how wait events can be viewed:

<programlisting>
SELECT pid, wait_event_type, wait_event FROM pg_stat_activity WHERE wait_event is NOT NULL;
 pid  | wait_event_type | wait_event 
------+-----------------+------------
 2540 | Lock            | relation
 6644 | LWLock          | ProcArray
(2 rows)
</programlisting>
   </para>

 </sect2>

 <sect2 id="monitoring-pg-stat-replication-view">
  <title><structname>pg_stat_replication</structname></title>

  <indexterm>
   <primary>pg_stat_replication</primary>
  </indexterm>

   <para>
   The <structname>pg_stat_replication</structname> view will contain one row
   per WAL sender process, showing statistics about replication to that
   sender's connected standby server.  Only directly connected standbys are
   listed; no information is available about downstream standby servers.
  </para>

  <table id="pg-stat-replication-view" xreflabel="pg_stat_replication">
   <title><structname>pg_stat_replication</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of a WAL sender process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>usesysid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the user logged into this WAL sender process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>usename</structfield> <type>name</type>
      </para>
      <para>
       Name of the user logged into this WAL sender process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>application_name</structfield> <type>text</type>
      </para>
      <para>
       Name of the application that is connected
       to this WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_addr</structfield> <type>inet</type>
      </para>
      <para>
       IP address of the client connected to this WAL sender.
       If this field is null, it indicates that the client is
       connected via a Unix socket on the server machine.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_hostname</structfield> <type>text</type>
      </para>
      <para>
       Host name of the connected client, as reported by a
       reverse DNS lookup of <structfield>client_addr</structfield>. This field will
       only be non-null for IP connections, and only when <xref linkend="guc-log-hostname"/> is enabled.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_port</structfield> <type>integer</type>
      </para>
      <para>
       TCP port number that the client is using for communication
       with this WAL sender, or <literal>-1</literal> if a Unix socket is used
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backend_start</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time when this process was started, i.e., when the
       client connected to this WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backend_xmin</structfield> <type>xid</type>
      </para>
      <para>
       This standby's <literal>xmin</literal> horizon reported
       by <xref linkend="guc-hot-standby-feedback"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>state</structfield> <type>text</type>
      </para>
      <para>
       Current WAL sender state.
=======
   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of a WAL sender process</entry>
-->
     <entry>WAL送信プロセスのプロセスIDです。</entry>
    </row>
    <row>
     <entry><structfield>usesysid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the user logged into this WAL sender process</entry>
-->
     <entry>WAL送信プロセスにログインしたユーザのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>usename</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the user logged into this WAL sender process</entry>
-->
     <entry>WAL送信プロセスにログインしたユーザの名前です。</entry>
    </row>
    <row>
     <entry><structfield>application_name</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Name of the application that is connected
      to this WAL sender</entry>
-->
     <entry>WAL送信処理に接続したアプリケーションの名前です。</entry>
    </row>
    <row>
     <entry><structfield>client_addr</structfield></entry>
     <entry><type>inet</type></entry>
<!--
     <entry>IP address of the client connected to this WAL sender.
      If this field is null, it indicates that the client is
      connected via a Unix socket on the server machine.
-->
     <entry>
WAL送信処理に接続したクライアントのIPアドレスです。
このフィールドがNULLの場合、クライアントがサーバマシン上のUnixソケット経由で接続したことを示します。
     </entry>
    </row>
    <row>
     <entry><structfield>client_hostname</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Host name of the connected client, as reported by a
      reverse DNS lookup of <structfield>client_addr</structfield>. This field will
      only be non-null for IP connections, and only when <xref
      linkend="guc-log-hostname"/> is enabled.
-->
     <entry>
<structfield>client_addr</structfield>のDNS逆引き検索により報告された、接続クライアントのホスト名です。
IP接続、かつ<xref linkend="guc-log-hostname"/>が有効である場合にのみこのフィールドは非NULLになります。
     </entry>
    </row>
    <row>
     <entry><structfield>client_port</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>TCP port number that the client is using for communication
      with this WAL sender, or <literal>-1</literal> if a Unix socket is used
-->
     <entry>クライアントがWAL送信処理との通信に使用するTCPポート番号、もしUnixソケットを使用する場合は<literal>-1</literal>です。
     </entry>
    </row>
    <row>
     <entry><structfield>backend_start</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time when this process was started, i.e., when the
      client connected to this WAL sender
-->
     <entry>プロセスが開始、つまりクライアントがWAL送信処理に接続した時刻です。
     </entry>
    </row>
    <row>
     <entry><structfield>backend_xmin</structfield></entry>
     <entry><type>xid</type></entry>
<!--
     <entry>This standby's <literal>xmin</literal> horizon reported
     by <xref linkend="guc-hot-standby-feedback"/>.</entry>
-->
     <entry><xref linkend="guc-hot-standby-feedback"/>により報告されたこのスタンバイの<literal>xmin</literal>です。</entry>
    </row>
    <row>
     <entry><structfield>state</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Current WAL sender state.
>>>>>>> doc_ja_12
       Possible values are:
-->
     <entry>
WAL送信サーバの現在の状態です。
取り得る値は以下の通りです。
       <itemizedlist>
<<<<<<< HEAD
        <listitem>
         <para>
          <literal>startup</literal>: This WAL sender is starting up.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>catchup</literal>: This WAL sender's connected standby is
          catching up with the primary.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>streaming</literal>: This WAL sender is streaming changes
          after its connected standby server has caught up with the primary.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>backup</literal>: This WAL sender is sending a backup.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>stopping</literal>: This WAL sender is stopping.
         </para>
        </listitem>
       </itemizedlist>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sent_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location sent on this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>write_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location written to disk by this standby
       server
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>flush_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location flushed to disk by this standby
       server
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>replay_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location replayed into the database on this
       standby server
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>write_lag</structfield> <type>interval</type>
      </para>
      <para>
       Time elapsed between flushing recent WAL locally and receiving
       notification that this standby server has written it (but not yet
       flushed it or applied it).  This can be used to gauge the delay that
       <literal>synchronous_commit</literal> level
       <literal>remote_write</literal> incurred while committing if this
       server was configured as a synchronous standby.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>flush_lag</structfield> <type>interval</type>
      </para>
      <para>
       Time elapsed between flushing recent WAL locally and receiving
       notification that this standby server has written and flushed it
       (but not yet applied it).  This can be used to gauge the delay that
       <literal>synchronous_commit</literal> level
       <literal>on</literal> incurred while committing if this
       server was configured as a synchronous standby.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>replay_lag</structfield> <type>interval</type>
      </para>
      <para>
       Time elapsed between flushing recent WAL locally and receiving
       notification that this standby server has written, flushed and
       applied it.  This can be used to gauge the delay that
       <literal>synchronous_commit</literal> level
       <literal>remote_apply</literal> incurred while committing if this
       server was configured as a synchronous standby.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sync_priority</structfield> <type>integer</type>
      </para>
      <para>
       Priority of this standby server for being chosen as the
       synchronous standby in a priority-based synchronous replication.
       This has no effect in a quorum-based synchronous replication.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sync_state</structfield> <type>text</type>
      </para>
      <para>
       Synchronous state of this standby server.
=======
         <listitem>
          <para>
<!--
           <literal>startup</literal>: This WAL sender is starting up.
-->
           <literal>startup</literal>: このWAL送信サーバは起動するところです。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>catchup</literal>: This WAL sender's connected standby is
           catching up with the primary.
-->
           <literal>catchup</literal>: このWAL送信サーバが接続しているスタンバイはプライマリに追いつこうとしています。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>streaming</literal>: This WAL sender is streaming changes
           after its connected standby server has caught up with the primary.
-->
           <literal>streaming</literal>: このWAL送信サーバは、接続先のスタンバイサーバがプライマリに追いついた後、変更をストリーミングしています。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>backup</literal>: This WAL sender is sending a backup.
-->
           <literal>backup</literal>: このWAL送信サーバはバックアップを送信しています。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>stopping</literal>: This WAL sender is stopping.
-->
           <literal>stopping</literal>: このWAL送信サーバは停止するところです。
          </para>
         </listitem>
       </itemizedlist>
     </entry>
    </row>
    <row>
     <entry><structfield>sent_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location sent on this connection</entry>
-->
     <entry>この接続で送信された最後の先行書き込みログの位置です。</entry>
    </row>
    <row>
     <entry><structfield>write_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location written to disk by this standby
      server</entry>
-->
     <entry>このスタンバイサーバによってディスクに書き出された最後の先行書き込みログ位置です。</entry>
    </row>
    <row>
     <entry><structfield>flush_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location flushed to disk by this standby
      server</entry>
-->
     <entry>このスタンバイサーバによってディスクに吐き出された最後の先行書き込みログ位置です。</entry>
    </row>
    <row>
     <entry><structfield>replay_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location replayed into the database on this
      standby server</entry>
-->
     <entry>このスタンバイサーバ上のデータベースに再生された最後の先行書き込みログ位置です。</entry>
    </row>
    <row>
     <entry><structfield>write_lag</structfield></entry>
     <entry><type>interval</type></entry>
<!--
     <entry>Time elapsed between flushing recent WAL locally and receiving
      notification that this standby server has written it (but not yet
      flushed it or applied it).  This can be used to gauge the delay that
      <literal>synchronous_commit</literal> level
      <literal>remote_write</literal> incurred while committing if this
      server was configured as a synchronous standby.</entry>
-->
     <entry>
最近のWALをローカルに吐き出してから、このスタンバイサーバがそれを書き出した（が、まだ吐き出したり適用したりしていない）ことの通知を受け取るまでの経過時間です。
このサーバが同期スタンバイとして設定されているとして、コミット時に<literal>synchronous_commit</literal>レベルの<literal>remote_write</literal>が起こした遅延を正確に測定するために、これを使用することができます。
     </entry>
    </row>
    <row>
     <entry><structfield>flush_lag</structfield></entry>
     <entry><type>interval</type></entry>
<!--
     <entry>Time elapsed between flushing recent WAL locally and receiving
      notification that this standby server has written and flushed it
      (but not yet applied it).  This can be used to gauge the delay that
      <literal>synchronous_commit</literal> level
      <literal>on</literal> incurred while committing if this
      server was configured as a synchronous standby.</entry>
-->
     <entry>
最近のWALをローカルに吐き出してから、このスタンバイサーバがそれを書き出して吐き出した（が、まだ適用していない）ことの通知を受け取るまでの経過時間です。
このサーバが同期スタンバイとして設定されているとして、コミット時に<literal>synchronous_commit</literal>レベルの<literal>on</literal>が起こした遅延を正確に測定するために、これを使用することができます。
     </entry>
    </row>
    <row>
     <entry><structfield>replay_lag</structfield></entry>
     <entry><type>interval</type></entry>
<!--
     <entry>Time elapsed between flushing recent WAL locally and receiving
      notification that this standby server has written, flushed and
      applied it.  This can be used to gauge the delay that
      <literal>synchronous_commit</literal> level
      <literal>remote_apply</literal> incurred while committing if this
      server was configured as a synchronous standby.</entry>
-->
     <entry>
最近のWALをローカルに吐き出してから、このスタンバイサーバがそれを書き出し、吐き出し、そして適用したことの通知を受け取るまでの経過時間です。
このサーバが同期スタンバイとして設定されているとして、コミット時に<literal>synchronous_commit</literal>レベルの<literal>remote_apply</literal>が起こした遅延を正確に測定するために、これを使用することができます。
     </entry>
    </row>
    <row>
     <entry><structfield>sync_priority</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Priority of this standby server for being chosen as the
      synchronous standby in a priority-based synchronous replication.
      This has no effect in a quorum-based synchronous replication.</entry>
-->
     <entry>
優先度に基づくの同期レプリケーションで、このスタンバイサーバが同期スタンバイとして選択される優先度です。
クォーラムに基づくの同期レプリケーションでは効果がありません。
     </entry>
    </row>
    <row>
     <entry><structfield>sync_state</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Synchronous state of this standby server.
>>>>>>> doc_ja_12
       Possible values are:
-->
     <entry>
このスタンバイサーバの同期状態です。
取り得る値は以下の通りです。
       <itemizedlist>
<<<<<<< HEAD
        <listitem>
         <para>
          <literal>async</literal>: This standby server is asynchronous.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>potential</literal>: This standby server is now asynchronous,
          but can potentially become synchronous if one of current
          synchronous ones fails.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>sync</literal>: This standby server is synchronous.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>quorum</literal>: This standby server is considered as a candidate
          for quorum standbys.
         </para>
        </listitem>
       </itemizedlist>
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>reply_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Send time of last reply message received from standby server
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
   The lag times reported in the <structname>pg_stat_replication</structname>
   view are measurements of the time taken for recent WAL to be written,
   flushed and replayed and for the sender to know about it.  These times
   represent the commit delay that was (or would have been) introduced by each
   synchronous commit level, if the remote server was configured as a
   synchronous standby.  For an asynchronous standby, the
   <structfield>replay_lag</structfield> column approximates the delay
   before recent transactions became visible to queries.  If the standby
   server has entirely caught up with the sending server and there is no more
   WAL activity, the most recently measured lag times will continue to be
   displayed for a short time and then show NULL.
  </para>

  <para>
   Lag times work automatically for physical replication. Logical decoding
   plugins may optionally emit tracking messages; if they do not, the tracking
   mechanism will simply display NULL lag.
  </para>

  <note>
   <para>
    The reported lag times are not predictions of how long it will take for
    the standby to catch up with the sending server assuming the current
    rate of replay.  Such a system would show similar times while new WAL is
    being generated, but would differ when the sender becomes idle.  In
    particular, when the standby has caught up completely,
    <structname>pg_stat_replication</structname> shows the time taken to
    write, flush and replay the most recent reported WAL location rather than
    zero as some users might expect.  This is consistent with the goal of
    measuring synchronous commit and transaction visibility delays for
    recent write transactions.
    To reduce confusion for users expecting a different model of lag, the
    lag columns revert to NULL after a short time on a fully replayed idle
    system. Monitoring systems should choose whether to represent this
    as missing data, zero or continue to display the last known value.
   </para>
  </note>

 </sect2>

 <sect2 id="monitoring-pg-stat-wal-receiver-view">
  <title><structname>pg_stat_wal_receiver</structname></title>

  <indexterm>
   <primary>pg_stat_wal_receiver</primary>
  </indexterm>

  <para>
   The <structname>pg_stat_wal_receiver</structname> view will contain only
   one row, showing statistics about the WAL receiver from that receiver's
   connected server.
  </para>

  <table id="pg-stat-wal-receiver-view" xreflabel="pg_stat_wal_receiver">
   <title><structname>pg_stat_wal_receiver</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of the WAL receiver process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>status</structfield> <type>text</type>
      </para>
      <para>
       Activity status of the WAL receiver process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>receive_start_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       First write-ahead log location used when WAL receiver is
       started
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>receive_start_tli</structfield> <type>integer</type>
      </para>
      <para>
       First timeline number used when WAL receiver is started
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>written_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location already received and written to disk,
       but not flushed. This should not be used for data integrity checks.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>flushed_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location already received and flushed to
       disk, the initial value of this field being the first log location used
       when WAL receiver is started
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>received_tli</structfield> <type>integer</type>
      </para>
      <para>
       Timeline number of last write-ahead log location received and
       flushed to disk, the initial value of this field being the timeline
       number of the first log location used when WAL receiver is started
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_msg_send_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Send time of last message received from origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_msg_receipt_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Receipt time of last message received from origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>latest_end_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location reported to origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>latest_end_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time of last write-ahead log location reported to origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>slot_name</structfield> <type>text</type>
      </para>
      <para>
       Replication slot name used by this WAL receiver
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sender_host</structfield> <type>text</type>
      </para>
      <para>
       Host of the <productname>PostgreSQL</productname> instance
       this WAL receiver is connected to. This can be a host name,
       an IP address, or a directory path if the connection is via
       Unix socket.  (The path case can be distinguished because it
       will always be an absolute path, beginning with <literal>/</literal>.)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sender_port</structfield> <type>integer</type>
      </para>
      <para>
       Port number of the <productname>PostgreSQL</productname> instance
       this WAL receiver is connected to.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>conninfo</structfield> <type>text</type>
      </para>
      <para>
       Connection string used by this WAL receiver,
       with security-sensitive fields obfuscated.
      </para></entry>
     </row>
    </tbody>
=======
         <listitem>
          <para>
<!--
           <literal>async</literal>: This standby server is asynchronous.
-->
           <literal>async</literal>: このスタンバイサーバは非同期です。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>potential</literal>: This standby server is now asynchronous,
           but can potentially become synchronous if one of current
           synchronous ones fails.
-->
           <literal>potential</literal>: このスタンバイサーバは現在非同期ですが、現在同期中のサーバの一つが故障すると同期になる可能性があります。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>sync</literal>: This standby server is synchronous.
-->
           <literal>sync</literal>: このスタンバイサーバは同期です。
          </para>
         </listitem>
         <listitem>
          <para>
<!--
           <literal>quorum</literal>: This standby server is considered as a candidate
           for quorum standbys.
-->
           <literal>quorum</literal>: このサーバはクォーラムのスタンバイの候補とみなされています。
          </para>
         </listitem>
       </itemizedlist>
     </entry>
    </row>
    <row>
     <entry><structfield>reply_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Send time of last reply message received from standby server</entry>
-->
     <entry>スタンバイサーバから受け取った最後の応答メッセージの送信時刻です。</entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-subscription">
  <title><structname>pg_stat_subscription</structname></title>

  <indexterm>
   <primary>pg_stat_subscription</primary>
  </indexterm>

  <para>
<<<<<<< HEAD
   The <structname>pg_stat_subscription</structname> view will contain one
   row per subscription for main worker (with null PID if the worker is
   not running), and additional rows for workers handling the initial data
   copy of the subscribed tables.
=======
<!--
   The <structname>pg_stat_replication</structname> view will contain one row
   per WAL sender process, showing statistics about replication to that
   sender's connected standby server.  Only directly connected standbys are
   listed; no information is available about downstream standby servers.
-->
<structname>pg_stat_replication</structname>ビューには、WAL送信プロセス毎に、送信処理に接続したスタンバイサーバへのレプリケーションに関する統計情報を示す１行を保持します。
直接接続されたサーバのみが一覧表示されます。
下流のスタンバイサーバに関する情報はありません。
>>>>>>> doc_ja_12
  </para>

  <table id="pg-stat-subscription" xreflabel="pg_stat_subscription">
   <title><structname>pg_stat_subscription</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>subid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the subscription
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>subname</structfield> <type>name</type>
      </para>
      <para>
       Name of the subscription
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of the subscription worker process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the relation that the worker is synchronizing; null for the
       main apply worker
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>received_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location received, the initial value of
       this field being 0
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_msg_send_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Send time of last message received from origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_msg_receipt_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Receipt time of last message received from origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>latest_end_lsn</structfield> <type>pg_lsn</type>
      </para>
      <para>
       Last write-ahead log location reported to origin WAL sender
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>latest_end_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time of last write-ahead log location reported to origin WAL
       sender
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-ssl-view">
  <title><structname>pg_stat_ssl</structname></title>

  <indexterm>
   <primary>pg_stat_ssl</primary>
  </indexterm>

  <para>
<<<<<<< HEAD
   The <structname>pg_stat_ssl</structname> view will contain one row per
   backend or WAL sender process, showing statistics about SSL usage on
   this connection. It can be joined to <structname>pg_stat_activity</structname>
   or <structname>pg_stat_replication</structname> on the
   <structfield>pid</structfield> column to get more details about the
   connection.
=======
<!--
   The lag times reported in the <structname>pg_stat_replication</structname>
   view are measurements of the time taken for recent WAL to be written,
   flushed and replayed and for the sender to know about it.  These times
   represent the commit delay that was (or would have been) introduced by each
   synchronous commit level, if the remote server was configured as a
   synchronous standby.  For an asynchronous standby, the
   <structfield>replay_lag</structfield> column approximates the delay
   before recent transactions became visible to queries.  If the standby
   server has entirely caught up with the sending server and there is no more
   WAL activity, the most recently measured lag times will continue to be
   displayed for a short time and then show NULL.
-->
<structname>pg_stat_replication</structname>ビューで報告される経過時間は、最近のWALが書き込まれ、吐き出され、再生されるのに要した時間の測定結果であり、また、送信サーバがそれを知るためのものです。
リモートサーバが同期スタンバイとして設定されている場合、これらの時間は、同期コミットの各レベルによって引き起こされた（あるいは引き起こされたであろう）コミットの遅延を表します。
非同期スタンバイの場合は、<structfield>replay_lag</structfield>列は最近のトランザクションが問い合わせに対して可視になったときまでの遅延を近似します。
スタンバイサーバが送信サーバに完全に追いつき、WALの活動がなくなった状態のときは、最も直近に測定された経過時間が短い間、表示され続け、その後はNULLとなります。
>>>>>>> doc_ja_12
  </para>

  <table id="pg-stat-ssl-view" xreflabel="pg_stat_ssl">
   <title><structname>pg_stat_ssl</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of a backend or WAL sender process
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ssl</structfield> <type>boolean</type>
      </para>
      <para>
       True if SSL is used on this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>version</structfield> <type>text</type>
      </para>
      <para>
       Version of SSL in use, or NULL if SSL is not in use
       on this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>cipher</structfield> <type>text</type>
      </para>
      <para>
       Name of SSL cipher in use, or NULL if SSL is not in use
       on this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>bits</structfield> <type>integer</type>
      </para>
      <para>
       Number of bits in the encryption algorithm used, or NULL
       if SSL is not used on this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>compression</structfield> <type>boolean</type>
      </para>
      <para>
       True if SSL compression is in use, false if not,
       or NULL if SSL is not in use on this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_dn</structfield> <type>text</type>
      </para>
      <para>
       Distinguished Name (DN) field from the client certificate
       used, or NULL if no client certificate was supplied or if SSL
       is not in use on this connection. This field is truncated if the
       DN field is longer than <symbol>NAMEDATALEN</symbol> (64 characters
       in a standard build).
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>client_serial</structfield> <type>numeric</type>
      </para>
      <para>
       Serial number of the client certificate, or NULL if no client
       certificate was supplied or if SSL is not in use on this connection.  The
       combination of certificate serial number and certificate issuer uniquely
       identifies a certificate (unless the issuer erroneously reuses serial
       numbers).
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>issuer_dn</structfield> <type>text</type>
      </para>
      <para>
       DN of the issuer of the client certificate, or NULL if no client
       certificate was supplied or if SSL is not in use on this connection.
       This field is truncated like <structfield>client_dn</structfield>.
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-gssapi-view">
  <title><structname>pg_stat_gssapi</structname></title>

  <indexterm>
   <primary>pg_stat_gssapi</primary>
  </indexterm>

  <para>
<<<<<<< HEAD
   The <structname>pg_stat_gssapi</structname> view will contain one row per
   backend, showing information about GSSAPI usage on this connection. It can
   be joined to <structname>pg_stat_activity</structname> or
   <structname>pg_stat_replication</structname> on the
   <structfield>pid</structfield> column to get more details about the
   connection.
  </para>

  <table id="pg-stat-gssapi-view" xreflabel="pg_stat_gssapi">
   <title><structname>pg_stat_gssapi</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of a backend
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>gss_authenticated</structfield> <type>boolean</type>
      </para>
      <para>
       True if GSSAPI authentication was used for this connection
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>principal</structfield> <type>text</type>
      </para>
      <para>
       Principal used to authenticate this connection, or NULL
       if GSSAPI was not used to authenticate this connection.  This
       field is truncated if the principal is longer than
       <symbol>NAMEDATALEN</symbol> (64 characters in a standard build).
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>encrypted</structfield> <type>boolean</type>
      </para>
      <para>
       True if GSSAPI encryption is in use on this connection
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-archiver-view">
  <title><structname>pg_stat_archiver</structname></title>

  <indexterm>
   <primary>pg_stat_archiver</primary>
  </indexterm>

  <para>
   The <structname>pg_stat_archiver</structname> view will always have a
   single row, containing data about the archiver process of the cluster.
  </para>

  <table id="pg-stat-archiver-view" xreflabel="pg_stat_archiver">
   <title><structname>pg_stat_archiver</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>archived_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of WAL files that have been successfully archived
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_archived_wal</structfield> <type>text</type>
      </para>
      <para>
       Name of the last WAL file successfully archived
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_archived_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time of the last successful archive operation
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>failed_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of failed attempts for archiving WAL files
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_failed_wal</structfield> <type>text</type>
      </para>
      <para>
       Name of the WAL file of the last failed archival operation
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_failed_time</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time of the last failed archival operation
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>stats_reset</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time at which these statistics were last reset
      </para></entry>
     </row>
    </tbody>
=======
<!--
   Lag times work automatically for physical replication. Logical decoding
   plugins may optionally emit tracking messages; if they do not, the tracking
   mechanism will simply display NULL lag.
-->
経過時間は物理レプリケーションの場合は自動的に機能します。
ロジカルデコーディングのプラグインはオプションで追跡メッセージを発することができますが、そうしなければ追跡機能は単にNULLの経過時間を表示します。
  </para>

  <note>
   <para>
<!--
    The reported lag times are not predictions of how long it will take for
    the standby to catch up with the sending server assuming the current
    rate of replay.  Such a system would show similar times while new WAL is
    being generated, but would differ when the sender becomes idle.  In
    particular, when the standby has caught up completely,
    <structname>pg_stat_replication</structname> shows the time taken to
    write, flush and replay the most recent reported WAL location rather than
    zero as some users might expect.  This is consistent with the goal of
    measuring synchronous commit and transaction visibility delays for
    recent write transactions.
    To reduce confusion for users expecting a different model of lag, the
    lag columns revert to NULL after a short time on a fully replayed idle
    system. Monitoring systems should choose whether to represent this
    as missing data, zero or continue to display the last known value.
-->
報告される経過時間は、現在の再生速度の前提でスタンバイが送信サーバに追いつくのに要する時間を予測するものではありません。
そのようなシステムでは、新しいWALが生成されている間は類似した時間を示しますが、送信サーバがアイドル状態になると異なるものになるでしょう。
特に、スタンバイが完全に追いついたとき、<structname>pg_stat_replication</structname>は、一部のユーザが期待するゼロではなく、最も最近に報告されたWAL位置を書き込み、吐き出し、再生するのに要した時間を示します。
これは最近の書き込みトランザクションについて同期コミットおよびトランザクションの可視性の遅延を測定するという目的と首尾一貫しています。
経過時間について異なるモデルを期待するユーザの混乱を抑えるため、完全に再生されてアイドルになったシステムでは、経過時間の列は短い時間の後、NULLに戻ります。
監視システムでは、これをデータなしとする、ゼロとする、あるいは最後の既知の値を表示し続けるという選択をすることになります。
   </para>
  </note>

  <table id="pg-stat-wal-receiver-view" xreflabel="pg_stat_wal_receiver">
<!--
   <title><structname>pg_stat_wal_receiver</structname> View</title>
-->
   <title><structname>pg_stat_wal_receiver</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of the WAL receiver process</entry>
-->
     <entry>WALレシーバプロセスのプロセスID</entry>
    </row>
    <row>
     <entry><structfield>status</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Activity status of the WAL receiver process</entry>
-->
     <entry>WALレシーバプロセスの活動状態</entry>
    </row>
    <row>
     <entry><structfield>receive_start_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>First write-ahead log location used when WAL receiver is
      started</entry>
-->
     <entry>WALレシーバが開始された時に使われる先行書き込みログの最初の位置</entry>
    </row>
    <row>
     <entry><structfield>receive_start_tli</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>First timeline number used when WAL receiver is started</entry>
-->
     <entry>WALレシーバが開始された時に使われる初期タイムライン番号</entry>
    </row>
    <row>
     <entry><structfield>received_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location already received and flushed to
      disk, the initial value of this field being the first log location used
      when WAL receiver is started</entry>
-->
     <entry>すでに受信し、ディスクにフラッシュされた先行書き込みログの最新位置。
     この列の初期値は、WALレシーバが開始された時に使用される、最初のログ位置です。</entry>
    </row>
    <row>
     <entry><structfield>received_tli</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Timeline number of last write-ahead log location received and
      flushed to disk, the initial value of this field being the timeline
      number of the first log location used when WAL receiver is started
-->
     <entry>
受信済みでディスクにフラッシュされた先行書き込みログの最新位置のタイムライン番号。
この列の初期値は、WALレシーバが開始された時に使用される、最初のログ位置のタイムライン番号です。
     </entry>
    </row>
    <row>
     <entry><structfield>last_msg_send_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Send time of last message received from origin WAL sender</entry>
-->
     <entry>オリジンWALセンダから受信した最新メッセージの送信時間</entry>
    </row>
    <row>
     <entry><structfield>last_msg_receipt_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Receipt time of last message received from origin WAL sender</entry>
-->
     <entry>オリジンWALセンダから受信した最新メッセージの受信時間</entry>
    </row>
    <row>
     <entry><structfield>latest_end_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location reported to origin WAL sender</entry>
-->
     <entry>オリジンWALセンダへ報告された最新の先行書き込みログ位置</entry>
    </row>
    <row>
     <entry><structfield>latest_end_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time of last write-ahead log location reported to origin WAL sender</entry>
-->
     <entry>オリジンWALセンダへ最新の先行書き込みログ位置が報告された時間</entry>
    </row>
    <row>
     <entry><structfield>slot_name</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Replication slot name used by this WAL receiver</entry>
-->
     <entry>WALレシーバによって使用されたレプリケーションスロット名</entry>
    </row>
    <row>
     <entry><structfield>sender_host</structfield></entry>
     <entry><type>text</type></entry>
     <entry>
<!--
      Host of the <productname>PostgreSQL</productname> instance
      this WAL receiver is connected to. This can be a host name,
      an IP address, or a directory path if the connection is via
      Unix socket.  (The path case can be distinguished because it
      will always be an absolute path, beginning with <literal>/</literal>.)
-->
WALレシーバーが接続している<productname>PostgreSQL</productname>インスタンスのホスト。
これはホスト名、IPアドレス、あるいはUNIXソケットで接続している場合はディレクトリのパスです。
（パスは、常に<literal>/</literal>で始まる絶対パスなので、パスであることを識別できます。）
     </entry>
    </row>
    <row>
     <entry><structfield>sender_port</structfield></entry>
     <entry><type>integer</type></entry>
     <entry>
<!--
      Port number of the <productname>PostgreSQL</productname> instance
      this WAL receiver is connected to.
-->
WALレシーバーが接続している<productname>PostgreSQL</productname>インスタンスのポート番号
     </entry>
    </row>
    <row>
     <entry><structfield>conninfo</structfield></entry>
     <entry><type>text</type></entry>
     <entry>
<!--
      Connection string used by this WAL receiver,
      with security-sensitive fields obfuscated.
-->
セキュリティに重要な値が難読化された文字列を含む、WALレシーバによって使用された接続文字列。
     </entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-bgwriter-view">
  <title><structname>pg_stat_bgwriter</structname></title>

  <indexterm>
   <primary>pg_stat_bgwriter</primary>
  </indexterm>

  <para>
<<<<<<< HEAD
   The <structname>pg_stat_bgwriter</structname> view will always have a
   single row, containing global data for the cluster.
  </para>

  <table id="pg-stat-bgwriter-view" xreflabel="pg_stat_bgwriter">
   <title><structname>pg_stat_bgwriter</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>checkpoints_timed</structfield> <type>bigint</type>
      </para>
      <para>
       Number of scheduled checkpoints that have been performed
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>checkpoints_req</structfield> <type>bigint</type>
      </para>
      <para>
       Number of requested checkpoints that have been performed
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>checkpoint_write_time</structfield> <type>double precision</type>
      </para>
      <para>
       Total amount of time that has been spent in the portion of
       checkpoint processing where files are written to disk, in milliseconds
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>checkpoint_sync_time</structfield> <type>double precision</type>
      </para>
      <para>
       Total amount of time that has been spent in the portion of
       checkpoint processing where files are synchronized to disk, in
       milliseconds
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>buffers_checkpoint</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffers written during checkpoints
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>buffers_clean</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffers written by the background writer
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>maxwritten_clean</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times the background writer stopped a cleaning
       scan because it had written too many buffers
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>buffers_backend</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffers written directly by a backend
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>buffers_backend_fsync</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times a backend had to execute its own
       <function>fsync</function> call (normally the background writer handles those
       even when the backend does its own write)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>buffers_alloc</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffers allocated
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>stats_reset</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time at which these statistics were last reset
      </para></entry>
     </row>
    </tbody>
=======
<!--
   The <structname>pg_stat_wal_receiver</structname> view will contain only
   one row, showing statistics about the WAL receiver from that receiver's
   connected server.
-->
<structname>pg_stat_wal_receiver</structname>ビューは、１行のみの形式で、受信サーバが接続したサーバからWALレシーバに関する統計情報を表示します。
  </para>

  <table id="pg-stat-subscription" xreflabel="pg_stat_subscription">
<!--
   <title><structname>pg_stat_subscription</structname> View</title>
-->
   <title><structname>pg_stat_subscription</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>subid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the subscription</entry>
-->
     <entry>サブスクリプションのOID</entry>
    </row>
    <row>
     <entry><structfield>subname</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Name of the subscription</entry>
-->
     <entry>サブスクリプションの名前</entry>
    </row>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of the subscription worker process</entry>
-->
     <entry>サブスクリプションのワーカプロセスのプロセスID</entry>
    </row>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>Oid</type></entry>
<!--
     <entry>OID of the relation that the worker is synchronizing; null for the
     main apply worker</entry>
-->
     <entry>ワーカが同期しているリレーションのOID、メインの適用ワーカの場合はNULL</entry>
    </row>
    <row>
     <entry><structfield>received_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location received, the initial value of
      this field being 0</entry>
-->
     <entry>最後に受け取った先行書き込みログ位置、このフィールドの初期値は0</entry>
    </row>
    <row>
     <entry><structfield>last_msg_send_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Send time of last message received from origin WAL sender</entry>
-->
     <entry>オリジンWAL送信サーバから受け取った最後のメッセージの送信時刻</entry>
    </row>
    <row>
     <entry><structfield>last_msg_receipt_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Receipt time of last message received from origin WAL sender
-->
     <entry>オリジンWAL送信サーバから受け取った最後のメッセージの受信時刻
     </entry>
    </row>
    <row>
     <entry><structfield>latest_end_lsn</structfield></entry>
     <entry><type>pg_lsn</type></entry>
<!--
     <entry>Last write-ahead log location reported to origin WAL sender
-->
     <entry>オリジンWAL送信サーバに最後に報告された先行書き込みログ位置
     </entry>
    </row>
    <row>
     <entry><structfield>latest_end_time</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time of last write-ahead log location reported to origin WAL
      sender</entry>
-->
     <entry>オリジンWAL送信サーバかに最後の先行書き込みログ位置が報告された時刻</entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-database-view">
  <title><structname>pg_stat_database</structname></title>

  <indexterm>
   <primary>pg_stat_database</primary>
  </indexterm>

  <para>
<<<<<<< HEAD
   The <structname>pg_stat_database</structname> view will contain one row
   for each database in the cluster, plus one for shared objects, showing
   database-wide statistics.
  </para>

  <table id="pg-stat-database-view" xreflabel="pg_stat_database">
   <title><structname>pg_stat_database</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of this database, or 0 for objects belonging to a shared
       relation
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of this database, or <literal>NULL</literal> for shared
       objects.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>numbackends</structfield> <type>integer</type>
      </para>
      <para>
       Number of backends currently connected to this database, or
       <literal>NULL</literal> for shared objects.  This is the only column
       in this view that returns a value reflecting current state; all other
       columns return the accumulated values since the last reset.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>xact_commit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of transactions in this database that have been
       committed
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>xact_rollback</structfield> <type>bigint</type>
      </para>
      <para>
       Number of transactions in this database that have been
       rolled back
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times disk blocks were found already in the buffer
       cache, so that a read was not necessary (this only includes hits in the
       PostgreSQL buffer cache, not the operating system's file system cache)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tup_returned</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows returned by queries in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tup_fetched</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows fetched by queries in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tup_inserted</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows inserted by queries in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tup_updated</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows updated by queries in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tup_deleted</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows deleted by queries in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>conflicts</structfield> <type>bigint</type>
      </para>
      <para>
       Number of queries canceled due to conflicts with recovery
       in this database. (Conflicts occur only on standby servers; see
       <link linkend="monitoring-pg-stat-database-conflicts-view">
       <structname>pg_stat_database_conflicts</structname></link> for details.)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>temp_files</structfield> <type>bigint</type>
      </para>
      <para>
       Number of temporary files created by queries in this database.
       All temporary files are counted, regardless of why the temporary file
       was created (e.g., sorting or hashing), and regardless of the
       <xref linkend="guc-log-temp-files"/> setting.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>temp_bytes</structfield> <type>bigint</type>
      </para>
      <para>
       Total amount of data written to temporary files by queries in
       this database. All temporary files are counted, regardless of why
       the temporary file was created, and
       regardless of the <xref linkend="guc-log-temp-files"/> setting.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>deadlocks</structfield> <type>bigint</type>
      </para>
      <para>
       Number of deadlocks detected in this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>checksum_failures</structfield> <type>bigint</type>
      </para>
      <para>
       Number of data page checksum failures detected in this
       database (or on a shared object), or NULL if data checksums are not
       enabled.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>checksum_last_failure</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time at which the last data page checksum failure was detected in
       this database (or on a shared object), or NULL if data checksums are not
       enabled.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blk_read_time</structfield> <type>double precision</type>
      </para>
      <para>
       Time spent reading data file blocks by backends in this database,
       in milliseconds (if <xref linkend="guc-track-io-timing"/> is enabled,
       otherwise zero)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blk_write_time</structfield> <type>double precision</type>
      </para>
      <para>
       Time spent writing data file blocks by backends in this database,
       in milliseconds (if <xref linkend="guc-track-io-timing"/> is enabled,
       otherwise zero)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>stats_reset</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time at which these statistics were last reset
      </para></entry>
     </row>
    </tbody>
=======
<!--
   The <structname>pg_stat_subscription</structname> view will contain one
   row per subscription for main worker (with null PID if the worker is
   not running), and additional rows for workers handling the initial data
   copy of the subscribed tables.
-->
<structname>pg_stat_subscription</structname>には、各サブスクリプションのメインワーカに対して1行が含まれ（ワーカが実行中でないときはPIDがNULLになります）、さらにサブスクライブされたテーブルの初期データコピーを処理するワーカについて別の行があります。
  </para>

  <table id="pg-stat-ssl-view" xreflabel="pg_stat_ssl">
<!--
   <title><structname>pg_stat_ssl</structname> View</title>
-->
   <title><structname>pg_stat_ssl</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of a backend or WAL sender process</entry>
-->
     <entry>バックエンドプロセスまたはWAL送信プロセスのプロセスIDです。</entry>
    </row>
    <row>
     <entry><structfield>ssl</structfield></entry>
     <entry><type>boolean</type></entry>
<!--
     <entry>True if SSL is used on this connection</entry>
-->
     <entry>この接続でSSLが使用されていれば真になります。</entry>
    </row>
    <row>
     <entry><structfield>version</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Version of SSL in use, or NULL if SSL is not in use
      on this connection</entry>
-->
     <entry>使用されているSSLのバージョン、この接続でSSLが使用されていなければNULLになります。</entry>
    </row>
    <row>
     <entry><structfield>cipher</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Name of SSL cipher in use, or NULL if SSL is not in use
      on this connection</entry>
-->
     <entry>使用されているSSL暗号の名前、この接続でSSLが使用されていなければNULLになります。</entry>
    </row>
    <row>
     <entry><structfield>bits</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Number of bits in the encryption algorithm used, or NULL
     if SSL is not used on this connection</entry>
-->
     <entry>使用されている暗号アルゴリズムのビット数、この接続でSSLが使用されていなければNULLになります。</entry>
    </row>
    <row>
     <entry><structfield>compression</structfield></entry>
     <entry><type>boolean</type></entry>
<!--
     <entry>True if SSL compression is in use, false if not,
      or NULL if SSL is not in use on this connection</entry>
-->
     <entry>SSL圧縮が使用されていれば真、使用されていなければ偽、この接続でSSLが使用されていなければNULLになります。</entry>
    </row>
    <row>
     <entry><structfield>client_dn</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Distinguished Name (DN) field from the client certificate
      used, or NULL if no client certificate was supplied or if SSL
      is not in use on this connection. This field is truncated if the
      DN field is longer than <symbol>NAMEDATALEN</symbol> (64 characters
      in a standard build).
-->
     <entry>
使用されているクライアント証明書の識別名(DN)フィールド、クライアント証明書が提供されなかった場合、およびこの接続でSSLが使用されていない場合はNULLになります。
このフィールドは、DNフィールドが<symbol>NAMEDATALEN</symbol>（標準ビルドでは64文字）より長いと切り詰められます。
     </entry>
    </row>
    <row>
     <entry><structfield>client_serial</structfield></entry>
     <entry><type>numeric</type></entry>
<!--
     <entry>Serial number of the client certificate, or NULL if no client
     certificate was supplied or if SSL is not in use on this connection.  The
     combination of certificate serial number and certificate issuer uniquely
     identifies a certificate (unless the issuer erroneously reuses serial
     numbers).</entry>
-->
     <entry>
クライアント証明書のシリアル番号、または、この接続でクライアント証明書が提供されていないかSSLが使われていない場合にNULLになります。
証明書のシリアル番号と証明書発行者の組み合わせは（発行者が誤ってシリアル番号を再使用しない限り）証明書を唯一に識別します。
     </entry>
    </row>
    <row>
     <entry><structfield>issuer_dn</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>DN of the issuer of the client certificate, or NULL if no client
     certificate was supplied or if SSL is not in use on this connection.
     This field is truncated like <structfield>client_dn</structfield>.</entry>
-->
     <entry>
クライアント証明書の発行者のDN、または、この接続でクライアント証明書が提供されていないかSSLが使われていない場合にNULLになります。
このフィールドは<structfield>client_dn</structfield>と同様に切り詰められます。
     </entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-database-conflicts-view">
  <title><structname>pg_stat_database_conflicts</structname></title>

  <indexterm>
   <primary>pg_stat_database_conflicts</primary>
  </indexterm>

  <para>
<<<<<<< HEAD
   The <structname>pg_stat_database_conflicts</structname> view will contain
   one row per database, showing database-wide statistics about
   query cancels occurring due to conflicts with recovery on standby servers.
   This view will only contain information on standby servers, since
   conflicts do not occur on master servers.
  </para>

  <table id="pg-stat-database-conflicts-view" xreflabel="pg_stat_database_conflicts">
   <title><structname>pg_stat_database_conflicts</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of a database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of this database
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>confl_tablespace</structfield> <type>bigint</type>
      </para>
      <para>
       Number of queries in this database that have been canceled due to
       dropped tablespaces
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>confl_lock</structfield> <type>bigint</type>
      </para>
      <para>
       Number of queries in this database that have been canceled due to
       lock timeouts
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>confl_snapshot</structfield> <type>bigint</type>
      </para>
      <para>
       Number of queries in this database that have been canceled due to
       old snapshots
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>confl_bufferpin</structfield> <type>bigint</type>
      </para>
      <para>
       Number of queries in this database that have been canceled due to
       pinned buffers
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>confl_deadlock</structfield> <type>bigint</type>
      </para>
      <para>
       Number of queries in this database that have been canceled due to
       deadlocks
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-all-tables-view">
  <title><structname>pg_stat_all_tables</structname></title>

  <indexterm>
   <primary>pg_stat_all_tables</primary>
  </indexterm>

  <para>
   The <structname>pg_stat_all_tables</structname> view will contain
   one row for each table in the current database (including TOAST
   tables), showing statistics about accesses to that specific table. The
   <structname>pg_stat_user_tables</structname> and
   <structname>pg_stat_sys_tables</structname> views
   contain the same information,
   but filtered to only show user and system tables respectively.
  </para>
=======
<!--
   The <structname>pg_stat_ssl</structname> view will contain one row per
   backend or WAL sender process, showing statistics about SSL usage on
   this connection. It can be joined to <structname>pg_stat_activity</structname>
   or <structname>pg_stat_replication</structname> on the
   <structfield>pid</structfield> column to get more details about the
   connection.
-->
<structname>pg_stat_ssl</structname>ビューは、バックエンドプロセスおよびWAL送信プロセスごとに1行を保持し、接続上でのSSLの使用に関する統計情報を示します。
<structname>pg_stat_activity</structname>または<structname>pg_stat_replication</structname>と<structfield>pid</structfield>列で結合することで、接続に関するより詳細な情報を取得することができます。
  </para>

  <table id="pg-stat-gssapi-view" xreflabel="pg_stat_gssapi">
<!--
   <title><structname>pg_stat_gssapi</structname> View</title>
-->
   <title><structname>pg_stat_gssapi</structname> ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of a backend</entry>
-->
     <entry>バックエンドのプロセスID</entry>
    </row>
    <row>
     <entry><structfield>gss_authenticated</structfield></entry>
     <entry><type>boolean</type></entry>
<!--
     <entry>True if GSSAPI authentication was used for this connection</entry>
-->
     <entry>この接続にGSSAPI認証が使われていたなら真</entry>
    </row>
    <row>
     <entry><structfield>principal</structfield></entry>
     <entry><type>text</type></entry>
<!--
     <entry>Principal used to authenticate this connection, or NULL
      if GSSAPI was not used to authenticate this connection.  This
      field is truncated if the principal is longer than
      <symbol>NAMEDATALEN</symbol> (64 characters in a standard build).
     </entry>
-->
     <entry>
この接続の認証に使われているプリンシパル、または、接続の認証にGSSAPIが使われていない場合にはNULLです。
このフィールドはプリンシパルが<symbol>NAMEDATALEN</symbol>（標準ビルドでは64文字）よりも長い場合には切り詰められます。
     </entry>
    </row>
    <row>
     <entry><structfield>encrypted</structfield></entry>
     <entry><type>boolean</type></entry>
<!--
     <entry>True if GSSAPI encryption is in use on this connection</entry>
-->
     <entry>この接続でGSSAPI暗号化が使われているなら真</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_gssapi</structname> view will contain one row per
   backend, showing information about GSSAPI usage on this connection. It can
   be joined to <structname>pg_stat_activity</structname> or
   <structname>pg_stat_replication</structname> on the
   <structfield>pid</structfield> column to get more details about the
   connection.
-->
<structname>pg_stat_gssapi</structname>ビューはバックエンド毎に1行で構成され、接続でのGSSAPI使用に関する情報を表示します。
接続に関する更なる詳細を得るため、これを<structname>pg_stat_activity</structname>や<structname>pg_stat_replication</structname>と<structfield>pid</structfield>列で結合することができます。
  </para>


  <table id="pg-stat-archiver-view" xreflabel="pg_stat_archiver">
<!--
   <title><structname>pg_stat_archiver</structname> View</title>
-->
   <title><structname>pg_stat_archiver</structname>ビュー</title>
>>>>>>> doc_ja_12

  <table id="pg-stat-all-tables-view" xreflabel="pg_stat_all_tables">
   <title><structname>pg_stat_all_tables</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
=======
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
>>>>>>> doc_ja_12
     </row>
    </thead>

    <tbody>
     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of a table
      </para></entry>
=======
      <entry><structfield>archived_count</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of WAL files that have been successfully archived</entry>
-->
      <entry>アーカイブに成功したWALファイルの数</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
      </para>
      <para>
       Name of the schema that this table is in
      </para></entry>
=======
      <entry><structfield>last_archived_wal</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Name of the last WAL file successfully archived</entry>
-->
      <entry>アーカイブに成功した最後のWALファイルの名前</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relname</structfield> <type>name</type>
      </para>
      <para>
       Name of this table
      </para></entry>
=======
      <entry><structfield>last_archived_time</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time of the last successful archive operation</entry>
-->
      <entry>最後に成功したアーカイブ操作の時刻</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>seq_scan</structfield> <type>bigint</type>
      </para>
      <para>
       Number of sequential scans initiated on this table
      </para></entry>
=======
      <entry><structfield>failed_count</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of failed attempts for archiving WAL files</entry>
-->
      <entry>WALファイルのアーカイブに失敗した回数</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>seq_tup_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of live rows fetched by sequential scans
      </para></entry>
=======
      <entry><structfield>last_failed_wal</structfield></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Name of the WAL file of the last failed archival operation</entry>
-->
      <entry>最後にアーカイブ操作に失敗したWALファイルの名前</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_scan</structfield> <type>bigint</type>
      </para>
      <para>
       Number of index scans initiated on this table
      </para></entry>
=======
      <entry><structfield>last_failed_time</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time of the last failed archival operation</entry>
-->
      <entry>最後にアーカイブ操作に失敗した時刻</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_tup_fetch</structfield> <type>bigint</type>
      </para>
      <para>
       Number of live rows fetched by index scans
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_tup_ins</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows inserted
      </para></entry>
     </row>
=======
      <entry><structfield>stats_reset</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time at which these statistics were last reset</entry>
-->
      <entry>この統計が最後にリセットされた時刻</entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_archiver</structname> view will always have a
   single row, containing data about the archiver process of the cluster.
-->
<structname>pg_stat_archiver</structname>は常に、クラスタのアーカイバプロセスに関するデータを含む１つの行を持ちます。
  </para>

  <table id="pg-stat-bgwriter-view" xreflabel="pg_stat_bgwriter">
<!--
   <title><structname>pg_stat_bgwriter</structname> View</title>
-->
   <title><structname>pg_stat_bgwriter</structname>ビュー</title>

   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>

    </thead>
>>>>>>> doc_ja_12

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_tup_upd</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows updated (includes HOT updated rows)
      </para></entry>
=======
      <entry><structfield>checkpoints_timed</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of scheduled checkpoints that have been performed</entry>
-->
      <entry>
これまでに実行された、スケジュールされたチェックポイントの個数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_tup_del</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows deleted
      </para></entry>
=======
      <entry><structfield>checkpoints_req</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of requested checkpoints that have been performed</entry>
-->
      <entry>
これまでに実行された、要求されたチェックポイントの個数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_tup_hot_upd</structfield> <type>bigint</type>
      </para>
      <para>
       Number of rows HOT updated (i.e., with no separate index
       update required)
      </para></entry>
=======
      <entry><structfield>checkpoint_write_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry>
<!--
        Total amount of time that has been spent in the portion of
        checkpoint processing where files are written to disk, in milliseconds
-->
チェックポイント処理におけるディスクにファイルを書き出す部分に費やされた、ミリ秒単位の総時間です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_live_tup</structfield> <type>bigint</type>
      </para>
      <para>
       Estimated number of live rows
      </para></entry>
=======
      <entry><structfield>checkpoint_sync_time</structfield></entry>
      <entry><type>double precision</type></entry>
      <entry>
<!--
        Total amount of time that has been spent in the portion of
        checkpoint processing where files are synchronized to disk, in
        milliseconds
-->
チェックポイント処理におけるディスクにファイルを同期する部分に費やされた、ミリ秒単位の総時間です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_dead_tup</structfield> <type>bigint</type>
      </para>
      <para>
       Estimated number of dead rows
      </para></entry>
=======
      <entry><structfield>buffers_checkpoint</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of buffers written during checkpoints</entry>
-->
      <entry>
チェックポイント期間に書き出されたバッファ数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_mod_since_analyze</structfield> <type>bigint</type>
      </para>
      <para>
       Estimated number of rows modified since this table was last analyzed
      </para></entry>
=======
      <entry><structfield>buffers_clean</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of buffers written by the background writer</entry>
-->
      <entry>
バックグラウンドライタにより書き出されたバッファ数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>n_ins_since_vacuum</structfield> <type>bigint</type>
      </para>
      <para>
       Estimated number of rows inserted since this table was last vacuumed
      </para></entry>
=======
      <entry><structfield>maxwritten_clean</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of times the background writer stopped a cleaning
       scan because it had written too many buffers</entry>
-->
      <entry>
バックグラウンドライタが書き出したバッファ数が多過ぎたために、整理用スキャンを停止した回数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_vacuum</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Last time at which this table was manually vacuumed
       (not counting <command>VACUUM FULL</command>)
      </para></entry>
=======
      <entry><structfield>buffers_backend</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of buffers written directly by a backend</entry>
-->
      <entry>
バックエンドにより直接書き出されたバッファ数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_autovacuum</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Last time at which this table was vacuumed by the autovacuum
       daemon
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_analyze</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Last time at which this table was manually analyzed
      </para></entry>
=======
      <entry><structfield>buffers_backend_fsync</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of times a backend had to execute its own
       <function>fsync</function> call (normally the background writer handles those
       even when the backend does its own write)</entry>
-->
      <entry>
バックエンドが独自に<function>fsync</function>呼び出しを実行しなければならなかった回数です。
（通常は、バックエンドが独自に書き込んだ場合であっても、バックグラウンドライタがこれらを扱います。）
      </entry>
     </row>

     <row>
      <entry><structfield>buffers_alloc</structfield></entry>
      <entry><type>bigint</type></entry>
<!--
      <entry>Number of buffers allocated</entry>
-->
      <entry>
割当られたバッファ数です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>last_autoanalyze</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Last time at which this table was analyzed by the autovacuum
       daemon
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>vacuum_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times this table has been manually vacuumed
       (not counting <command>VACUUM FULL</command>)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>autovacuum_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times this table has been vacuumed by the autovacuum
       daemon
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>analyze_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times this table has been manually analyzed
      </para></entry>
=======
      <entry><structfield>stats_reset</structfield></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time at which these statistics were last reset</entry>
-->
      <entry>
これらの統計情報がリセットされた最終時刻です。
      </entry>
     </row>
    </tbody>
    </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_bgwriter</structname> view will always have a
   single row, containing global data for the cluster.
-->
<structname>pg_stat_bgwriter</structname>ビューは常に、クラスタのグローバルデータに関する１つの行を持ちます。
  </para>

  <table id="pg-stat-database-view" xreflabel="pg_stat_database">
<!--
   <title><structname>pg_stat_database</structname> View</title>
-->
   <title><structname>pg_stat_database</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of this database, or 0 for objects belonging to a shared
     relation</entry>
-->
     <entry>
データベースのOID、共有リレーションに属するオブジェクトについては0
     </entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this database, or <literal>NULL</literal> for the shared
     objects.</entry>
-->
     <entry>
データベース名、共有オブジェクトについては<literal>NULL</literal>
     </entry>
    </row>
    <row>
     <entry><structfield>numbackends</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Number of backends currently connected to this database, or
     <literal>NULL</literal> for the shared objects.  This is the only column
     in this view that returns a value reflecting current state; all other
     columns return the accumulated values since the last reset.</entry>
-->
     <entry>
現在データベースに接続しているバックエンドの個数、あるいは、共有オブジェクトについては<literal>NULL</literal>です。
これは、このビューの中で、現在の状態を反映した値を返す唯一の列です。
他の列はすべて、最後にリセットされてから累積された値を返します。
     </entry>
    </row>
    <row>
     <entry><structfield>xact_commit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of transactions in this database that have been
      committed</entry>
-->
     <entry>
このデータベースの中でコミットされたトランザクション数です。
     </entry>
    </row>
    <row>
     <entry><structfield>xact_rollback</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of transactions in this database that have been
      rolled back</entry>
-->
     <entry>
このデータベースの中でロールバックされたトランザクション数です。
     </entry>
    </row>
    <row>
     <entry><structfield>blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read in this database</entry>
-->
     <entry>
データベース内で読み取られたディスクブロック数です。
     </entry>
    </row>
    <row>
     <entry><structfield>blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of times disk blocks were found already in the buffer
      cache, so that a read was not necessary (this only includes hits in the
      PostgreSQL buffer cache, not the operating system's file system cache)
     </entry>
-->
     <entry>
バッファキャッシュに既にあることが分かっているために読み取りが不要だったディスクブロック数です（これにはPostgreSQLのバッファキャッシュにおけるヒットのみが含まれ、オペレーティングシステムのファイルシステムキャッシュは含まれません）。
     </entry>
    </row>
    <row>
     <entry><structfield>tup_returned</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows returned by queries in this database</entry>
-->
     <entry>
データベース内の問い合わせで返された行数です。
     </entry>
    </row>
    <row>
     <entry><structfield>tup_fetched</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows fetched by queries in this database</entry>
-->
     <entry>
データベース内の問い合わせで取り出された行数です。
     </entry>
    </row>
    <row>
     <entry><structfield>tup_inserted</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows inserted by queries in this database</entry>
-->
     <entry>
データベース内の問い合わせで挿入された行数です。
     </entry>
    </row>
    <row>
     <entry><structfield>tup_updated</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows updated by queries in this database</entry>
-->
     <entry>
データベース内の問い合わせで更新された行数です。
     </entry>
    </row>
    <row>
     <entry><structfield>tup_deleted</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows deleted by queries in this database</entry>
-->
     <entry>
データベース内の問い合わせで削除された行数です。
     </entry>
    </row>
    <row>
     <entry><structfield>conflicts</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
     <entry>Number of queries canceled due to conflicts with recovery
      in this database. (Conflicts occur only on standby servers; see
      <xref linkend="pg-stat-database-conflicts-view"/> for details.)
-->
データベース内のリカバリで競合したためキャンセルされた問い合わせ数です。
（競合はスタンバイサーバ上でのみ起こります。詳細については<xref linkend="pg-stat-database-conflicts-view"/>を参照してください。）
     </entry>
    </row>
    <row>
     <entry><structfield>temp_files</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of temporary files created by queries in this database.
      All temporary files are counted, regardless of why the temporary file
      was created (e.g., sorting or hashing), and regardless of the
      <xref linkend="guc-log-temp-files"/> setting.
-->
     <entry>
データベース内の問い合わせによって書き出された一時ファイルの個数です。
一時ファイルが作成された理由（ソート処理やハッシュ処理）や<xref linkend="guc-log-temp-files"/>の設定に関わらず、すべての一時ファイルが計上されます。
     </entry>
    </row>
    <row>
     <entry><structfield>temp_bytes</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
     <entry>Total amount of data written to temporary files by queries in
      this database. All temporary files are counted, regardless of why
      the temporary file was created, and
      regardless of the <xref linkend="guc-log-temp-files"/> setting.
-->
データベース内の問い合わせによって一時ファイルに書き出されたデータ量です。
一時ファイルが作成された理由や<xref linkend="guc-log-temp-files"/>の設定に関わらず、すべての一時ファイルが計上されます。
     </entry>
    </row>
    <row>
     <entry><structfield>deadlocks</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of deadlocks detected in this database</entry>
-->
     <entry>
データベース内で検知されたデッドロック数です。
     </entry>
    </row>
    <row>
     <entry><structfield>checksum_failures</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of data page checksum failures detected in this
      database (or on a shared object), or NULL if data checksums are not
      enabled.</entry>
-->
     <entry>
データベース（あるいは共有オブジェクト）内で検出されたデータページチェックサムの検査失敗数、あるいはデータチェックサムが無効の場合にはNULLです。
     </entry>
    </row>
    <row>
     <entry><structfield>checksum_last_failure</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time at which the last data page checksum failure was detected in
      this database (or on a shared object), or NULL if data checksums are not
      enabled.</entry>
-->
     <entry>
データベース（または共有オブジェクト）内で最後にデータページチェックサムの検査失敗が検知された時刻、あるいはデータチェックサムが無効の場合にはNULLです。
     </entry>
    </row>
    <row>
     <entry><structfield>blk_read_time</structfield></entry>
     <entry><type>double precision</type></entry>
<!--
     <entry>Time spent reading data file blocks by backends in this database,
      in milliseconds</entry>
-->
     <entry>
データベース内でバックエンドによりデータファイルブロックの読み取りに費やされた、ミリ秒単位の時間です。
     </entry>

    </row>
    <row>
     <entry><structfield>blk_write_time</structfield></entry>
     <entry><type>double precision</type></entry>
<!--
     <entry>Time spent writing data file blocks by backends in this database,
      in milliseconds</entry>
-->
     <entry>
データベース内でバックエンドによりデータファイルブロックの書き出しに費やされた、ミリ秒単位の時間です。
     </entry>
    </row>
    <row>
     <entry><structfield>stats_reset</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Time at which these statistics were last reset</entry>
-->
     <entry>
統計情報がリセットされた最終時刻です。
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_database</structname> view will contain one row
   for each database in the cluster, plus one for the shared objects, showing
   database-wide statistics.
-->
<structname>pg_stat_database</structname>には、クラスタ内のデータベース毎に1行と加えて共有オブジェクトのための1行が含まれ、データベース全体の統計情報を示します。
  </para>

  <table id="pg-stat-database-conflicts-view" xreflabel="pg_stat_database_conflicts">
<!--
   <title><structname>pg_stat_database_conflicts</structname> View</title>
-->
   <title><structname>pg_stat_database_conflicts</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
>>>>>>> doc_ja_12
     </row>

<<<<<<< HEAD
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>autoanalyze_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times this table has been analyzed by the autovacuum
       daemon
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-all-indexes-view">
  <title><structname>pg_stat_all_indexes</structname></title>

  <indexterm>
   <primary>pg_stat_all_indexes</primary>
  </indexterm>

  <para>
   The <structname>pg_stat_all_indexes</structname> view will contain
   one row for each index in the current database,
   showing statistics about accesses to that specific index. The
   <structname>pg_stat_user_indexes</structname> and
   <structname>pg_stat_sys_indexes</structname> views
   contain the same information,
   but filtered to only show user and system indexes respectively.
=======
   <tbody>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of a database</entry>
-->
     <entry>データベースのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this database</entry>
-->
     <entry>データベースの名前です。</entry>
    </row>
    <row>
     <entry><structfield>confl_tablespace</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of queries in this database that have been canceled due to
      dropped tablespaces</entry>
-->
     <entry>データベースにおいて、削除されたテーブル空間のためにキャンセルされた問い合わせの個数です。</entry>
    </row>
    <row>
     <entry><structfield>confl_lock</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of queries in this database that have been canceled due to
      lock timeouts</entry>
-->
     <entry>データベースにおいて、ロック時間切れのためにキャンセルされた問い合わせの個数です。</entry>
    </row>
    <row>
     <entry><structfield>confl_snapshot</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of queries in this database that have been canceled due to
      old snapshots</entry>
-->
     <entry>データベースにおいて、古いスナップショットのためにキャンセルされた問い合わせの個数です。</entry>
    </row>
    <row>
     <entry><structfield>confl_bufferpin</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of queries in this database that have been canceled due to
      pinned buffers</entry>
-->
     <entry>データベースにおいて、ピンが付いたバッファのためにキャンセルされた問い合わせの個数です。</entry>
    </row>
    <row>
     <entry><structfield>confl_deadlock</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of queries in this database that have been canceled due to
      deadlocks</entry>
-->
     <entry>データベースにおいて、デッドロックのためにキャンセルされた問い合わせの個数です。</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_database_conflicts</structname> view will contain
   one row per database, showing database-wide statistics about
   query cancels occurring due to conflicts with recovery on standby servers.
   This view will only contain information on standby servers, since
   conflicts do not occur on master servers.
-->
<structname>pg_stat_database_conflicts</structname>ビューは、データベース毎に１行を保持し、スタンバイサーバでのリカバリと競合するためにキャンセルされた問い合わせに関するデータベース全体の統計情報を示します。
マスタサーバでは競合は発生しませんので、スタンバイサーバ上の情報のみが保持されます。
  </para>

  <table id="pg-stat-all-tables-view" xreflabel="pg_stat_all_tables">
<!--
   <title><structname>pg_stat_all_tables</structname> View</title>
-->
   <title><structname>pg_stat_all_tables</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of a table</entry>
-->
     <entry>テーブルのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the schema that this table is in</entry>
-->
     <entry>テーブルが存在するスキーマの名前です。</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this table</entry>
-->
     <entry>テーブルの名前です。</entry>
    </row>
    <row>
     <entry><structfield>seq_scan</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of sequential scans initiated on this table</entry>
-->
     <entry>
テーブル上で初期化されたシーケンシャルスキャンの個数です。
     </entry>
    </row>
    <row>
     <entry><structfield>seq_tup_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of live rows fetched by sequential scans</entry>
-->
     <entry>
シーケンシャルスキャンによって取り出された有効行の個数です。
     </entry>
    </row>
    <row>
     <entry><structfield>idx_scan</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of index scans initiated on this table</entry>
-->
     <entry>
テーブル上で開始されたインデックススキャンの実行回数です。
     </entry>
    </row>
    <row>
     <entry><structfield>idx_tup_fetch</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of live rows fetched by index scans</entry>
-->
<entry>インデックススキャンによって取り出された有効行の個数です。</entry>
    </row>
    <row>
     <entry><structfield>n_tup_ins</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows inserted</entry>
-->
     <entry>挿入された行数です。</entry>
    </row>
    <row>
     <entry><structfield>n_tup_upd</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows updated (includes HOT updated rows)</entry>
-->
     <entry>更新された行数です。（HOT更新された行数を含みます）</entry>
    </row>
    <row>
     <entry><structfield>n_tup_del</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows deleted</entry>
-->
     <entry>削除された行数です。</entry>
    </row>
    <row>
     <entry><structfield>n_tup_hot_upd</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of rows HOT updated (i.e., with no separate index
      update required)</entry>
-->
     <entry>HOT更新（つまりインデックスの更新を別途必要としない）された行数です。</entry>
    </row>
    <row>
     <entry><structfield>n_live_tup</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Estimated number of live rows</entry>
-->
     <entry>有効行の推定値です。</entry>
    </row>
    <row>
     <entry><structfield>n_dead_tup</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Estimated number of dead rows</entry>
-->
     <entry>不要行の推定値です。</entry>
    </row>
    <row>
     <entry><structfield>n_mod_since_analyze</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Estimated number of rows modified since this table was last analyzed</entry>
-->
     <entry>このテーブルが最後に解析されてから変更された行の推定値</entry>
    </row>
    <row>
     <entry><structfield>last_vacuum</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Last time at which this table was manually vacuumed
      (not counting <command>VACUUM FULL</command>)</entry>
-->
     <entry>
テーブルが手作業でバキュームされた最終時刻です（<command>VACUUM FULL</command>は含まれません）。
     </entry>
    </row>
    <row>
     <entry><structfield>last_autovacuum</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Last time at which this table was vacuumed by the autovacuum
      daemon</entry>
-->
     <entry>
自動バキュームデーモンによりテーブルがバキュームされた最終時刻です。
     </entry>
    </row>
    <row>
     <entry><structfield>last_analyze</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Last time at which this table was manually analyzed</entry>
-->
     <entry>
テーブルが手作業で解析された最終時刻です。
     </entry>
    </row>
    <row>
     <entry><structfield>last_autoanalyze</structfield></entry>
     <entry><type>timestamp with time zone</type></entry>
<!--
     <entry>Last time at which this table was analyzed by the autovacuum
      daemon</entry>
-->
     <entry>
自動バキュームデーモンによりテーブルが解析された最終時刻です。
     </entry>
    </row>
    <row>
     <entry><structfield>vacuum_count</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of times this table has been manually vacuumed
      (not counting <command>VACUUM FULL</command>)</entry>
-->
     <entry>テーブルが手作業でバキュームされた回数です。（<command>VACUUM FULL</command>は含まれません）。</entry>
    </row>
    <row>
     <entry><structfield>autovacuum_count</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of times this table has been vacuumed by the autovacuum
      daemon</entry>
-->
     <entry>テーブルが自動バキュームデーモンによりバキュームされた回数です。</entry>
    </row>
    <row>
     <entry><structfield>analyze_count</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of times this table has been manually analyzed</entry>
-->
     <entry>テーブルが手作業で解析された回数です。</entry>
    </row>
    <row>
     <entry><structfield>autoanalyze_count</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of times this table has been analyzed by the autovacuum
      daemon</entry>
-->
     <entry>テーブルが自動バキュームデーモンによって解析された回数です。</entry>
    </row>
   </tbody>
   </tgroup>
  </table>

  <para>
<!--
   The <structname>pg_stat_all_tables</structname> view will contain
   one row for each table in the current database (including TOAST
   tables), showing statistics about accesses to that specific table. The
   <structname>pg_stat_user_tables</structname> and
   <structname>pg_stat_sys_tables</structname> views
   contain the same information,
   but filtered to only show user and system tables respectively.
-->
<structname>pg_stat_all_tables</structname>ビューは現在のデータベース内のテーブル（TOASTテーブルを含む）毎に１行の形式で、特定のテーブルへのアクセスに関する統計情報を表示します。
<structname>pg_stat_user_tables</structname>および<structname>pg_stat_sys_tables</structname>ビューにも同じ情報が含まれますが、それぞれユーザテーブルとシステムテーブルのみにフィルタされています。
>>>>>>> doc_ja_12
  </para>

  <table id="pg-stat-all-indexes-view" xreflabel="pg_stat_all_indexes">
<!--
   <title><structname>pg_stat_all_indexes</structname> View</title>
<<<<<<< HEAD
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the table for this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexrelid</structfield> <type>oid</type>
      </para>
      <para>
       OID of this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
      </para>
      <para>
       Name of the schema this index is in
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relname</structfield> <type>name</type>
      </para>
      <para>
       Name of the table for this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexrelname</structfield> <type>name</type>
      </para>
      <para>
       Name of this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_scan</structfield> <type>bigint</type>
      </para>
      <para>
       Number of index scans initiated on this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_tup_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of index entries returned by scans on this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_tup_fetch</structfield> <type>bigint</type>
      </para>
      <para>
       Number of live table rows fetched by simple index scans using this
       index
      </para></entry>
     </row>
    </tbody>
=======
-->
   <title><structname>pg_stat_all_indexes</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the table for this index</entry>
-->
     <entry>インデックス対象のテーブルのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>indexrelid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of this index</entry>
-->
     <entry>インデックスのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the schema this index is in</entry>
-->
     <entry>インデックスが存在するスキーマの名前です。</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the table for this index</entry>
-->
     <entry>インデックス対象のテーブルの名前です。</entry>
    </row>
    <row>
     <entry><structfield>indexrelname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this index</entry>
-->
     <entry>インデックスの名前です。</entry>
    </row>
    <row>
     <entry><structfield>idx_scan</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of index scans initiated on this index</entry>
-->
     <entry>
インデックスに対して開始されたインデックススキャンの実行回数です。
     </entry>
    </row>
    <row>
     <entry><structfield>idx_tup_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of index entries returned by scans on this index</entry>
-->
     <entry>
インデックスに対するスキャンにより返されたインデックス項目の個数です。
     </entry>
    </row>
    <row>
     <entry><structfield>idx_tup_fetch</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of live table rows fetched by simple index scans using this
      index</entry>
-->
     <entry>
インデックスを使用する単純なインデックススキャンによって取り出された有効テーブル行数です。
     </entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

  <para>
<<<<<<< HEAD
=======
<!--
   The <structname>pg_stat_all_indexes</structname> view will contain
   one row for each index in the current database,
   showing statistics about accesses to that specific index. The
   <structname>pg_stat_user_indexes</structname> and
   <structname>pg_stat_sys_indexes</structname> views
   contain the same information,
   but filtered to only show user and system indexes respectively.
-->
<structname>pg_stat_all_indexes</structname>ビューは、現在のデータベース内のインデックス毎に、特定のインデックスへのアクセスに関する統計情報を示す１行を保持します。
<structname>pg_stat_user_indexes</structname>と<structname>pg_stat_sys_indexes</structname>も同じ情報を保持しますが、ユーザ向けのインデックスとシステム向けのインデックスに対する行のみを保持するようにフィルタ処理されています。
  </para>

  <para>
<!--
>>>>>>> doc_ja_12
   Indexes can be used by simple index scans, <quote>bitmap</quote> index scans,
   and the optimizer.  In a bitmap scan
   the output of several indexes can be combined via AND or OR rules,
   so it is difficult to associate individual heap row fetches
   with specific indexes when a bitmap scan is used.  Therefore, a bitmap
   scan increments the
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_read</structfield>
   count(s) for the index(es) it uses, and it increments the
   <structname>pg_stat_all_tables</structname>.<structfield>idx_tup_fetch</structfield>
   count for the table, but it does not affect
   <structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_fetch</structfield>.
   The optimizer also accesses indexes to check for supplied constants
   whose values are outside the recorded range of the optimizer statistics
   because the optimizer statistics might be stale.
-->
単純なインデックススキャン、<quote>ビットマップ</quote>インデックススキャン、あるいはオプティマイザによりインデックスが使用されることがあります。
ビットマップスキャンでは、複数のインデックスの出力をANDやOR規則で組み合わせることができます。
このため、ビットマップスキャンが使用される場合、特定インデックスと個々のヒープ行の取り出しとを関連づけることが困難です。
したがってビットマップスキャンでは、使用したインデックスの<structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_read</structfield>個数を増やし、そのテーブルの<structname>pg_stat_all_tables</structname>.<structfield>idx_tup_fetch</structfield>個数を増やしますが、<structname>pg_stat_all_indexes</structname>.<structfield>idx_tup_fetch</structfield>を変更しません。
オプティマイザもインデックスにアクセスし、提供された定数値がオプティマイザの統計情報に記録された範囲の外側にあるときに、それを検査します。
これはオプティマイザの統計情報が古いかもしれないからです。
  </para>

  <note>
   <para>
<!--
    The <structfield>idx_tup_read</structfield> and <structfield>idx_tup_fetch</structfield> counts
    can be different even without any use of bitmap scans,
    because <structfield>idx_tup_read</structfield> counts
    index entries retrieved from the index while <structfield>idx_tup_fetch</structfield>
    counts live rows fetched from the table.  The latter will be less if any
    dead or not-yet-committed rows are fetched using the index, or if any
    heap fetches are avoided by means of an index-only scan.
-->
<structfield>idx_tup_read</structfield>と<structfield>idx_tup_fetch</structfield>個数は、ビットマップスキャンがまったく使用されていない場合でも異なります。
<structfield>idx_tup_read</structfield>はインデックスから取り出したインデックス項目を計上し、<structfield>idx_tup_fetch</structfield>はテーブルから取り出した有効行を計上するからです。
インデックスを用いて不要行やまだコミットされていない行が取り出された場合やインデックスオンリースキャン法によりヒープの取り出しが回避された場合に、後者は減少します。
   </para>
  </note>

<<<<<<< HEAD
 </sect2>

 <sect2 id="monitoring-pg-statio-all-tables-view">
  <title><structname>pg_statio_all_tables</structname></title>

  <indexterm>
   <primary>pg_statio_all_tables</primary>
  </indexterm>
=======
  <table id="pg-statio-all-tables-view" xreflabel="pg_statio_all_tables">
<!--
   <title><structname>pg_statio_all_tables</structname> View</title>
-->
   <title><structname>pg_statio_all_tables</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of a table</entry>
-->
     <entry>テーブルのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the schema that this table is in</entry>
-->
     <entry>テーブルが存在するスキーマの名前です。</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this table</entry>
-->
     <entry>テーブルの名前です。</entry>
    </row>
    <row>
     <entry><structfield>heap_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read from this table</entry>
-->
     <entry>テーブルから読み取られたディスクブロック数です。</entry>
    </row>
    <row>
     <entry><structfield>heap_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of buffer hits in this table</entry>
-->
     <entry>テーブル内のバッファヒット数です。</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read from all indexes on this table</entry>
-->
     <entry>テーブル上のすべてのインデックスから読み取られたディスクブロック数です。</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of buffer hits in all indexes on this table</entry>
-->
     <entry>テーブル上のすべてのインデックス内のバッファヒット数です。</entry>
    </row>
    <row>
     <entry><structfield>toast_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read from this table's TOAST table (if any)</entry>
-->
     <entry>テーブルのTOASTテーブル（もしあれば）から読み取られたディスクブロック数です。</entry>
    </row>
    <row>
     <entry><structfield>toast_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of buffer hits in this table's TOAST table (if any)</entry>
-->
     <entry>テーブルのTOASTテーブル（もしあれば）におけるバッファヒット数です。</entry>
    </row>
    <row>
     <entry><structfield>tidx_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read from this table's TOAST table indexes (if any)</entry>
-->
     <entry>テーブルのTOASTテーブルのインデックス（もしあれば）から読み取られたディスクブロック数です。</entry>
    </row>
    <row>
     <entry><structfield>tidx_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of buffer hits in this table's TOAST table indexes (if any)</entry>
-->
     <entry>テーブルのTOASTテーブルのインデックス（もしあれば）におけるバッファヒット数です。</entry>
    </row>
   </tbody>
   </tgroup>
  </table>
>>>>>>> doc_ja_12

  <para>
<!--
   The <structname>pg_statio_all_tables</structname> view will contain
   one row for each table in the current database (including TOAST
   tables), showing statistics about I/O on that specific table. The
   <structname>pg_statio_user_tables</structname> and
   <structname>pg_statio_sys_tables</structname> views
   contain the same information,
   but filtered to only show user and system tables respectively.
-->
<structname>pg_statio_all_tables</structname>ビューは現在のデータベース内のテーブル（TOASTテーブルを含む）ごとに、特定のテーブルのI/Oに関する統計情報を示す１行を保持します。
<structname>pg_statio_user_tables</structname>と<structname>pg_statio_sys_tables</structname>には同じ情報が保持されますが、ユーザテーブルとシステムテーブルに関する行のみを持つようにフィルタ処理がなされています。
  </para>

<<<<<<< HEAD
  <table id="pg-statio-all-tables-view" xreflabel="pg_statio_all_tables">
   <title><structname>pg_statio_all_tables</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of a table
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
      </para>
      <para>
       Name of the schema that this table is in
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relname</structfield> <type>name</type>
      </para>
      <para>
       Name of this table
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read from this table
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffer hits in this table
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read from all indexes on this table
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffer hits in all indexes on this table
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>toast_blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read from this table's TOAST table (if any)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>toast_blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffer hits in this table's TOAST table (if any)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tidx_blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read from this table's TOAST table indexes (if any)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tidx_blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffer hits in this table's TOAST table indexes (if any)
      </para></entry>
     </row>
    </tbody>
=======
  <table id="pg-statio-all-indexes-view" xreflabel="pg_statio_all_indexes">
<!--
   <title><structname>pg_statio_all_indexes</structname> View</title>
-->
   <title><structname>pg_statio_all_indexes</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the table for this index</entry>
-->
     <entry>このインデックスに対応するテーブルのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>indexrelid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of this index</entry>
-->
     <entry>インデックスのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the schema this index is in</entry>
-->
     <entry>インデックスが存在するスキーマの名前です。</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the table for this index</entry>
-->
     <entry>このインデックスに対応するテーブルの名前です。</entry>
    </row>
    <row>
     <entry><structfield>indexrelname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this index</entry>
-->
     <entry>インデックスの名前です。</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read from this index</entry>
-->
     <entry>インデックスから読み取られたディスクブロック数です。</entry>
    </row>
    <row>
     <entry><structfield>idx_blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of buffer hits in this index</entry>
-->
     <entry>インデックスにおけるバッファヒット数です。</entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-statio-all-indexes-view">
  <title><structname>pg_statio_all_indexes</structname></title>

  <indexterm>
   <primary>pg_statio_all_indexes</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_statio_all_indexes</structname> view will contain
   one row for each index in the current database,
   showing statistics about I/O on that specific index. The
   <structname>pg_statio_user_indexes</structname> and
   <structname>pg_statio_sys_indexes</structname> views
   contain the same information,
   but filtered to only show user and system indexes respectively.
-->
<structname>pg_statio_all_indexes</structname>ビューは、現在のデータベース内のインデックス毎に、特定のインデックスへのI/Oに関する統計情報を持つ１行を保持します。
<structname>pg_statio_user_indexes</structname>と<structname>pg_statio_sys_indexes</structname>も同じ情報を保持しますが、それぞれユーザ向けのインデックスとシステム向けのインデックスに対する行のみを保持するようにフィルタ処理されています。
  </para>

<<<<<<< HEAD
  <table id="pg-statio-all-indexes-view" xreflabel="pg_statio_all_indexes">
   <title><structname>pg_statio_all_indexes</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the table for this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexrelid</structfield> <type>oid</type>
      </para>
      <para>
       OID of this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
      </para>
      <para>
       Name of the schema this index is in
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relname</structfield> <type>name</type>
      </para>
      <para>
       Name of the table for this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>indexrelname</structfield> <type>name</type>
      </para>
      <para>
       Name of this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read from this index
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>idx_blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffer hits in this index
      </para></entry>
     </row>
    </tbody>
=======
  <table id="pg-statio-all-sequences-view" xreflabel="pg_statio_all_sequences">
<!--
   <title><structname>pg_statio_all_sequences</structname> View</title>
-->
   <title><structname>pg_statio_all_sequences</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of a sequence</entry>
-->
     <entry>シーケンスのOIDです。</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the schema this sequence is in</entry>
-->
     <entry>シーケンスが存在するスキーマの名前です。</entry>
    </row>
    <row>
     <entry><structfield>relname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this sequence</entry>
-->
     <entry>シーケンスの名前です。</entry>
    </row>
    <row>
     <entry><structfield>blks_read</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of disk blocks read from this sequence</entry>
-->
     <entry>シーケンスから読み取られたディスクブロック数です。</entry>
    </row>
    <row>
     <entry><structfield>blks_hit</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of buffer hits in this sequence</entry>
-->
     <entry>シーケンスにおけるバッファヒット数です。</entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-statio-all-sequences-view">
  <title><structname>pg_statio_all_sequences</structname></title>

  <indexterm>
   <primary>pg_statio_all_sequences</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_statio_all_sequences</structname> view will contain
   one row for each sequence in the current database,
   showing statistics about I/O on that specific sequence.
-->
<structname>pg_statio_all_sequences</structname>ビューは現在のデータベース内のシーケンスごとに、特定シーケンスにおけるI/Oに関する統計情報を示す１行を保持します。
  </para>

<<<<<<< HEAD
  <table id="pg-statio-all-sequences-view" xreflabel="pg_statio_all_sequences">
   <title><structname>pg_statio_all_sequences</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of a sequence
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
      </para>
      <para>
       Name of the schema this sequence is in
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relname</structfield> <type>name</type>
      </para>
      <para>
       Name of this sequence
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read from this sequence
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of buffer hits in this sequence
      </para></entry>
     </row>
    </tbody>
=======
  <table id="pg-stat-user-functions-view" xreflabel="pg_stat_user_functions">
<!--
   <title><structname>pg_stat_user_functions</structname> View</title>
-->
   <title><structname>pg_stat_user_functions</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>funcid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of a function</entry>
-->
     <entry>関数のOIDです。</entry>
    </row>
    <row>
     <entry><structfield>schemaname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the schema this function is in</entry>
-->
     <entry>関数が存在するスキーマの名前です。</entry>
    </row>
    <row>
     <entry><structfield>funcname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of this function</entry>
-->
     <entry>関数の名前です。</entry>
    </row>
    <row>
     <entry><structfield>calls</structfield></entry>
     <entry><type>bigint</type></entry>
<!--
     <entry>Number of times this function has been called</entry>
-->
     <entry>関数が呼び出された回数です。</entry>
    </row>
    <row>
     <entry><structfield>total_time</structfield></entry>
     <entry><type>double precision</type></entry>
<!--
     <entry>Total time spent in this function and all other functions
     called by it, in milliseconds</entry>
-->
     <entry>
関数とその関数から呼び出されるその他の関数で費やされた、ミリ秒単位の総時間です。
     </entry>
    </row>
    <row>
     <entry><structfield>self_time</structfield></entry>
     <entry><type>double precision</type></entry>
<!--
     <entry>Total time spent in this function itself, not including
     other functions called by it, in milliseconds</entry>
-->
     <entry>
その関数から呼び出されるその他の関数で費やされた時間を含まない、関数自身で費やされた、ミリ秒単位の総時間です。
     </entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-user-functions-view">
  <title><structname>pg_stat_user_functions</structname></title>

  <indexterm>
   <primary>pg_stat_user_functions</primary>
  </indexterm>

  <para>
<!--
   The <structname>pg_stat_user_functions</structname> view will contain
   one row for each tracked function, showing statistics about executions of
   that function.  The <xref linkend="guc-track-functions"/> parameter
   controls exactly which functions are tracked.
-->
<structname>pg_stat_user_functions</structname>ビューは追跡された関数毎に、その関数の実行に関する統計情報を１行保持します。
<xref linkend="guc-track-functions"/>パラメータは関数が追跡されるかどうかを正確に制御します。
  </para>

  <table id="pg-stat-user-functions-view" xreflabel="pg_stat_user_functions">
   <title><structname>pg_stat_user_functions</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

<<<<<<< HEAD
    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>funcid</structfield> <type>oid</type>
      </para>
      <para>
       OID of a function
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>schemaname</structfield> <type>name</type>
      </para>
      <para>
       Name of the schema this function is in
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>funcname</structfield> <type>name</type>
      </para>
      <para>
       Name of this function
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>calls</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times this function has been called
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>total_time</structfield> <type>double precision</type>
      </para>
      <para>
       Total time spent in this function and all other functions
       called by it, in milliseconds
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>self_time</structfield> <type>double precision</type>
      </para>
      <para>
       Total time spent in this function itself, not including
       other functions called by it, in milliseconds
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-pg-stat-slru-view">
  <title><structname>pg_stat_slru</structname></title>

  <indexterm>
   <primary>SLRU</primary>
  </indexterm>

  <indexterm>
   <primary>pg_stat_slru</primary>
  </indexterm>

  <para>
   <productname>PostgreSQL</productname> accesses certain on-disk information
   via <firstterm>SLRU</firstterm> (simple least-recently-used) caches.
   The <structname>pg_stat_slru</structname> view will contain
   one row for each tracked SLRU cache, showing statistics about access
   to cached pages.
  </para>

  <table id="pg-stat-slru-view" xreflabel="pg_stat_slru">
   <title><structname>pg_stat_slru</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
=======
 <sect2 id="monitoring-stats-functions">
<!--
  <title>Statistics Functions</title>
-->
  <title>統計情報関数</title>

  <para>
<!--
   Other ways of looking at the statistics can be set up by writing
   queries that use the same underlying statistics access functions used by
   the standard views shown above.  For details such as the functions' names,
   consult the definitions of the standard views.  (For example, in
   <application>psql</application> you could issue <literal>\d+ pg_stat_activity</literal>.)
   The access functions for per-database statistics take a database OID as an
   argument to identify which database to report on.
   The per-table and per-index functions take a table or index OID.
   The functions for per-function statistics take a function OID.
   Note that only tables, indexes, and functions in the current database
   can be seen with these functions.
-->
統計情報を参照する他の方法は、上述の標準ビューによって使用される基礎的な統計情報アクセス関数と同じ関数を使用した問い合わせを作成することで設定することができます。
こうした関数の名前などに関する詳細については、標準ビューの定義を参照してください。
（例えば<application>psql</application>では<literal>\d+ pg_stat_activity</literal>を発行してください。）
データベースごとの統計情報についてのアクセス関数は、どのデータベースに対して報告するのかを識別するためにデータベースのOIDを取ります。
テーブルごと、インデックスごとの関数はテーブルの、もしくはインデックスのOIDを取ります。
関数ごとの統計情報の関数は、関数のOIDを取ります。
これらの関数を使用して参照できるテーブルとインデックス、および関数は現在のデータベース内のものだけであることに注意してください。
  </para>

  <para>
<!--
   Additional functions related to statistics collection are listed in <xref
   linkend="monitoring-stats-funcs-table"/>.
-->
その他の統計情報収集に関連した関数を<xref linkend="monitoring-stats-funcs-table"/>に示します。
  </para>

  <table id="monitoring-stats-funcs-table">
<!--
   <title>Additional Statistics Functions</title>
-->
   <title>その他の統計情報関数</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
-->
      <entry>関数</entry>
      <entry>戻り値の型</entry>
      <entry>説明</entry>
>>>>>>> doc_ja_12
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>name</structfield> <type>text</type>
      </para>
      <para>
       Name of the SLRU
      </para></entry>
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_zeroed</structfield> <type>bigint</type>
      </para>
      <para>
       Number of blocks zeroed during initializations
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_hit</structfield> <type>bigint</type>
      </para>
      <para>
       Number of times disk blocks were found already in the SLRU,
       so that a read was not necessary (this only includes hits in the
       SLRU, not the operating system's file system cache)
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_read</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks read for this SLRU
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_written</structfield> <type>bigint</type>
      </para>
      <para>
       Number of disk blocks written for this SLRU
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blks_exists</structfield> <type>bigint</type>
      </para>
      <para>
       Number of blocks checked for existence for this SLRU
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>flushes</structfield> <type>bigint</type>
      </para>
      <para>
       Number of flushes of dirty data for this SLRU
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>truncates</structfield> <type>bigint</type>
      </para>
      <para>
       Number of truncates for this SLRU
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>stats_reset</structfield> <type>timestamp with time zone</type>
      </para>
      <para>
       Time at which these statistics were last reset
      </para></entry>
=======
       <!-- See also the entry for this in func.sgml -->
      <entry><literal><function>pg_backend_pid()</function></literal></entry>
      <entry><type>integer</type></entry>
      <entry>
<!--
       Process ID of the server process handling the current session
-->
現在のセッションを扱うサーバプロセスのプロセスID。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_activity</function>(<type>integer</type>)</literal><indexterm><primary>pg_stat_get_activity</primary></indexterm></entry>
      <entry><type>setof record</type></entry>
<!--
      <entry>
       Returns a record of information about the backend with the specified PID, or
       one record for each active backend in the system if <symbol>NULL</symbol> is
       specified. The fields returned are a subset of those in the
       <structname>pg_stat_activity</structname> view.
-->
      <entry>
PIDが指定された場合、それに該当するバックエンドの情報のレコード、<symbol>NULL</symbol>が指定された場合はシステム上のアクティブな各バックエンドに関するレコードが返されます。
返される情報内容は<structname>pg_stat_activity</structname>の一部と同じです。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_snapshot_timestamp()</function></literal><indexterm><primary>pg_stat_get_snapshot_timestamp</primary></indexterm></entry>
      <entry><type>timestamp with time zone</type></entry>
      <entry>
<!--
       Returns the timestamp of the current statistics snapshot
-->
現在の統計情報のスナップショットの時刻を返します。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_clear_snapshot()</function></literal><indexterm><primary>pg_stat_clear_snapshot</primary></indexterm></entry>
      <entry><type>void</type></entry>
      <entry>
<!--
       Discard the current statistics snapshot
-->
現在の統計情報スナップショットを破棄します。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset()</function></literal><indexterm><primary>pg_stat_reset</primary></indexterm></entry>
      <entry><type>void</type></entry>
      <entry>
<!--
       Reset all statistics counters for the current database to zero
       (requires superuser privileges by default, but EXECUTE for this
       function can be granted to others.)
-->
現在のデータベースに関する統計カウンタすべてをゼロにリセットします（デフォルトでスーパーユーザ権限が必要ですが、この関数のEXCUTE権限は他のユーザに付与することができます）。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset_shared</function>(text)</literal><indexterm><primary>pg_stat_reset_shared</primary></indexterm></entry>
      <entry><type>void</type></entry>
      <entry>
<!--
       Reset some cluster-wide statistics counters to zero, depending on the
       argument (requires superuser privileges by default, but EXECUTE for
       this function can be granted to others).
       Calling <literal>pg_stat_reset_shared('bgwriter')</literal> will zero all the
       counters shown in the <structname>pg_stat_bgwriter</structname> view.
       Calling <literal>pg_stat_reset_shared('archiver')</literal> will zero all the
       counters shown in the <structname>pg_stat_archiver</structname> view.
-->
引数に応じて、クラスタ全体の統計情報カウンタの一部をゼロに戻します（デフォルトでスーパーユーザ権限が必要ですが、この関数のEXCUTE権限は他のユーザに付与することができます）。
<literal>pg_stat_reset_shared('bgwriter')</literal>を呼び出すと、<structname>pg_stat_bgwriter</structname>ビューで示される値すべてがゼロになります。
<literal>pg_stat_reset_shared('archiver')</literal>を呼び出すと、<structname>pg_stat_archiver</structname>ビューで示される値すべてがゼロになります。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset_single_table_counters</function>(oid)</literal><indexterm><primary>pg_stat_reset_single_table_counters</primary></indexterm></entry>
      <entry><type>void</type></entry>
      <entry>
<!--
       Reset statistics for a single table or index in the current database to
       zero (requires superuser privileges by default, but EXECUTE for this
       function can be granted to others)
-->
現在のデータベース内にある、ひとつのテーブルあるいはインデックスの統計情報をゼロにリセットします（デフォルトでスーパーユーザ権限が必要ですが、この関数のEXCUTE権限は他のユーザに付与することができます）。
      </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_reset_single_function_counters</function>(oid)</literal><indexterm><primary>pg_stat_reset_single_function_counters</primary></indexterm></entry>
      <entry><type>void</type></entry>
      <entry>
<!--
       Reset statistics for a single function in the current database to
       zero (requires superuser privileges by default, but EXECUTE for this
       function can be granted to others)
-->
現在のデータベース内にある、ひとつの関数の統計情報をゼロにリセットします（デフォルトでスーパーユーザ権限が必要ですが、この関数のEXCUTE権限は他のユーザに付与することができます）。
      </entry>
>>>>>>> doc_ja_12
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="monitoring-stats-functions">
  <title>Statistics Functions</title>

  <para>
   Other ways of looking at the statistics can be set up by writing
   queries that use the same underlying statistics access functions used by
   the standard views shown above.  For details such as the functions' names,
   consult the definitions of the standard views.  (For example, in
   <application>psql</application> you could issue <literal>\d+ pg_stat_activity</literal>.)
   The access functions for per-database statistics take a database OID as an
   argument to identify which database to report on.
   The per-table and per-index functions take a table or index OID.
   The functions for per-function statistics take a function OID.
   Note that only tables, indexes, and functions in the current database
   can be seen with these functions.
  </para>

  <para>
   Additional functions related to statistics collection are listed in <xref
   linkend="monitoring-stats-funcs-table"/>.
  </para>

   <table id="monitoring-stats-funcs-table">
    <title>Additional Statistics Functions</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <!-- See also the entry for this in func.sgml -->
       <entry role="func_table_entry"><para role="func_signature">
        <function>pg_backend_pid</function> ()
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the process ID of the server process attached to the current
        session.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_activity</primary>
        </indexterm>
        <function>pg_stat_get_activity</function> ( <type>integer</type> )
        <returnvalue>setof record</returnvalue>
       </para>
       <para>
        Returns a record of information about the backend with the specified
        process ID, or one record for each active backend in the system
        if <literal>NULL</literal> is specified.  The fields returned are a
        subset of those in the <structname>pg_stat_activity</structname> view.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_snapshot_timestamp</primary>
        </indexterm>
        <function>pg_stat_get_snapshot_timestamp</function> ()
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
        Returns the timestamp of the current statistics snapshot.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_clear_snapshot</primary>
        </indexterm>
        <function>pg_stat_clear_snapshot</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
        Discards the current statistics snapshot.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_reset</primary>
        </indexterm>
        <function>pg_stat_reset</function> ()
        <returnvalue>void</returnvalue>
       </para>
       <para>
        Resets all statistics counters for the current database to zero.
       </para>
       <para>
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_reset_shared</primary>
        </indexterm>
        <function>pg_stat_reset_shared</function> ( <type>text</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
        Resets some cluster-wide statistics counters to zero, depending on the
        argument.  The argument can be <literal>bgwriter</literal> to reset
        all the counters shown in
        the <structname>pg_stat_bgwriter</structname>
        view, or <literal>archiver</literal> to reset all the counters shown in
        the <structname>pg_stat_archiver</structname> view.
       </para>
       <para>
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_reset_single_table_counters</primary>
        </indexterm>
        <function>pg_stat_reset_single_table_counters</function> ( <type>oid</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
        Resets statistics for a single table or index in the current database
        to zero.
       </para>
       <para>
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_reset_single_function_counters</primary>
        </indexterm>
        <function>pg_stat_reset_single_function_counters</function> ( <type>oid</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
        Resets statistics for a single function in the current database to
        zero.
       </para>
       <para>
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_reset_slru</primary>
        </indexterm>
        <function>pg_stat_reset_slru</function> ( <type>text</type> )
        <returnvalue>void</returnvalue>
       </para>
       <para>
        Resets statistics to zero for a single SLRU cache, or for all SLRUs in
        the cluster.  If the argument is NULL, all counters shown in
        the <structname>pg_stat_slru</structname> view for all SLRU caches are
        reset.  The argument can be one of
        <literal>CommitTs</literal>,
        <literal>MultiXactMember</literal>,
        <literal>MultiXactOffset</literal>,
        <literal>Notify</literal>,
        <literal>Serial</literal>,
        <literal>Subtrans</literal>, or
        <literal>Xact</literal>
        to reset the counters for only that entry.
        If the argument is <literal>other</literal> (or indeed, any
        unrecognized name), then the counters for all other SLRU caches, such
        as extension-defined caches, are reset.
       </para>
       <para>
        This function is restricted to superusers by default, but other users
        can be granted EXECUTE to run the function.
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

  <para>
<!--
   <function>pg_stat_get_activity</function>, the underlying function of
   the <structname>pg_stat_activity</structname> view, returns a set of records
   containing all the available information about each backend process.
   Sometimes it may be more convenient to obtain just a subset of this
   information.  In such cases, an older set of per-backend statistics
   access functions can be used; these are shown in <xref
   linkend="monitoring-stats-backend-funcs-table"/>.
   These access functions use a backend ID number, which ranges from one
   to the number of currently active backends.
   The function <function>pg_stat_get_backend_idset</function> provides a
   convenient way to generate one row for each active backend for
   invoking these functions.  For example, to show the <acronym>PID</acronym>s and
   current queries of all backends:
-->
<structname>pg_stat_activity</structname>ビューの基礎となる<function>pg_stat_get_activity</function>関数は、
各バックエンドプロセスに関して利用可能な情報をすべて含むレコード集合を返します。
この情報の一部のみを入手することがより簡便である場合があるかもしれません。
このような場合、<xref linkend="monitoring-stats-backend-funcs-table"/>に示す、古めのバックエンド単位の統計情報アクセス関数を使用することができます。
これらのアクセス関数は、１から現在活動中のバックエンドの個数までの値を取る、バックエンドID番号を使用します。
<function>pg_stat_get_backend_idset</function>関数は、これらの関数を呼び出すために、活動中のバックエンド毎に１行を生成する簡便な方法を提供します。
例えば以下はすべてのバックエンドについて<acronym>PID</acronym>と現在の問い合わせを示します。

<programlisting>
SELECT pg_stat_get_backend_pid(s.backendid) AS pid,
       pg_stat_get_backend_activity(s.backendid) AS query
    FROM (SELECT pg_stat_get_backend_idset() AS backendid) AS s;
</programlisting>
  </para>

<<<<<<< HEAD
   <table id="monitoring-stats-backend-funcs-table">
    <title>Per-Backend Statistics Functions</title>
    <tgroup cols="1">
     <thead>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        Function
       </para>
       <para>
        Description
       </para></entry>
      </row>
     </thead>

     <tbody>
      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_idset</primary>
        </indexterm>
        <function>pg_stat_get_backend_idset</function> ()
        <returnvalue>setof integer</returnvalue>
       </para>
       <para>
        Returns the set of currently active backend ID numbers (from 1 to the
        number of active backends).
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_activity</primary>
        </indexterm>
        <function>pg_stat_get_backend_activity</function> ( <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Returns the text of this backend's most recent query.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_activity_start</primary>
        </indexterm>
        <function>pg_stat_get_backend_activity_start</function> ( <type>integer</type> )
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
        Returns the time when the backend's most recent query was started.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_client_addr</primary>
        </indexterm>
        <function>pg_stat_get_backend_client_addr</function> ( <type>integer</type> )
        <returnvalue>inet</returnvalue>
       </para>
       <para>
        Returns the IP address of the client connected to this backend.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_client_port</primary>
        </indexterm>
        <function>pg_stat_get_backend_client_port</function> ( <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the TCP port number that the client is using for communication.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_dbid</primary>
        </indexterm>
        <function>pg_stat_get_backend_dbid</function> ( <type>integer</type> )
        <returnvalue>oid</returnvalue>
       </para>
       <para>
        Returns the OID of the database this backend is connected to.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_pid</primary>
        </indexterm>
        <function>pg_stat_get_backend_pid</function> ( <type>integer</type> )
        <returnvalue>integer</returnvalue>
       </para>
       <para>
        Returns the process ID of this backend.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_start</primary>
        </indexterm>
        <function>pg_stat_get_backend_start</function> ( <type>integer</type> )
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
        Returns the time when this process was started.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_userid</primary>
        </indexterm>
        <function>pg_stat_get_backend_userid</function> ( <type>integer</type> )
        <returnvalue>oid</returnvalue>
       </para>
       <para>
        Returns the OID of the user logged into this backend.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_wait_event_type</primary>
        </indexterm>
        <function>pg_stat_get_backend_wait_event_type</function> ( <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Returns the wait event type name if this backend is currently waiting,
        otherwise NULL.  See <xref linkend="wait-event-table"/> for details.
       </para></entry>
      </row>

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_wait_event</primary>
        </indexterm>
        <function>pg_stat_get_backend_wait_event</function> ( <type>integer</type> )
        <returnvalue>text</returnvalue>
       </para>
       <para>
        Returns the wait event name if this backend is currently waiting,
        otherwise NULL. See <xref linkend="wait-event-activity-table"/> through
        <xref linkend="wait-event-timeout-table"/>.
       </para></entry>
      </row>
=======
  <table id="monitoring-stats-backend-funcs-table">
<!--
   <title>Per-Backend Statistics Functions</title>
-->
   <title>バックエンド単位の統計情報関数</title>

   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Function</entry>
      <entry>Return Type</entry>
      <entry>Description</entry>
-->
      <entry>関数</entry>
      <entry>戻り値の型</entry>
      <entry>説明</entry>
     </row>
    </thead>

    <tbody>

     <row>
      <entry><literal><function>pg_stat_get_backend_idset()</function></literal></entry>
      <entry><type>setof integer</type></entry>
<!--
      <entry>Set of currently active backend ID numbers (from 1 to the
       number of active backends)</entry>
-->
      <entry>現在活動中のバックエンドID番号（１から活動中のバックエンドの個数まで）を設定します。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_activity(integer)</function></literal></entry>
      <entry><type>text</type></entry>
<!--
      <entry>Text of this backend's most recent query</entry>
-->
      <entry>バックエンドが最後に行った問い合わせテキストです。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_activity_start(integer)</function></literal></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time when the most recent query was started</entry>
-->
      <entry>最後の問い合わせが開始された時刻です。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_client_addr(integer)</function></literal></entry>
      <entry><type>inet</type></entry>
<!--
      <entry>IP address of the client connected to this backend</entry>
-->
      <entry>バックエンドに接続したクライアントのIPアドレスです。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_client_port(integer)</function></literal></entry>
      <entry><type>integer</type></entry>
<!--
      <entry>TCP port number that the client is using for communication</entry>
-->
      <entry>クライアントが通信に使用しているTCPポート番号です。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_dbid(integer)</function></literal></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>OID of the database this backend is connected to</entry>
-->
      <entry>バックエンドが接続するデータベースのOIDです。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_pid(integer)</function></literal></entry>
      <entry><type>integer</type></entry>
<!--
      <entry>Process ID of this backend</entry>
-->
      <entry>バックエンドのプロセスIDです。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_start(integer)</function></literal></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time when this process was started</entry>
-->
      <entry>プロセスが開始された時刻です。</entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_userid(integer)</function></literal></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>OID of the user logged into this backend</entry>
-->
      <entry>バックエンドにログインしたユーザのOIDです。</entry>
     </row>

      <row>
       <entry><literal><function>pg_stat_get_backend_wait_event_type(integer)</function></literal></entry>
       <entry><type>text</type></entry>
<!--
        <entry>Wait event type name if backend is currently waiting, otherwise NULL.
        See <xref linkend="wait-event-table"/> for details.
-->
        <entry>
バックエンドが現在待機中であれば、待機イベント型名、さもなくばNULL。
詳細は<xref linkend="wait-event-table"/>を参照してください。
        </entry>
      </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_wait_event(integer)</function></literal></entry>
      <entry><type>text</type></entry>
<!--
       <entry>Wait event name if backend is currently waiting, otherwise NULL.
       See <xref linkend="wait-event-table"/> for details.
       </entry>
-->
       <entry>
バックエンドが現在待機中であれば、待機イベント名、さもなくばNULL。
詳細は<xref linkend="wait-event-table"/>を参照してください。
       </entry>
     </row>

     <row>
      <entry><literal><function>pg_stat_get_backend_xact_start(integer)</function></literal></entry>
      <entry><type>timestamp with time zone</type></entry>
<!--
      <entry>Time when the current transaction was started</entry>
-->
      <entry>現在のトランザクションが開始された時刻です。</entry>
     </row>
>>>>>>> doc_ja_12

      <row>
       <entry role="func_table_entry"><para role="func_signature">
        <indexterm>
         <primary>pg_stat_get_backend_xact_start</primary>
        </indexterm>
        <function>pg_stat_get_backend_xact_start</function> ( <type>integer</type> )
        <returnvalue>timestamp with time zone</returnvalue>
       </para>
       <para>
        Returns the time when the backend's current transaction was started.
       </para></entry>
      </row>
     </tbody>
    </tgroup>
   </table>

 </sect2>
 </sect1>

 <sect1 id="monitoring-locks">
<!--
  <title>Viewing Locks</title>
-->
<title>ロックの表示</title>

  <indexterm zone="monitoring-locks">
<!--
   <primary>lock</primary>
   <secondary>monitoring</secondary>
-->
   <primary>ロック</primary>
   <secondary>監視</secondary>
  </indexterm>

  <para>
<!--
   Another useful tool for monitoring database activity is the
   <structname>pg_locks</structname> system table.  It allows the
   database administrator to view information about the outstanding
   locks in the lock manager. For example, this capability can be used
   to:
-->
この他に、データベース活動状況の監視に役立つツールとして<literal>pg_locks</literal>システムテーブルがあります。これにより、データベース管理者はロックマネージャ内の未解決のロックに関する情報を参照することができます。例えば、この機能を使用すると以下のことができます。

   <itemizedlist>
    <listitem>
     <para>
<!--
      View all the locks currently outstanding, all the locks on
      relations in a particular database, all the locks on a
      particular relation, or all the locks held by a particular
      <productname>PostgreSQL</productname> session.
-->
現在未解決のロック、特定データベース内のリレーション上のロック、特定のリレーションのロック、または特定の<productname>PostgreSQL</productname>セッションが保持するロックを全て表示する。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Determine the relation in the current database with the most
      ungranted locks (which might be a source of contention among
      database clients).
-->
最も許可されにくいロック（データベースクライアント間で競合の原因になる可能性がある）を持つ、現在のデータベースにおけるリレーションを表示する。
     </para>
    </listitem>

    <listitem>
     <para>
<!--
      Determine the effect of lock contention on overall database
      performance, as well as the extent to which contention varies
      with overall database traffic.
-->
競合によって変動するデータベースの全トラフィックの範囲に加えて、全体的なデータベースの性能に対するロック競合の影響を判断する。
     </para>
    </listitem>
   </itemizedlist>

<!--
   Details of the <structname>pg_locks</structname> view appear in
   <xref linkend="view-pg-locks"/>.
   For more information on locking and managing concurrency with
   <productname>PostgreSQL</productname>, refer to <xref linkend="mvcc"/>.
-->
<structname>pg_locks</structname>ビューの詳細は、<xref linkend="view-pg-locks"/>にあります。
<productname>PostgreSQL</productname>のロックと同時実行性についての詳細は、<xref linkend="mvcc"/>を参照してください。
  </para>
 </sect1>

 <sect1 id="progress-reporting">
<!--
  <title>Progress Reporting</title>
-->
  <title>進捗状況のレポート</title>

  <para>
<!--
   <productname>PostgreSQL</productname> has the ability to report the progress of
   certain commands during command execution.  Currently, the only commands
<<<<<<< HEAD
   which support progress reporting are <command>ANALYZE</command>,
   <command>CLUSTER</command>,
   <command>CREATE INDEX</command>, <command>VACUUM</command>,
   and <xref linkend="protocol-replication-base-backup"/> (i.e., replication
   command that <xref linkend="app-pgbasebackup"/> issues to take
   a base backup).
   This may be expanded in the future.
  </para>

 <sect2 id="analyze-progress-reporting">
  <title>ANALYZE Progress Reporting</title>

  <para>
   Whenever <command>ANALYZE</command> is running, the
   <structname>pg_stat_progress_analyze</structname> view will contain a
   row for each backend that is currently running that command.  The tables
   below describe the information that will be reported and provide
   information about how to interpret it.
=======
   which support progress reporting are <command>CREATE INDEX</command>,
   <command>VACUUM</command> and
   <command>CLUSTER</command>. This may be expanded in the future.
-->
<productname>PostgreSQL</productname>は、何らかのコマンドの実行中に進捗状況をレポートする能力があります。
現在、進捗状況のレポートをサポートしているのは、<command>CREATE INDEX</command>、<command>VACUUM</command>、および、<command>CLUSTER</command>のみです。
将来的にサポートされるコマンドが拡大される可能性があります。
>>>>>>> doc_ja_12
  </para>

  <table id="pg-stat-progress-analyze-view" xreflabel="pg_stat_progress_analyze">
   <title><structname>pg_stat_progress_analyze</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of backend.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the database to which this backend is connected.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of the database to which this backend is connected.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the table being analyzed.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>phase</structfield> <type>text</type>
      </para>
      <para>
       Current processing phase. See <xref linkend="analyze-phases"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sample_blks_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of heap blocks that will be sampled.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>sample_blks_scanned</structfield> <type>bigint</type>
      </para>
      <para>
       Number of heap blocks scanned.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ext_stats_total</structfield> <type>bigint</type>
      </para>
      <para>
       Number of extended statistics.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>ext_stats_computed</structfield> <type>bigint</type>
      </para>
      <para>
       Number of extended statistics computed. This counter only advances
       when the phase is <literal>computing extended statistics</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>child_tables_total</structfield> <type>bigint</type>
      </para>
      <para>
       Number of child tables.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>child_tables_done</structfield> <type>bigint</type>
      </para>
      <para>
       Number of child tables scanned. This counter only advances when the
       phase is <literal>acquiring inherited sample rows</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>current_child_table_relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the child table currently being scanned. This field is
       only valid when the phase is
       <literal>acquiring inherited sample rows</literal>.
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="analyze-phases">
   <title>ANALYZE phases</title>
   <tgroup cols="2">
    <colspec colname="col1" colwidth="1*"/>
    <colspec colname="col2" colwidth="2*"/>
    <thead>
     <row>
      <entry>Phase</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>initializing</literal></entry>
      <entry>
       The command is preparing to begin scanning the heap.  This phase is
       expected to be very brief.
      </entry>
     </row>
     <row>
      <entry><literal>acquiring sample rows</literal></entry>
      <entry>
       The command is currently scanning the table given by
       <structfield>relid</structfield> to obtain sample rows.
      </entry>
     </row>
     <row>
      <entry><literal>acquiring inherited sample rows</literal></entry>
      <entry>
       The command is currently scanning child tables to obtain sample rows.
       Columns <structfield>child_tables_total</structfield>,
       <structfield>child_tables_done</structfield>, and
       <structfield>current_child_table_relid</structfield> contain the
       progress information for this phase.
      </entry>
     </row>
     <row>
      <entry><literal>computing statistics</literal></entry>
      <entry>
       The command is computing statistics from the sample rows obtained
       during the table scan.
      </entry>
     </row>
     <row>
      <entry><literal>computing extended statistics</literal></entry>
      <entry>
       The command is computing extended statistics from the sample rows
       obtained during the table scan.
      </entry>
     </row>
     <row>
      <entry><literal>finalizing analyze</literal></entry>
      <entry>
       The command is updating <structname>pg_class</structname>. When this
       phase is completed, <command>ANALYZE</command> will end.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <note>
   <para>
    Note that when <command>ANALYZE</command> is run on a partitioned table,
    all of its partitions are also recursively analyzed as also mentioned in
    <xref linkend="sql-analyze"/>.  In that case, <command>ANALYZE</command>
    progress is reported first for the parent table, whereby its inheritance
    statistics are collected, followed by that for each partition.
   </para>
  </note>
 </sect2>

 <sect2 id="create-index-progress-reporting">
<!--
  <title>CREATE INDEX Progress Reporting</title>
-->
  <title>CREATE INDEX進捗状況のレポート</title>

  <para>
<!--
   Whenever <command>CREATE INDEX</command> or <command>REINDEX</command> is running, the
   <structname>pg_stat_progress_create_index</structname> view will contain
   one row for each backend that is currently creating indexes.  The tables
   below describe the information that will be reported and provide information
   about how to interpret it.
-->
<command>CREATE INDEX</command>や<command>REINDEX</command>が実行中であるときにはいつでも、<structname>pg_stat_progress_create_index</structname>ビューには現在インデックスを作成している各バックエンドごとの行が含まれます。
  </para>

  <table id="pg-stat-progress-create-index-view" xreflabel="pg_stat_progress_create_index">
<!--
   <title><structname>pg_stat_progress_create_index</structname> View</title>
<<<<<<< HEAD
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
=======
-->
   <title><structname>pg_stat_progress_create_index</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
     <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
>>>>>>> doc_ja_12
     </row>
    </thead>

    <tbody>
     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of backend.
      </para></entry>
=======
      <entry><structfield>pid</structfield></entry>
      <entry><type>integer</type></entry>
<!--
      <entry>Process ID of backend.</entry>
-->
      <entry>バックエンドのプロセスID。</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the database to which this backend is connected.
      </para></entry>
=======
      <entry><structfield>datid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>OID of the database to which this backend is connected.</entry>
-->
      <entry>このバックエンドが接続されているデータベースのOID。</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of the database to which this backend is connected.
      </para></entry>
=======
      <entry><structfield>datname</structfield></entry>
      <entry><type>name</type></entry>
<!--
      <entry>Name of the database to which this backend is connected.</entry>
-->
      <entry>このバックエンドが接続されているデータベース名。</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the table on which the index is being created.
      </para></entry>
=======
      <entry><structfield>relid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>OID of the table on which the index is being created.</entry>
-->
      <entry>インデックスが作られているテーブルのOID。</entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>index_relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the index being created or reindexed.  During a
       non-concurrent <command>CREATE INDEX</command>, this is 0.
      </para></entry>
=======
      <entry><structfield>index_relid</structfield></entry>
      <entry><type>oid</type></entry>
<!--
      <entry>OID of the index being created or reindexed.  During a
      non-concurrent <command>CREATE INDEX</command>, this is 0.</entry>
-->
      <entry>
作成または再作成されているインデックスのOID。
同時作成ではない<command>CREATE INDEX</command>のときは、これは0です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>command</structfield> <type>text</type>
      </para>
      <para>
       The command that is running: <literal>CREATE INDEX</literal>,
       <literal>CREATE INDEX CONCURRENTLY</literal>,
       <literal>REINDEX</literal>, or <literal>REINDEX CONCURRENTLY</literal>.
      </para></entry>
=======
      <entry><structfield>command</structfield></entry>
      <entry><type>text</type></entry>
      <entry>
<!--
       The command that is running: <literal>CREATE INDEX</literal>,
       <literal>CREATE INDEX CONCURRENTLY</literal>,
       <literal>REINDEX</literal>, or <literal>REINDEX CONCURRENTLY</literal>.
-->
実行しているコマンドで、
<literal>CREATE INDEX</literal>、
<literal>CREATE INDEX CONCURRENTLY</literal>、
<literal>REINDEX</literal>または<literal>REINDEX CONCURRENTLY</literal>です。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>phase</structfield> <type>text</type>
      </para>
      <para>
       Current processing phase of index creation.  See <xref linkend="create-index-phases"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lockers_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of lockers to wait for, when applicable.
      </para></entry>
=======
      <entry><structfield>phase</structfield></entry>
      <entry><type>text</type></entry>
      <entry>
<!--
        Current processing phase of index creation.  See <xref linkend='create-index-phases'/>.
-->
現在処理中のインデックス作成のフェーズです。
<xref linkend='create-index-phases'/>を参照してください。
      </entry>
     </row>
     <row>
      <entry><structfield>lockers_total</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Total number of lockers to wait for, when applicable.
-->
該当するときに、待機するロック取得者の総数。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>lockers_done</structfield> <type>bigint</type>
      </para>
      <para>
       Number of lockers already waited for.
      </para></entry>
=======
      <entry><structfield>lockers_done</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Number of lockers already waited for.
-->
既に待機したロック取得者の数。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>current_locker_pid</structfield> <type>bigint</type>
      </para>
      <para>
       Process ID of the locker currently being waited for.
      </para></entry>
=======
      <entry><structfield>current_locker_pid</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Process ID of the locker currently being waited for.
-->
現在待機しているロック取得者のプロセスID。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blocks_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of blocks to be processed in the current phase.
      </para></entry>
=======
      <entry><structfield>blocks_total</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Total number of blocks to be processed in the current phase.
-->
現在のフェーズで処理されることになっているブロックの総数。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>blocks_done</structfield> <type>bigint</type>
      </para>
      <para>
       Number of blocks already processed in the current phase.
      </para></entry>
=======
      <entry><structfield>blocks_done</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Number of blocks already processed in the current phase.
-->
現在のフェーズで既に処理されたブロック数。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tuples_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of tuples to be processed in the current phase.
      </para></entry>
=======
      <entry><structfield>tuples_total</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Total number of tuples to be processed in the current phase.
-->
現在のフェーズで処理されることになっているタプルの総数。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tuples_done</structfield> <type>bigint</type>
      </para>
      <para>
       Number of tuples already processed in the current phase.
      </para></entry>
=======
      <entry><structfield>tuples_done</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
        Number of tuples already processed in the current phase.
-->
現在のフェーズで既に処理されたタプル数。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>partitions_total</structfield> <type>bigint</type>
      </para>
      <para>
       When creating an index on a partitioned table, this column is set to
       the total number of partitions on which the index is to be created.
      </para></entry>
=======
      <entry><structfield>partitions_total</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
       When creating an index on a partitioned table, this column is set to
       the total number of partitions on which the index is to be created.
-->
パーティションテーブル上のインデックスを作成するとき、この列にはインデックスが作られることになっているパーティションの総数が設定されます。
      </entry>
>>>>>>> doc_ja_12
     </row>

     <row>
<<<<<<< HEAD
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>partitions_done</structfield> <type>bigint</type>
      </para>
      <para>
       When creating an index on a partitioned table, this column is set to
       the number of partitions on which the index has been completed.
      </para></entry>
=======
      <entry><structfield>partitions_done</structfield></entry>
      <entry><type>bigint</type></entry>
      <entry>
<!--
       When creating an index on a partitioned table, this column is set to
       the number of partitions on which the index has been completed.
-->
パーティションテーブル上のインデックスを作成するとき、この列にはインデックス作成が既に完了しているパーティションの数が設定されます。
      </entry>
>>>>>>> doc_ja_12
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="create-index-phases">
   <title>CREATE INDEX Phases</title>
<<<<<<< HEAD
=======
<!--
   <title>CREATE INDEX のフェーズ</title>
-->
>>>>>>> doc_ja_12
   <tgroup cols="2">
    <colspec colname="col1" colwidth="1*"/>
    <colspec colname="col2" colwidth="2*"/>
    <thead>
     <row>
<!--
      <entry>Phase</entry>
      <entry>Description</entry>
-->
      <entry>フェーズ</entry>
      <entry>説明</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>initializing</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX</command> or <command>REINDEX</command> is preparing to create the index.  This
       phase is expected to be very brief.
-->
<command>CREATE INDEX</command>や<command>REINDEX</command>はインデックスを作る準備をしています。
このフェーズはごく短時間になると予想されます。
      </entry>
     </row>
     <row>
      <entry><literal>waiting for writers before build</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX CONCURRENTLY</command> or <command>REINDEX CONCURRENTLY</command> is waiting for transactions
       with write locks that can potentially see the table to finish.
       This phase is skipped when not in concurrent mode.
       Columns <structname>lockers_total</structname>, <structname>lockers_done</structname>
       and <structname>current_locker_pid</structname> contain the progress
       information for this phase.
-->
<command>CREATE INDEX CONCURRENTLY</command>や<command>REINDEX CONCURRENTLY</command>は、潜在的にテーブルを参照するかもしれない書き込みロックを伴うトランザクションが終了するのを待機しています。
本フェーズは同時モードでないときには省かれます。
列<structname>lockers_total</structname>、<structname>lockers_done</structname>、および、<structname>current_locker_pid</structname>には本フェーズの進行情報が入ります。
      </entry>
     </row>
     <row>
      <entry><literal>building index</literal></entry>
      <entry>
<!--
       The index is being built by the access method-specific code.  In this phase,
       access methods that support progress reporting fill in their own progress data,
       and the subphase is indicated in this column.  Typically,
       <structname>blocks_total</structname> and <structname>blocks_done</structname>
       will contain progress data, as well as potentially
       <structname>tuples_total</structname> and <structname>tuples_done</structname>.
-->
インデックスがアクセスメソッド固有のコードにより作成されています。
本フェーズでは、進捗レポートをサポートするアクセスメソッドが自身の進捗データを記入し、また、サブフェーズはこの列で示されます。
典型的には、<structname>blocks_total</structname>と<structname>blocks_done</structname>が、さらにあるいは<structname>tuples_total</structname>と<structname>tuples_done</structname>も、進捗データを含みます。
      </entry>
     </row>
     <row>
      <entry><literal>waiting for writers before validation</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX CONCURRENTLY</command> or <command>REINDEX CONCURRENTLY</command> is waiting for transactions
       with write locks that can potentially write into the table to finish.
       This phase is skipped when not in concurrent mode.
       Columns <structname>lockers_total</structname>, <structname>lockers_done</structname>
       and <structname>current_locker_pid</structname> contain the progress
       information for this phase.
-->
<command>CREATE INDEX CONCURRENTLY</command>や<command>REINDEX CONCURRENTLY</command>は、潜在的にテーブルに書き込みするかもしれない書き込みロックを伴うトランザクションが終了するのを待機しています。
本フェーズは同時モードでないときには省かれます。
列<structname>lockers_total</structname>、<structname>lockers_done</structname>、および、<structname>current_locker_pid</structname>には本フェーズの進行情報が入ります。
      </entry>
     </row>
     <row>
      <entry><literal>index validation: scanning index</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX CONCURRENTLY</command> is scanning the index searching
       for tuples that need to be validated.
       This phase is skipped when not in concurrent mode.
       Columns <structname>blocks_total</structname> (set to the total size of the index)
       and <structname>blocks_done</structname> contain the progress information for this phase.
-->
<command>CREATE INDEX CONCURRENTLY</command>は確認が必要なタプルに対するインデックス検索をスキャンしています。
本フェーズは同時モードでないときには省かれます。
列<structname>blocks_total</structname>（インデックスの総サイズが設定される）と<structname>blocks_done</structname>に本フェーズの進行情報が入ります。
      </entry>
     </row>
     <row>
      <entry><literal>index validation: sorting tuples</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX CONCURRENTLY</command> is sorting the output of the
       index scanning phase.
-->
<command>CREATE INDEX CONCURRENTLY</command>はインデックスをスキャンするフェーズ(scanning index)の出力をソートしています。
      </entry>
     </row>
     <row>
      <entry><literal>index validation: scanning table</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX CONCURRENTLY</command> is scanning the table
       to validate the index tuples collected in the previous two phases.
       This phase is skipped when not in concurrent mode.
       Columns <structname>blocks_total</structname> (set to the total size of the table)
       and <structname>blocks_done</structname> contain the progress information for this phase.
-->
<command>CREATE INDEX CONCURRENTLY</command>は、前の2フェーズで収集されたインデックスのタプルを確認するためテーブルをスキャンしています。
本フェーズは同時モードでないときには省かれます。
列<structname>blocks_total</structname>（テーブルの総サイズが設定される）と<structname>blocks_done</structname>に本フェーズの進行情報が入ります。
      </entry>
     </row>
     <row>
      <entry><literal>waiting for old snapshots</literal></entry>
      <entry>
<!--
       <command>CREATE INDEX CONCURRENTLY</command> or <command>REINDEX CONCURRENTLY</command> is waiting for transactions
       that can potentially see the table to release their snapshots.  This
       phase is skipped when not in concurrent mode.
       Columns <structname>lockers_total</structname>, <structname>lockers_done</structname>
       and <structname>current_locker_pid</structname> contain the progress
       information for this phase.
-->
<command>CREATE INDEX CONCURRENTLY</command>や<command>REINDEX CONCURRENTLY</command>は、潜在的にテーブルを参照するかもしれないトランザクションがそれらのスナップショットを解放するのを待機しています。
本フェーズは同時モードでないときには省かれます。
列<structname>lockers_total</structname>、<structname>lockers_done</structname>、および、<structname>current_locker_pid</structname>には本フェーズの進行情報が入ります。
      </entry>
     </row>
     <row>
      <entry><literal>waiting for readers before marking dead</literal></entry>
      <entry>
<!--
       <command>REINDEX CONCURRENTLY</command> is waiting for transactions
       with read locks on the table to finish, before marking the old index dead.
       This phase is skipped when not in concurrent mode.
       Columns <structname>lockers_total</structname>, <structname>lockers_done</structname>
       and <structname>current_locker_pid</structname> contain the progress
       information for this phase.
-->
<command>REINDEX CONCURRENTLY</command>は、古いインデックスに無効と印付けする前に、テーブルへの読み取りロックを伴うトランザクションが終了するのを待機しています。
本フェーズは同時モードでないときには省かれます。
列<structname>lockers_total</structname>、<structname>lockers_done</structname>、および、<structname>current_locker_pid</structname>には本フェーズの進行情報が入ります。
      </entry>
     </row>
     <row>
      <entry><literal>waiting for readers before dropping</literal></entry>
      <entry>
<!--
       <command>REINDEX CONCURRENTLY</command> is waiting for transactions
       with read locks on the table to finish, before dropping the old index.
       This phase is skipped when not in concurrent mode.
       Columns <structname>lockers_total</structname>, <structname>lockers_done</structname>
       and <structname>current_locker_pid</structname> contain the progress
       information for this phase.
-->
<command>REINDEX CONCURRENTLY</command>は、古いインデックスを削除する前に、テーブルへの読み取りロックを伴うトランザクションが終了するのを待機しています。
本フェーズは同時モードでないときには省かれます。
列<structname>lockers_total</structname>、<structname>lockers_done</structname>、および、<structname>current_locker_pid</structname>には本フェーズの進行情報が入ります。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="vacuum-progress-reporting">
<!--
  <title>VACUUM Progress Reporting</title>
-->
  <title>VACUUM進捗状況のレポート</title>

  <para>
<!--
   Whenever <command>VACUUM</command> is running, the
   <structname>pg_stat_progress_vacuum</structname> view will contain
   one row for each backend (including autovacuum worker processes) that is
   currently vacuuming.  The tables below describe the information
   that will be reported and provide information about how to interpret it.
   Progress for <command>VACUUM FULL</command> commands is reported via
   <structname>pg_stat_progress_cluster</structname>
   because both <command>VACUUM FULL</command> and <command>CLUSTER</command>
   rewrite the table, while regular <command>VACUUM</command> only modifies it
   in place. See <xref linkend='cluster-progress-reporting'/>.
-->
<command>VACUUM</command>を実行するときはいつでも、<structname>pg_stat_progress_vacuum</structname>ビューは、現在バキューム処理している（自動バキュームワーカプロセスを含む）それぞれのバックエンドごとに１行を格納します。
その情報を説明している以下のテーブルにおいて、何がレポートされ、どのように解釈するかについての情報を提供します。
<command>VACUUM FULL</command>コマンドの進捗は<structname>pg_stat_progress_cluster</structname>でレポートされます。これは、通常の<command>VACUUM</command>はテーブル内を書き換えするのみである一方、<command>VACUUM FULL</command>と<command>CLUSTER</command>はいずれもテーブルを再作成するためです。
<xref linkend='cluster-progress-reporting'/>を参照してください。
  </para>

  <table id="pg-stat-progress-vacuum-view" xreflabel="pg_stat_progress_vacuum">
<!--
   <title><structname>pg_stat_progress_vacuum</structname> View</title>
<<<<<<< HEAD
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of backend.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the database to which this backend is connected.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of the database to which this backend is connected.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the table being vacuumed.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>phase</structfield> <type>text</type>
      </para>
      <para>
       Current processing phase of vacuum.  See <xref linkend="vacuum-phases"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of heap blocks in the table.  This number is reported
       as of the beginning of the scan; blocks added later will not be (and
       need not be) visited by this <command>VACUUM</command>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_scanned</structfield> <type>bigint</type>
      </para>
      <para>
=======
-->
   <title><structname>pg_stat_progress_vacuum</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of backend.</entry>
-->
     <entry>バックエンドのプロセスID。</entry>
    </row>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the database to which this backend is connected.</entry>
-->
     <entry>このバックエンドが接続されたデータベースのOID。</entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the database to which this backend is connected.</entry>
-->
     <entry>このバックエンドが接続されたデータベース名。</entry>
    </row>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the table being vacuumed.</entry>
-->
     <entry>バキューム処理が行われているテーブルのOID。</entry>
    </row>
    <row>
     <entry><structfield>phase</structfield></entry>
     <entry><type>text</type></entry>
     <entry>
<!--
       Current processing phase of vacuum.  See <xref linkend='vacuum-phases'/>.
-->
現在のバキュームの処理フェーズ。<xref linkend='vacuum-phases'/>を参照してください。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_blks_total</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
       Total number of heap blocks in the table.  This number is reported
       as of the beginning of the scan; blocks added later will not be (and
       need not be) visited by this <command>VACUUM</command>.
-->
テーブルのヒープブロックの総数。
この数字は、スキャンの開始を基点としてレポートされます。
後に追加されるブロックは、この<command>VACUUM</command>によって処理されません（必要もありません）。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_blks_scanned</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
>>>>>>> doc_ja_12
       Number of heap blocks scanned.  Because the
       <link linkend="storage-vm">visibility map</link> is used to optimize scans,
       some blocks will be skipped without inspection; skipped blocks are
       included in this total, so that this number will eventually become
       equal to <structfield>heap_blks_total</structfield> when the vacuum is complete.
       This counter only advances when the phase is <literal>scanning heap</literal>.
<<<<<<< HEAD
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_vacuumed</structfield> <type>bigint</type>
      </para>
      <para>
=======
-->
スキャンされたヒープブロックの数。
<link linkend="storage-vm">可視性マップ</link>がスキャンを最適化するために使用されるため、いくつかのブロックが検査されずに読み飛ばされます。
読み飛ばされたブロックはこの総数に含まれ、そのためこの数字はバキューム処理が完了した時に、最終的に<structfield>heap_blks_total</structfield>と同じになります。
このカウンタは、フェーズが<literal>scanning heap</literal>の時にのみ増加します。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_blks_vacuumed</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
>>>>>>> doc_ja_12
       Number of heap blocks vacuumed.  Unless the table has no indexes, this
       counter only advances when the phase is <literal>vacuuming heap</literal>.
       Blocks that contain no dead tuples are skipped, so the counter may
       sometimes skip forward in large increments.
<<<<<<< HEAD
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>index_vacuum_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of completed index vacuum cycles.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>max_dead_tuples</structfield> <type>bigint</type>
      </para>
      <para>
       Number of dead tuples that we can store before needing to perform
       an index vacuum cycle, based on
       <xref linkend="guc-maintenance-work-mem"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>num_dead_tuples</structfield> <type>bigint</type>
      </para>
      <para>
       Number of dead tuples collected since the last index vacuum cycle.
      </para></entry>
     </row>
    </tbody>
=======
-->
バキューム処理されたヒープブロックの数。
テーブルにインデックスが１つでも存在するなら、このカウンタはフェーズが<literal>vacuuming heap</literal>の時にのみ増加します。
無効なタプルが含まれていないブロックは読み飛ばされ、それゆえカウンタは時々大きな増加量で早送りされます。
     </entry>
    </row>
    <row>
     <entry><structfield>index_vacuum_count</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
       Number of completed index vacuum cycles.
-->
完了したインデックスバキュームサイクルの数。
     </entry>
    </row>
    <row>
     <entry><structfield>max_dead_tuples</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
      Number of dead tuples that we can store before needing to perform
      an index vacuum cycle, based on
      <xref linkend="guc-maintenance-work-mem"/>.
-->
インデックスバキュームサイクルの実行に必要となる前に格納することが出来る、<xref linkend="guc-maintenance-work-mem"/>に基づいた、無効なタプルの数。
     </entry>
    </row>
    <row>
     <entry><structfield>num_dead_tuples</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
       Number of dead tuples collected since the last index vacuum cycle.
-->
最後のインデックスバキュームサイクルから収集された無効タプルの数。
     </entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

  <table id="vacuum-phases">
<<<<<<< HEAD
   <title>VACUUM Phases</title>
=======
<!--
   <title>VACUUM Phases</title>
-->
   <title>VACUUMのフェーズ</title>
>>>>>>> doc_ja_12
   <tgroup cols="2">
    <colspec colname="col1" colwidth="1*"/>
    <colspec colname="col2" colwidth="2*"/>
    <thead>
    <row>
<!--
      <entry>Phase</entry>
      <entry>Description</entry>
-->
      <entry>フェーズ</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><literal>initializing</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is preparing to begin scanning the heap.  This
       phase is expected to be very brief.
-->
<command>VACUUM</command>は、ヒープをスキャンし始める準備をしています。
このフェーズは、非常に短時間であると予想されます。
     </entry>
    </row>
    <row>
     <entry><literal>scanning heap</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is currently scanning the heap.  It will prune and
       defragment each page if required, and possibly perform freezing
       activity.  The <structfield>heap_blks_scanned</structfield> column can be used
       to monitor the progress of the scan.
-->
<command>VACUUM</command>は、現在ヒープをスキャン中です。
必要であればそれぞれのページを切り取り、デフラグし、場合によってはフリーズ活動を実行します。
スキャンの進捗状況の監視に<structfield>heap_blks_scanned</structfield>列が使用できます。
     </entry>
    </row>
    <row>
     <entry><literal>vacuuming indexes</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is currently vacuuming the indexes.  If a table has
       any indexes, this will happen at least once per vacuum, after the heap
       has been completely scanned.  It may happen multiple times per vacuum
       if <xref linkend="guc-maintenance-work-mem"/> is insufficient to
       store the number of dead tuples found.
-->
<command>VACUUM</command>は、現在インデックスをバキューム処理中です。
テーブルにインデックスが存在する場合、ヒープが完全にスキャンされた後に、バキューム実行ごとに少なくとも１回発生します。
<xref linkend="guc-maintenance-work-mem"/>が、発見された無効タプルの数量を格納するのに不十分な場合は、バキューム実行ごとに複数回発生する可能性があります。
     </entry>
    </row>
    <row>
     <entry><literal>vacuuming heap</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is currently vacuuming the heap.  Vacuuming the heap
       is distinct from scanning the heap, and occurs after each instance of
       vacuuming indexes.  If <structfield>heap_blks_scanned</structfield> is less than
       <structfield>heap_blks_total</structfield>, the system will return to scanning
       the heap after this phase is completed; otherwise, it will begin
       cleaning up indexes after this phase is completed.
-->
<command>VACUUM</command>は、現在ヒープをバキューム処理中です。
ヒープのバキュームは、ヒープのスキャンと異なり、インデックスをバキューム処理するそれぞれのインスタンスの後に発生します。
<structfield>heap_blks_scanned</structfield>が<structfield>heap_blks_total</structfield>より少ない場合、システムはこのフェーズの完了後にヒープのスキャン処理に戻ります。
さもなければ、このフェーズの完了後にインデックスの整理を始めます。
     </entry>
    </row>
    <row>
     <entry><literal>cleaning up indexes</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is currently cleaning up indexes.  This occurs after
       the heap has been completely scanned and all vacuuming of the indexes
       and the heap has been completed.
-->
<command>VACUUM</command>は、現在インデックスの整理処理中です。
これは、ヒープが完全にスキャンされ、インデックスとヒープが完全にすべてバキューム処理された後に発生します。
     </entry>
    </row>
    <row>
     <entry><literal>truncating heap</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is currently truncating the heap so as to return
       empty pages at the end of the relation to the operating system.  This
       occurs after cleaning up indexes.
-->
<command>VACUUM</command>は、現在リレーションの終点の空のページをオペレーティングシステムに戻すためにヒープを削除しています。
これは、インデックスの整理処理後に発生します。
     </entry>
    </row>
    <row>
     <entry><literal>performing final cleanup</literal></entry>
     <entry>
<!--
       <command>VACUUM</command> is performing final cleanup.  During this phase,
       <command>VACUUM</command> will vacuum the free space map, update statistics
       in <literal>pg_class</literal>, and report statistics to the statistics
       collector.  When this phase is completed, <command>VACUUM</command> will end.
-->
<command>VACUUM</command>は、最終クリーンアップ処理をしています。
このフェーズの間、<command>VACUUM</command>空き領域マップをバキュームし、<literal>pg_class</literal>の統計情報を更新し、統計情報コレクタに統計情報を報告します。
このフェーズが完了した時、<command>VACUUM</command>は終了します。
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>

 </sect2>

 <sect2 id="cluster-progress-reporting">
<!--
  <title>CLUSTER Progress Reporting</title>
-->
  <title>CLUSTER進捗状況のレポート</title>

  <para>
<!--
   Whenever <command>CLUSTER</command> or <command>VACUUM FULL</command> is
   running, the <structname>pg_stat_progress_cluster</structname> view will
   contain a row for each backend that is currently running either command.
   The tables below describe the information that will be reported and
   provide information about how to interpret it.
-->
<command>CLUSTER</command>や<command>VACUUM FULL</command>が実行されているときにはいつでも、<structname>pg_stat_progress_cluster</structname>ビューには現在いずれかのコマンドを実行している各バックエンドごとの行が含まれます。
以下の表は、報告される情報を説明し、どのように解釈するかの情報を提供します。
  </para>

  <table id="pg-stat-progress-cluster-view" xreflabel="pg_stat_progress_cluster">
<!--
   <title><structname>pg_stat_progress_cluster</structname> View</title>
<<<<<<< HEAD
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of backend.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the database to which this backend is connected.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>datname</structfield> <type>name</type>
      </para>
      <para>
       Name of the database to which this backend is connected.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>relid</structfield> <type>oid</type>
      </para>
      <para>
       OID of the table being clustered.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>command</structfield> <type>text</type>
      </para>
      <para>
       The command that is running. Either <literal>CLUSTER</literal> or <literal>VACUUM FULL</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>phase</structfield> <type>text</type>
      </para>
      <para>
       Current processing phase. See <xref linkend="cluster-phases"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>cluster_index_relid</structfield> <type>oid</type>
      </para>
      <para>
       If the table is being scanned using an index, this is the OID of the
       index being used; otherwise, it is zero.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_tuples_scanned</structfield> <type>bigint</type>
      </para>
      <para>
=======
-->
   <title><structname>pg_stat_progress_cluster</structname>ビュー</title>
   <tgroup cols="3">
    <thead>
    <row>
<!--
      <entry>Column</entry>
      <entry>Type</entry>
      <entry>Description</entry>
-->
      <entry>列</entry>
      <entry>型</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><structfield>pid</structfield></entry>
     <entry><type>integer</type></entry>
<!--
     <entry>Process ID of backend.</entry>
-->
     <entry>バックエンドのプロセスID。</entry>
    </row>
    <row>
     <entry><structfield>datid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the database to which this backend is connected.</entry>
-->
     <entry>バックエンドが接続されているデータベースのOID。</entry>
    </row>
    <row>
     <entry><structfield>datname</structfield></entry>
     <entry><type>name</type></entry>
<!--
     <entry>Name of the database to which this backend is connected.</entry>
-->
     <entry>バックエンドが接続されているデータベース名。</entry>
    </row>
    <row>
     <entry><structfield>relid</structfield></entry>
     <entry><type>oid</type></entry>
<!--
     <entry>OID of the table being clustered.</entry>
-->
     <entry>クラスタ化されているテーブルのOID。</entry>
    </row>
    <row>
     <entry><structfield>command</structfield></entry>
     <entry><type>text</type></entry>
     <entry>
<!--
      The command that is running. Either <literal>CLUSTER</literal> or <literal>VACUUM FULL</literal>.
-->
実行しているコマンド。
<literal>CLUSTER</literal>か<literal>VACUUM FULL</literal>のいずれかです。
     </entry>
    </row>
    <row>
     <entry><structfield>phase</structfield></entry>
     <entry><type>text</type></entry>
     <entry>
<!--
       Current processing phase. See <xref linkend='cluster-phases' />.
-->
現在処理中のフェーズ。
<xref linkend='cluster-phases' />を参照してください。
     </entry>
    </row>
    <row>
     <entry><structfield>cluster_index_relid</structfield></entry>
     <entry><type>oid</type></entry>
     <entry>
<!--
       If the table is being scanned using an index, this is the OID of the
       index being used; otherwise, it is zero.
-->
テーブルがインデックスを使ってスキャンされているのであれば、これは使われているインデックスのOIDで、さもなくばゼロです。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_tuples_scanned</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
>>>>>>> doc_ja_12
       Number of heap tuples scanned.
       This counter only advances when the phase is
       <literal>seq scanning heap</literal>,
       <literal>index scanning heap</literal>
       or <literal>writing new heap</literal>.
<<<<<<< HEAD
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_tuples_written</structfield> <type>bigint</type>
      </para>
      <para>
=======
-->
スキャンされたヒープタプルの数。
このカウンタは、フェーズが<literal>seq scanning heap</literal>、<literal>index scanning heap</literal>、または、<literal>writing new heap</literal>であるときのみ前進します。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_tuples_written</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
>>>>>>> doc_ja_12
       Number of heap tuples written.
       This counter only advances when the phase is
       <literal>seq scanning heap</literal>,
       <literal>index scanning heap</literal>
       or <literal>writing new heap</literal>.
<<<<<<< HEAD
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of heap blocks in the table.  This number is reported
       as of the beginning of <literal>seq scanning heap</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>heap_blks_scanned</structfield> <type>bigint</type>
      </para>
      <para>
       Number of heap blocks scanned.  This counter only advances when the
       phase is <literal>seq scanning heap</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>index_rebuild_count</structfield> <type>bigint</type>
      </para>
      <para>
       Number of indexes rebuilt.  This counter only advances when the phase
       is <literal>rebuilding index</literal>.
      </para></entry>
     </row>
    </tbody>
=======
-->
書かれたヒープタプルの数。
このカウンタは、フェーズが<literal>seq scanning heap</literal>、<literal>index scanning heap</literal>、または、<literal>writing new heap</literal>であるときのみ前進します。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_blks_total</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
       Total number of heap blocks in the table.  This number is reported
       as of the beginning of <literal>seq scanning heap</literal>.
-->
テーブル内のヒープブロックの総数。
この数には<literal>seq scanning heap</literal>の開始時の値が報告されます。
     </entry>
    </row>
    <row>
     <entry><structfield>heap_blks_scanned</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
       Number of heap blocks scanned.  This counter only advances when the
       phase is <literal>seq scanning heap</literal>.
-->
スキャンされたヒープブロックの数。
このカウンタは、フェーズが<literal>seq scanning heap</literal>であるときのみ前進します。
     </entry>
    </row>
    <row>
     <entry><structfield>index_rebuild_count</structfield></entry>
     <entry><type>bigint</type></entry>
     <entry>
<!--
       Number of indexes rebuilt.  This counter only advances when the phase
       is <literal>rebuilding index</literal>.
-->
インデックス再作成の数。
このカウンタはフェーズが<literal>rebuilding index</literal>であるときのみ前進します。
     </entry>
    </row>
   </tbody>
>>>>>>> doc_ja_12
   </tgroup>
  </table>

  <table id="cluster-phases">
<<<<<<< HEAD
   <title>CLUSTER and VACUUM FULL Phases</title>
=======
<!--
   <title>CLUSTER and VACUUM FULL Phases</title>
-->
   <title>CLUSTERとVACUUM FULLのフェーズ</title>
>>>>>>> doc_ja_12
   <tgroup cols="2">
    <colspec colname="col1" colwidth="1*"/>
    <colspec colname="col2" colwidth="2*"/>
    <thead>
    <row>
<!--
      <entry>Phase</entry>
      <entry>Description</entry>
-->
      <entry>フェーズ</entry>
      <entry>説明</entry>
     </row>
    </thead>

   <tbody>
    <row>
     <entry><literal>initializing</literal></entry>
     <entry>
<!--
       The command is preparing to begin scanning the heap.  This phase is
       expected to be very brief.
-->
コマンドはヒープのスキャンを開始する準備をしています。
本フェーズはごく短時間になると予想されます。
     </entry>
    </row>
    <row>
     <entry><literal>seq scanning heap</literal></entry>
     <entry>
<!--
       The command is currently scanning the table using a sequential scan.
-->
コマンドは現在、テーブルをシーケンシャルスキャンを使ってスキャンしています。
     </entry>
    </row>
    <row>
     <entry><literal>index scanning heap</literal></entry>
     <entry>
<!--
       <command>CLUSTER</command> is currently scanning the table using an index scan.
-->
<command>CLUSTER</command>は現在、インデックススキャンを使ってテーブルをスキャンしています。
     </entry>
    </row>
    <row>
     <entry><literal>sorting tuples</literal></entry>
     <entry>
<!--
       <command>CLUSTER</command> is currently sorting tuples.
-->
<command>CLUSTER</command>は現在、タプルをソートしています。
     </entry>
    </row>
    <row>
     <entry><literal>writing new heap</literal></entry>
     <entry>
<!--
       <command>CLUSTER</command> is currently writing the new heap.
-->
       <command>CLUSTER</command>が新しいヒープに書き込んでいます。
     </entry>
    </row>
    <row>
     <entry><literal>writing new heap</literal></entry>
     <entry>
       <command>CLUSTER</command> is currently writing the new heap.
     </entry>
    </row>
    <row>
     <entry><literal>swapping relation files</literal></entry>
     <entry>
<!--
       The command is currently swapping newly-built files into place.
-->
コマンドは現在、新たに構築したファイルを置き換えて設置しています。
     </entry>
    </row>
    <row>
     <entry><literal>rebuilding index</literal></entry>
     <entry>
<!--
       The command is currently rebuilding an index.
-->
コマンドは現在、インデックスを再構築しています。
     </entry>
    </row>
    <row>
     <entry><literal>performing final cleanup</literal></entry>
     <entry>
<!--
       The command is performing final cleanup.  When this phase is
       completed, <command>CLUSTER</command>
       or <command>VACUUM FULL</command> will end.
-->
コマンドは現在、最終クリーンアップを実行中です。
このフェーズが完了すると、<command>CLUSTER</command>や<command>VACUUM FULL</command>は終了します。
     </entry>
    </row>
   </tbody>
   </tgroup>
  </table>
 </sect2>

 <sect2 id="basebackup-progress-reporting">
  <title>Base Backup Progress Reporting</title>

  <para>
   Whenever an application like <application>pg_basebackup</application>
   is taking a base backup, the
   <structname>pg_stat_progress_basebackup</structname>
   view will contain a row for each WAL sender process that is currently
   running the <command>BASE_BACKUP</command> replication command
   and streaming the backup. The tables below describe the information
   that will be reported and provide information about how to interpret it.
  </para>

  <table id="pg-stat-progress-basebackup-view" xreflabel="pg_stat_progress_basebackup">
   <title><structname>pg_stat_progress_basebackup</structname> View</title>
   <tgroup cols="1">
    <thead>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       Column Type
      </para>
      <para>
       Description
      </para></entry>
     </row>
    </thead>

    <tbody>
     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>pid</structfield> <type>integer</type>
      </para>
      <para>
       Process ID of a WAL sender process.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>phase</structfield> <type>text</type>
      </para>
      <para>
       Current processing phase. See <xref linkend="basebackup-phases"/>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backup_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total amount of data that will be streamed. This is estimated and
       reported as of the beginning of
       <literal>streaming database files</literal> phase. Note that
       this is only an approximation since the database
       may change during <literal>streaming database files</literal> phase
       and WAL log may be included in the backup later. This is always
       the same value as <structfield>backup_streamed</structfield>
       once the amount of data streamed exceeds the estimated
       total size. If the estimation is disabled in
       <application>pg_basebackup</application>
       (i.e., <literal>--no-estimate-size</literal> option is specified),
       this is <literal>NULL</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>backup_streamed</structfield> <type>bigint</type>
      </para>
      <para>
       Amount of data streamed. This counter only advances
       when the phase is <literal>streaming database files</literal> or
       <literal>transferring wal files</literal>.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tablespaces_total</structfield> <type>bigint</type>
      </para>
      <para>
       Total number of tablespaces that will be streamed.
      </para></entry>
     </row>

     <row>
      <entry role="catalog_table_entry"><para role="column_definition">
       <structfield>tablespaces_streamed</structfield> <type>bigint</type>
      </para>
      <para>
       Number of tablespaces streamed. This counter only
       advances when the phase is <literal>streaming database files</literal>.
      </para></entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <table id="basebackup-phases">
   <title>Base backup phases</title>
   <tgroup cols="2">
    <colspec colname="col1" colwidth="1*"/>
    <colspec colname="col2" colwidth="2*"/>
    <thead>
     <row>
      <entry>Phase</entry>
      <entry>Description</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>initializing</literal></entry>
      <entry>
       The WAL sender process is preparing to begin the backup.
       This phase is expected to be very brief.
      </entry>
     </row>
     <row>
      <entry><literal>waiting for checkpoint to finish</literal></entry>
      <entry>
       The WAL sender process is currently performing
       <function>pg_start_backup</function> to prepare to
       take a base backup, and waiting for the start-of-backup
       checkpoint to finish.
      </entry>
     </row>
     <row>
      <entry><literal>estimating backup size</literal></entry>
      <entry>
       The WAL sender process is currently estimating the total amount
       of database files that will be streamed as a base backup.
      </entry>
     </row>
     <row>
      <entry><literal>streaming database files</literal></entry>
      <entry>
       The WAL sender process is currently streaming database files
       as a base backup.
      </entry>
     </row>
     <row>
      <entry><literal>waiting for wal archiving to finish</literal></entry>
      <entry>
       The WAL sender process is currently performing
       <function>pg_stop_backup</function> to finish the backup,
       and waiting for all the WAL files required for the base backup
       to be successfully archived.
       If either <literal>--wal-method=none</literal> or
       <literal>--wal-method=stream</literal> is specified in
       <application>pg_basebackup</application>, the backup will end
       when this phase is completed.
      </entry>
     </row>
     <row>
      <entry><literal>transferring wal files</literal></entry>
      <entry>
       The WAL sender process is currently transferring all WAL logs
       generated during the backup. This phase occurs after
       <literal>waiting for wal archiving to finish</literal> phase if
       <literal>--wal-method=fetch</literal> is specified in
       <application>pg_basebackup</application>. The backup will end
       when this phase is completed.
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

 </sect2>
 </sect1>

 <sect1 id="dynamic-trace">
<!--
  <title>Dynamic Tracing</title>
-->
  <title>動的追跡</title>

 <indexterm zone="dynamic-trace">
  <primary>DTrace</primary>
 </indexterm>

  <para>
<!--
   <productname>PostgreSQL</productname> provides facilities to support
   dynamic tracing of the database server. This allows an external
   utility to be called at specific points in the code and thereby trace
   execution.
-->
<productname>PostgreSQL</productname>は、データベースサーバの動的追跡をサポートする機能を提供します。これにより、外部ユーティリティをコードの特定のポイントで呼び出すことができ、追跡を行うことができるようになります。
  </para>

  <para>
<!--
   A number of probes or trace points are already inserted into the source
   code. These probes are intended to be used by database developers and
   administrators. By default the probes are not compiled into
   <productname>PostgreSQL</productname>; the user needs to explicitly tell
   the configure script to make the probes available.

-->
多くの追跡やプローブ用のポイントは、すでにソースコード内部に存在します。これらのプローブはデータベースの開発者や管理者が使うことを意図しています。デフォルトでは、これらのプローブは<productname>PostgreSQL</productname>にコンパイルされません。ユーザは明示的にconfigureスクリプトでプローブを有効にするように設定する必要があります。
  </para>

  <para>
<!--
   Currently, the
   <ulink url="https://en.wikipedia.org/wiki/DTrace">DTrace</ulink>
   utility is supported, which, at the time of this writing, is available
   on Solaris, macOS, FreeBSD, NetBSD, and Oracle Linux.  The
   <ulink url="https://sourceware.org/systemtap/">SystemTap</ulink> project
   for Linux provides a DTrace equivalent and can also be used.  Supporting other dynamic
   tracing utilities is theoretically possible by changing the definitions for
   the macros in <filename>src/include/utils/probes.h</filename>.
-->
現在、これを書いている時点ではSolaris、macOS、FreeBSD、NetBSD、Oracle Linuxで利用可能な<ulink url="https://en.wikipedia.org/wiki/DTrace">DTrace</ulink>ユーティリティがサポートされています。
<ulink url="https://sourceware.org/systemtap/">SystemTap</ulink>プロジェクトではDTrace相当の機能をLinux向けに提供しており、それを使うこともできます。
他の動的追跡ユーティリティのサポートは、<filename>src/include/utils/probes.h</filename>内のマクロ定義を変更することで、理論上は可能です。
  </para>

  <sect2 id="compiling-for-trace">
<!--
   <title>Compiling for Dynamic Tracing</title>
-->
   <title>動的追跡のためのコンパイル</title>

  <para>
<!--
   By default, probes are not available, so you will need to
   explicitly tell the configure script to make the probes available
   in <productname>PostgreSQL</productname>. To include DTrace support
   specify <option>&#045;-enable-dtrace</option> to configure.  See <xref
   linkend="install-procedure"/> for further information.
-->
デフォルトでは、プローブは有効ではありません。そのため、<productname>PostgreSQL</productname>でプローブが利用できるようにするためにconfigureスクリプトで明示的に設定しなければなりません。DTraceサポートを含めるには、configureに<option>--enable-dtrace</option>を指定します。詳細は<xref linkend="install-procedure"/>を参照してください。
  </para>
  </sect2>

  <sect2 id="trace-points">
<!--
   <title>Built-in Probes</title>
-->
   <title>組み込み済みのプローブ</title>

  <para>
<!--
   A number of standard probes are provided in the source code,
   as shown in <xref linkend="dtrace-probe-point-table"/>;
   <xref linkend="typedefs-table"/>
   shows the types used in the probes.  More probes can certainly be
   added to enhance <productname>PostgreSQL</productname>'s observability.
-->
<xref linkend="dtrace-probe-point-table"/>で示されるように、多くの標準的なプローブがソースコード内で提供されています。<xref linkend="typedefs-table"/>はプローブで使用している型を示しています。また、<productname>PostgreSQL</productname>内の可観測性を強化するためのプローブ追加が可能です。
  </para>

 <table id="dtrace-probe-point-table">
  <!--
  <title>Built-in DTrace Probes</title>
-->
  <title>組み込み済みのDTraceプローブ</title>
  <tgroup cols="3">
   <colspec colname="col1" colwidth="2*"/>
   <colspec colname="col2" colwidth="3*"/>
   <colspec colname="col3" colwidth="3*"/>
   <thead>
    <row>
<!--
     <entry>Name</entry>
     <entry>Parameters</entry>
     <entry>Description</entry>
-->
     <entry>名前</entry>
     <entry>パラメータ</entry>
     <entry>説明</entry>
    </row>
   </thead>

   <tbody>

    <row>
     <entry><literal>transaction-start</literal></entry>
     <entry><literal>(LocalTransactionId)</literal></entry>
<!--
     <entry>Probe that fires at the start of a new transaction.
      arg0 is the transaction ID.</entry>
-->
     <entry>新しいトランザクションの開始を捕捉するプローブ。arg0はトランザクションIDです。</entry>
    </row>
    <row>
     <entry><literal>transaction-commit</literal></entry>
     <entry><literal>(LocalTransactionId)</literal></entry>
<!--
     <entry>Probe that fires when a transaction completes successfully.
      arg0 is the transaction ID.</entry>
-->
     <entry>トランザクションの正常終了を捕捉するプローブ。arg0はトランザクションIDです。</entry>
    </row>
    <row>
     <entry><literal>transaction-abort</literal></entry>
     <entry><literal>(LocalTransactionId)</literal></entry>
<!--
     <entry>Probe that fires when a transaction completes unsuccessfully.
      arg0 is the transaction ID.</entry>
-->
     <entry>トランザクションの異常終了を捕捉するプローブ。arg0はトランザクションIDです。</entry>
    </row>
    <row>
     <entry><literal>query-start</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires when the processing of a query is started.
      arg0 is the query string.</entry>
-->
     <entry>問い合わせ処理の開始を捕捉するプローブ。arg0は問い合わせ文字列です。</entry>
    </row>
    <row>
     <entry><literal>query-done</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires when the processing of a query is complete.
      arg0 is the query string.</entry>
-->
     <entry>問い合わせ処理の正常終了を捕捉するプローブ。arg0は問い合わせ文字列です。</entry>
    </row>
    <row>
     <entry><literal>query-parse-start</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires when the parsing of a query is started.
      arg0 is the query string.</entry>
-->
     <entry>問い合わせのパース処理の開始を捕捉するプローブ。arg0は問い合わせ文字列です。</entry>
    </row>
    <row>
     <entry><literal>query-parse-done</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires when the parsing of a query is complete.
      arg0 is the query string.</entry>
-->
     <entry>問い合わせのパース処理の正常終了を捕捉するプローブ。arg0は問い合わせ文字列です。</entry>
    </row>
    <row>
     <entry><literal>query-rewrite-start</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires when the rewriting of a query is started.
      arg0 is the query string.</entry>
-->
     <entry>問い合わせの書き換え処理の開始を捕捉するプローブ。arg0は問い合わせ文字列です。</entry>
    </row>
    <row>
     <entry><literal>query-rewrite-done</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires when the rewriting of a query is complete.
      arg0 is the query string.</entry>
-->
     <entry>問い合わせの書き換え処理の正常終了を捕捉するプローブ。arg0は問い合わせ文字列です。</entry>
    </row>
    <row>
     <entry><literal>query-plan-start</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when the planning of a query is started.</entry>
-->
     <entry>問い合わせのプランナ処理の開始を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>query-plan-done</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when the planning of a query is complete.</entry>
-->
     <entry>問い合わせのプランナ処理の正常終了を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>query-execute-start</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when the execution of a query is started.</entry>
-->
     <entry>問い合わせの実行(エクゼキュータ)処理の開始を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>query-execute-done</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when the execution of a query is complete.</entry>
-->
     <entry>問い合わせの実行(エクゼキュータ)処理の正常終了を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>statement-status</literal></entry>
     <entry><literal>(const char *)</literal></entry>
<!--
     <entry>Probe that fires anytime the server process updates its
      <structname>pg_stat_activity</structname>.<structfield>status</structfield>.
      arg0 is the new status string.</entry>
-->
     <entry>
サーバプロセスによる<structname>pg_stat_activity</structname>.<structfield>status</structfield>の状態の更新を捕捉するプローブ。
arg0は新しい状態の文字列です。
     </entry>
    </row>
    <row>
     <entry><literal>checkpoint-start</literal></entry>
     <entry><literal>(int)</literal></entry>
<!--
     <entry>Probe that fires when a checkpoint is started.
      arg0 holds the bitwise flags used to distinguish different checkpoint
      types, such as shutdown, immediate or force.</entry>
-->
     <entry>
チェックポイントの開始を捕捉するプローブです。
arg0はチェックポイントの種類の違い(shutdown、immediate、force)を区別するためのビットフラグを持っています。
     </entry>
    </row>
    <row>
     <entry><literal>checkpoint-done</literal></entry>
     <entry><literal>(int, int, int, int, int)</literal></entry>
<!--
     <entry>Probe that fires when a checkpoint is complete.
      (The probes listed next fire in sequence during checkpoint processing.)
      arg0 is the number of buffers written. arg1 is the total number of
      buffers. arg2, arg3 and arg4 contain the number of WAL files added,
      removed and recycled respectively.</entry>
-->
     <entry>
チェックポイントの正常終了を捕捉するプローブ。
(以下に示すプローブはチェックポイント進行に従い順番に捕捉されます。)
arg0は書き込まれたバッファ数、arg1はバッファの総数、arg2、3、4はそれぞれ追加、削除、再利用されたWALファイルの数です。
     </entry>
    </row>
    <row>
     <entry><literal>clog-checkpoint-start</literal></entry>
     <entry><literal>(bool)</literal></entry>
<!--
     <entry>Probe that fires when the CLOG portion of a checkpoint is started.
      arg0 is true for normal checkpoint, false for shutdown
      checkpoint.</entry>
-->
     <entry>
CLOG部分のチェックポイントの開始を捕捉するプローブ。
arg0がtrueならば通常のチェックポイントであり、falseならばシャットダウン時のチェックポイントを示します。
     </entry>
    </row>
    <row>
     <entry><literal>clog-checkpoint-done</literal></entry>
     <entry><literal>(bool)</literal></entry>
<!--
     <entry>Probe that fires when the CLOG portion of a checkpoint is
      complete. arg0 has the same meaning as for <literal>clog-checkpoint-start</literal>.</entry>
-->
     <entry>
CLOG部分のチェックポイントの正常終了を捕捉するプローブ。
arg0は<literal>clog-checkpoint-start</literal>と同じ意味を持ちます。
     </entry>
    </row>
    <row>
     <entry><literal>subtrans-checkpoint-start</literal></entry>
     <entry><literal>(bool)</literal></entry>
<!--
     <entry>Probe that fires when the SUBTRANS portion of a checkpoint is
      started.
      arg0 is true for normal checkpoint, false for shutdown
      checkpoint.</entry>
-->
     <entry>
サブトランザクション部分のチェックポイントの開始を捕捉するプローブ。
arg0がtrueならば通常のチェックポイントであり、falseならばシャットダウン時のチェックポイントを示します。
     </entry>
    </row>
    <row>
     <entry><literal>subtrans-checkpoint-done</literal></entry>
     <entry><literal>(bool)</literal></entry>
<!--
     <entry>Probe that fires when the SUBTRANS portion of a checkpoint is
      complete. arg0 has the same meaning as for
      <literal>subtrans-checkpoint-start</literal>.</entry>
-->
     <entry>
サブトランザクション部分のチェックポイントの正常終了を捕捉するプローブ。
arg0は<literal>subtrans-checkpoint-start</literal>と同じ意味を持ちます。
     </entry>
    </row>
    <row>
     <entry><literal>multixact-checkpoint-start</literal></entry>
     <entry><literal>(bool)</literal></entry>
<!--
     <entry>Probe that fires when the MultiXact portion of a checkpoint is
      started.
      arg0 is true for normal checkpoint, false for shutdown
      checkpoint.</entry>
-->
     <entry>
マルチトランザクション部分のチェックポイントの開始を捕捉するプローブ。
arg0がtrueならば通常のチェックポイントであり、falseならばシャットダウン時のチェックポイントを示します。
     </entry>
    </row>
    <row>
     <entry><literal>multixact-checkpoint-done</literal></entry>
     <entry><literal>(bool)</literal></entry>
<!--
     <entry>Probe that fires when the MultiXact portion of a checkpoint is
      complete. arg0 has the same meaning as for
      <literal>multixact-checkpoint-start</literal>.</entry>
-->
     <entry>
マルチトランザクション部分のチェックポイントの正常終了を捕捉するプローブ。
arg0は<literal>multixact-checkpoint-start</literal>と同じ意味を持ちます。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-checkpoint-start</literal></entry>
     <entry><literal>(int)</literal></entry>
<!--
     <entry>Probe that fires when the buffer-writing portion of a checkpoint
      is started.
      arg0 holds the bitwise flags used to distinguish different checkpoint
      types, such as shutdown, immediate or force.</entry>
-->
     <entry>
チェックポイントのバッファ書き込み部分の開始を捕捉するプローブ。
arg0はチェックポイントの種類の違い(shutdown、immediate、force)を区別するためのビットフラグを持っています。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-sync-start</literal></entry>
     <entry><literal>(int, int)</literal></entry>
<!--
     <entry>Probe that fires when we begin to write dirty buffers during
      checkpoint (after identifying which buffers must be written).
      arg0 is the total number of buffers.
      arg1 is the number that are currently dirty and need to be written.</entry>
-->
     <entry>
チェックポイント中のダーティバッファの書き出し開始を捕捉するプローブ(どのバッファが書き出す必要があるのかを判定した後です)。
arg0はバッファの総数で、arg1は現在ダーティであり、書き出す必要のあるバッファ数です。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-sync-written</literal></entry>
     <entry><literal>(int)</literal></entry>
<!--
     <entry>Probe that fires after each buffer is written during checkpoint.
      arg0 is the ID number of the buffer.</entry>
-->
     <entry>
チェックポイント中のそれぞれのバッファの書き出し後を捕捉するプローブ。
arg0はバッファのIDを示します。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-sync-done</literal></entry>
     <entry><literal>(int, int, int)</literal></entry>
<!--
     <entry>Probe that fires when all dirty buffers have been written.
      arg0 is the total number of buffers.
      arg1 is the number of buffers actually written by the checkpoint process.
      arg2 is the number that were expected to be written (arg1 of
      <literal>buffer-sync-start</literal>); any difference reflects other processes flushing
      buffers during the checkpoint.</entry>
-->
     <entry>
全てのダーティバッファの書き出し後を捕捉するプローブ。
arg0はバッファの総数です。
arg1はチェックポイント処理により実際に書き出されたバッファ数です。
arg2は書き出されるであろうと見積もられたバッファ数(<literal>buffer-sync-start</literal>のarg1相当)です。
この違いはチェックポイント中に他のプロセスにより書き出されたバッファ分です。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-checkpoint-sync-start</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires after dirty buffers have been written to the
      kernel, and before starting to issue fsync requests.</entry>
-->
     <entry>カーネルへのダーティバッファの書き出し処理発行の後、そして同期書き出し要求を開始する前を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>buffer-checkpoint-done</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when syncing of buffers to disk is
      complete.</entry>
-->
     <entry>バッファからディスクへの同期書き出し処理の終了を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>twophase-checkpoint-start</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when the two-phase portion of a checkpoint is
      started.</entry>
-->
     <entry>二相コミット部分のチェックポイントの開始を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>twophase-checkpoint-done</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when the two-phase portion of a checkpoint is
      complete.</entry>
-->
     <entry>二相コミット部分のチェックポイントの正常終了を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>buffer-read-start</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, bool)</literal></entry>
<!--
     <entry>Probe that fires when a buffer read is started.
      arg0 and arg1 contain the fork and block numbers of the page (but
      arg1 will be -1 if this is a relation extension request).
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.
      arg5 is the ID of the backend which created the temporary relation for a
      local buffer, or <symbol>InvalidBackendId</symbol> (-1) for a shared buffer.
      arg6 is true for a relation extension request, false for normal
      read.</entry>
-->
     <entry>
バッファ読み込みの開始を捕捉するプローブ。arg0はとarg1は読み込みページのフォーク番号とブロック番号です(ただし、リレーションの拡張要求があった場合、arg1は-1になるでしょう)。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてリレーションのOIDです。
arg5は一時テーブルをローカルバッファに作成していればそのバックエンドのIDであり、<symbol>InvalidBackendId</symbol>(-1)であれは共有バッファを指します。
arg6はtrueならばリレーションの拡張要求、falseは通常の読み込みを示します。</entry>
    </row>
    <row>
     <entry><literal>buffer-read-done</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, bool, bool)</literal></entry>
<!--
     <entry>Probe that fires when a buffer read is complete.
      arg0 and arg1 contain the fork and block numbers of the page (if this
      is a relation extension request, arg1 now contains the block number
      of the newly added block).
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.
      arg5 is the ID of the backend which created the temporary relation for a
      local buffer, or <symbol>InvalidBackendId</symbol> (-1) for a shared buffer.
      arg6 is true for a relation extension request, false for normal
      read.
      arg7 is true if the buffer was found in the pool, false if not.</entry>
-->
     <entry>
バッファ読み込みの終了を捕捉するプローブ。
arg0とarg1は読み込みページのフォーク番号とブロック番号です(もしリレーションの拡張要求があった場合、arg1は新たに追加されたブロックの番号を含みます)。
arg2、arg3、arg4は対象のテーブルを識別するテーブル空間、データベース、そしてテーブルのOIDです。arg5は一時テーブルをローカルバッファに作成していればそのバックエンドのIDであり、<symbol>InvalidBackendId</symbol>(-1)であれは共有バッファを指します。
arg6はtrueならばリレーションの拡張要求、falseは通常の読み込みを示します。arg7はtrueならばバッファがプール内にある、falseはプール内に無かったことを示します。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-flush-start</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid)</literal></entry>
<!--
     <entry>Probe that fires before issuing any write request for a shared
      buffer.
      arg0 and arg1 contain the fork and block numbers of the page.
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.</entry>
-->
     <entry>
共有バッファへの書き込み要求開始を捕捉するプローブ。
arg0とarg1はそのページのフォーク番号とブロック番号です。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてテーブルのOIDです。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-flush-done</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid)</literal></entry>
<!--
     <entry>Probe that fires when a write request is complete.  (Note
      that this just reflects the time to pass the data to the kernel;
      it's typically not actually been written to disk yet.)
      The arguments are the same as for <literal>buffer-flush-start</literal>.</entry>
-->
     <entry>
書き込み要求の終了を捕捉するプローブ。
(これはカーネルへデータを渡したタイミングのみを反映していることに注意してください。大抵、この時点ではまだ実際にディスクへ書き込まれていません。)
引数は<literal>buffer-flush-start</literal>と同じです。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-write-dirty-start</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid)</literal></entry>
<!--
     <entry>Probe that fires when a server process begins to write a dirty
      buffer.  (If this happens often, it implies that
      <xref linkend="guc-shared-buffers"/> is too
      small or the background writer control parameters need adjustment.)
      arg0 and arg1 contain the fork and block numbers of the page.
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.</entry>
-->
     <entry>
サーバプロセスによるダーティバッファの書き出し開始を捕捉するプローブ。
(もしこれが頻発するようでしたら、<xref linkend="guc-shared-buffers"/>が少な過ぎるか、バックグラウンドライタ制御のパラメータの調節が必要なことを意味します。)
arg0とarg1はそのページのフォーク番号とブロック番号です。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてリレーションのOIDです。
     </entry>
    </row>
    <row>
     <entry><literal>buffer-write-dirty-done</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid)</literal></entry>
<!--
     <entry>Probe that fires when a dirty-buffer write is complete.
      The arguments are the same as for <literal>buffer-write-dirty-start</literal>.</entry>
-->
     <entry>
ダーティバッファの書き出しの終了を捕捉するプローブです。
引数は<literal>buffer-write-dirty-start</literal>と同じです。
     </entry>
    </row>
    <row>
     <entry><literal>wal-buffer-write-dirty-start</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when a server process begins to write a
      dirty WAL buffer because no more WAL buffer space is available.
      (If this happens often, it implies that
      <xref linkend="guc-wal-buffers"/> is too small.)</entry>
-->
     <entry>
WALバッファ領域の不足によるサーバプロセスのダーティなWALバッファの書き出しを捕捉するプローブ。
(もしこれが頻発するようでしたら、<xref linkend="guc-wal-buffers"/>が小さすぎることを意味します。)
     </entry>
    </row>
    <row>
     <entry><literal>wal-buffer-write-dirty-done</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when a dirty WAL buffer write is complete.</entry>
-->
     <entry>ダーティなWALバッファの書き出し終了を捕捉するプローブ。</entry>
    </row>
    <row>
     <entry><literal>wal-insert</literal></entry>
     <entry><literal>(unsigned char, unsigned char)</literal></entry>
<!--
     <entry>Probe that fires when a WAL record is inserted.
      arg0 is the resource manager (rmid) for the record.
      arg1 contains the info flags.</entry>
-->
     <entry>
WALレコードの挿入を捕捉するプローブ。
arg0はレコードのリソースマネージャ(rmid)です。arg1は情報フラグです。
     </entry>
    </row>
    <row>
     <entry><literal>wal-switch</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when a WAL segment switch is requested.</entry>
-->
     <entry>WALセグメントのスイッチ要求を捕捉するプローブです。</entry>
    </row>
    <row>
     <entry><literal>smgr-md-read-start</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid, int)</literal></entry>
<!--
     <entry>Probe that fires when beginning to read a block from a relation.
      arg0 and arg1 contain the fork and block numbers of the page.
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.
      arg5 is the ID of the backend which created the temporary relation for a
      local buffer, or <symbol>InvalidBackendId</symbol> (-1) for a shared buffer.</entry>
-->
     <entry>
リレーションからのブロック読み込みの開始を捕捉するプローブ。
arg0とarg1はそのページのフォーク番号とブロック番号です。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてリレーションのOIDです。
arg5は一時テーブルをローカルバッファに作成していればそのバックエンドのIDであり、<symbol>InvalidBackendId</symbol>(-1)であれは共有バッファを指します。
     </entry>
    </row>
    <row>
     <entry><literal>smgr-md-read-done</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, int, int)</literal></entry>
<!--
     <entry>Probe that fires when a block read is complete.
      arg0 and arg1 contain the fork and block numbers of the page.
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.
      arg5 is the ID of the backend which created the temporary relation for a
      local buffer, or <symbol>InvalidBackendId</symbol> (-1) for a shared buffer.
      arg6 is the number of bytes actually read, while arg7 is the number
      requested (if these are different it indicates trouble).</entry>
-->
     <entry>
ブロックの読み込み終了を捕捉するプローブ。
arg0とarg1はそのページのフォーク番号とブロック番号です。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてリレーションのOIDです。
arg5は一時テーブルをローカルバッファに作成していればそのバックエンドのIDであり、<symbol>InvalidBackendId</symbol>(-1)であれは共有バッファを指します。
arg6は実際に読み込んだバイト数、arg7はリクエストされた読み込みバイト数です(もし、これらに差異があった場合、何らかの問題があることを示します)。
     </entry>
    </row>
    <row>
     <entry><literal>smgr-md-write-start</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid, int)</literal></entry>
<!--
     <entry>Probe that fires when beginning to write a block to a relation.
      arg0 and arg1 contain the fork and block numbers of the page.
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.
      arg5 is the ID of the backend which created the temporary relation for a
      local buffer, or <symbol>InvalidBackendId</symbol> (-1) for a shared buffer.</entry>
-->
     <entry>
リレーションへのブロック書き出しの開始を捕捉するプローブ。
arg0とarg1はそのページのフォーク番号とブロック番号です。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてリレーションのOIDです。
arg5は一時テーブルをローカルバッファに作成していればそのバックエンドのIDであり、<symbol>InvalidBackendId</symbol>(-1)であれは共有バッファを指します。
     </entry>
    </row>
    <row>
     <entry><literal>smgr-md-write-done</literal></entry>
     <entry><literal>(ForkNumber, BlockNumber, Oid, Oid, Oid, int, int, int)</literal></entry>
<!--
     <entry>Probe that fires when a block write is complete.
      arg0 and arg1 contain the fork and block numbers of the page.
      arg2, arg3, and arg4 contain the tablespace, database, and relation OIDs
      identifying the relation.
      arg5 is the ID of the backend which created the temporary relation for a
      local buffer, or <symbol>InvalidBackendId</symbol> (-1) for a shared buffer.
      arg6 is the number of bytes actually written, while arg7 is the number
      requested (if these are different it indicates trouble).</entry>
-->
     <entry>
ブロックの書き出し終了を捕捉するプローブ。
arg0とarg1はそのページのフォーク番号とブロック番号です。
arg2、arg3、arg4は対象のリレーションを識別するテーブル空間、データベース、そしてリレーションのOIDです。
arg5は一時テーブルをローカルバッファに作成していればそのバックエンドのIDであり、<symbol>InvalidBackendId</symbol>(-1)であれは共有バッファを指します。
arg6は実際に書き出したバイト数、arg7はリクエストされた書き出しバイト数です(もし、これらに差異があった場合、何らかの問題があることを示します)。
     </entry>
    </row>
    <row>
     <entry><literal>sort-start</literal></entry>
     <entry><literal>(int, bool, int, int, bool, int)</literal></entry>
<!--
     <entry>Probe that fires when a sort operation is started.
      arg0 indicates heap, index or datum sort.
      arg1 is true for unique-value enforcement.
      arg2 is the number of key columns.
      arg3 is the number of kilobytes of work memory allowed.
      arg4 is true if random access to the sort result is required.
      arg5 indicates serial when <literal>0</literal>, parallel worker when
      <literal>1</literal>, or parallel leader when <literal>2</literal>.</entry>
-->
     <entry>
ソート処理の開始を捕捉するプローブ。
arg0は対象データがヒープ、インデックス、またはdatumのどれかを示します。
arg1はtrueならば一意性を必要としていることを示します。
arg2はカラムのキー数です。
arg3は許容されている作業メモリ(work_mem)のキロバイト数です。
arg4はtrueならばソート結果に対するランダムアクセスが要求されていることを示します。
arg5は、<literal>0</literal>ならばシリアル、<literal>1</literal>ならばパラレルワーカー、<literal>2</literal>ならばパラレルリーダーであることを示します。
     </entry>
    </row>
    <row>
     <entry><literal>sort-done</literal></entry>
     <entry><literal>(bool, long)</literal></entry>
<!--
     <entry>Probe that fires when a sort is complete.
      arg0 is true for external sort, false for internal sort.
      arg1 is the number of disk blocks used for an external sort,
      or kilobytes of memory used for an internal sort.</entry>
-->
     <entry>
ソート処理の終了を捕捉するプローブ。
arg0はtrueならば外部ソート、falseは内部ソートを示します。
arg1は外部ソートで使用されたディスクブロック数、もしくは内部ソートで使用されたメモリーのキロバイト数を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lwlock-acquire</literal></entry>
     <entry><literal>(char *, LWLockMode)</literal></entry>
<!--
     <entry>Probe that fires when an LWLock has been acquired.
      arg0 is the LWLock's tranche.
      arg1 is the requested lock mode, either exclusive or shared.</entry>
-->
     <entry>
LWLockの獲得を捕捉するプローブ。
arg0はLWLockのトランシェを示します。
arg1は要求されたロックモード（排他または共有）を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lwlock-release</literal></entry>
     <entry><literal>(char *)</literal></entry>
<!--
     <entry>Probe that fires when an LWLock has been released (but note
      that any released waiters have not yet been awakened).
      arg0 is the LWLock's tranche.</entry>
-->
     <entry>
LWLockの解放を捕捉するプローブ（ただし、解放された待機状態のものにはまだ通知されていないことに注意してください）。
arg0はLWLockのトランシェを示します。
     </entry>
    </row>
    <row>
     <entry><literal>lwlock-wait-start</literal></entry>
     <entry><literal>(char *, LWLockMode)</literal></entry>
<!--
     <entry>Probe that fires when an LWLock was not immediately available and
      a server process has begun to wait for the lock to become available.
      arg0 is the LWLock's tranche.
      arg1 is the requested lock mode, either exclusive or shared.</entry>
-->
     <entry>
LWLockが即座には獲得できず、ロックが利用可能になるまでサーバプロセスが待機を開始したことを捕捉するプローブ。
arg0はLWLockのトランシェを示します。
arg1は要求されたロックモード（排他または共有）を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lwlock-wait-done</literal></entry>
     <entry><literal>(char *, LWLockMode)</literal></entry>
<!--
     <entry>Probe that fires when a server process has been released from its
      wait for an LWLock (it does not actually have the lock yet).
      arg0 is the LWLock's tranche.
      arg1 is the requested lock mode, either exclusive or shared.</entry>
-->
     <entry>
サーバプロセスがLWLockの待機から解放されたことを捕捉するプローブ（まだ実際にはロックを取得していません）。
arg0はLWLockのトランシェを示します。
arg1は要求されたロックモード（排他または共有）を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lwlock-condacquire</literal></entry>
     <entry><literal>(char *, LWLockMode)</literal></entry>
<!--
     <entry>Probe that fires when an LWLock was successfully acquired when the
      caller specified no waiting.
      arg0 is the LWLock's tranche.
      arg1 is the requested lock mode, either exclusive or shared.</entry>
-->
     <entry>
呼び出し元が待機しないことを指定した際の、LWLockの獲得成功を捕捉するプローブ。
arg0はLWLockのトランシェを示します。
arg1は要求されたロックモード（排他または共有）を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lwlock-condacquire-fail</literal></entry>
     <entry><literal>(char *, LWLockMode)</literal></entry>
<!--
     <entry>Probe that fires when an LWLock was not successfully acquired when
      the caller specified no waiting.
      arg0 is the LWLock's tranche.
      arg1 is the requested lock mode, either exclusive or shared.</entry>
-->
     <entry>
呼び出し元が待機しないことを指定した際の、LWLockの獲得失敗を捕捉するプローブ。
arg0はLWLockのトランシェを示します。
arg1は要求されたロックモード（排他または共有）を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lock-wait-start</literal></entry>
     <entry><literal>(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)</literal></entry>
<!--
     <entry>Probe that fires when a request for a heavyweight lock (lmgr lock)
      has begun to wait because the lock is not available.
      arg0 through arg3 are the tag fields identifying the object being
      locked.  arg4 indicates the type of object being locked.
      arg5 indicates the lock type being requested.</entry>
-->
     <entry>
通常のロック(lmgr lock)を即座に取得できなかったため、サーバプロセスがロックを利用できるまでロック待ち状態になった際の開始を捕捉するプローブ。
arg0からarg3はロックされたオブジェクトの識別用タグ領域です。
arg4はロックされたオブジェクトのタイプを示します。
arg5は要求されたロックの種類を示します。
     </entry>
    </row>
    <row>
     <entry><literal>lock-wait-done</literal></entry>
     <entry><literal>(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)</literal></entry>
<!--
     <entry>Probe that fires when a request for a heavyweight lock (lmgr lock)
      has finished waiting (i.e., has acquired the lock).
      The arguments are the same as for <literal>lock-wait-start</literal>.</entry>
-->
     <entry>
通常のロック(lmgr lock)要求の待機終了を捕捉するプローブ(つまりロックを取得した)。
引数は<literal>lock-wait-start</literal>と同じです。
     </entry>
    </row>
    <row>
     <entry><literal>deadlock-found</literal></entry>
     <entry><literal>()</literal></entry>
<!--
     <entry>Probe that fires when a deadlock is found by the deadlock
      detector.</entry>
-->
     <entry>デッドロック検知器によるデッドロックの発見を捕捉するプローブ。</entry>
    </row>

   </tbody>
   </tgroup>
  </table>

 <table id="typedefs-table">
<!--
  <title>Defined Types Used in Probe Parameters</title>
-->
  <title>プローブパラメータで使われる型の定義</title>
  <tgroup cols="2">
   <thead>
    <row>
<!--
     <entry>Type</entry>
     <entry>Definition</entry>
-->
     <entry>型</entry>
     <entry>定義</entry>
    </row>
   </thead>

   <tbody>

    <row>
     <entry><type>LocalTransactionId</type></entry>
     <entry><type>unsigned int</type></entry>
    </row>
    <row>
     <entry><type>LWLockMode</type></entry>
     <entry><type>int</type></entry>
    </row>
    <row>
     <entry><type>LOCKMODE</type></entry>
     <entry><type>int</type></entry>
    </row>
    <row>
     <entry><type>BlockNumber</type></entry>
     <entry><type>unsigned int</type></entry>
    </row>
    <row>
     <entry><type>Oid</type></entry>
     <entry><type>unsigned int</type></entry>
    </row>
    <row>
     <entry><type>ForkNumber</type></entry>
     <entry><type>int</type></entry>
    </row>
    <row>
     <entry><type>bool</type></entry>
     <entry><type>unsigned char</type></entry>
    </row>

   </tbody>
   </tgroup>
  </table>


  </sect2>

  <sect2 id="using-trace-points">
<!--
   <title>Using Probes</title>
-->
   <title>プローブの利用</title>

  <para>
<!--
   The example below shows a DTrace script for analyzing transaction
   counts in the system, as an alternative to snapshotting
   <structname>pg_stat_database</structname> before and after a performance test:
-->
以下の例では、システムにおけるトランザクション数を解析するDTraceスクリプトを示します。性能試験前後で<structname>pg_stat_database</structname>のスナップショットを取ることで代替可能です。
<programlisting>
#!/usr/sbin/dtrace -qs

postgresql$1:::transaction-start
{
      @start["Start"] = count();
      self->ts  = timestamp;
}

postgresql$1:::transaction-abort
{
      @abort["Abort"] = count();
}

postgresql$1:::transaction-commit
/self->ts/
{
      @commit["Commit"] = count();
      @time["Total time (ns)"] = sum(timestamp - self->ts);
      self->ts=0;
}
</programlisting>
<!--
   When executed, the example D script gives output such as:
-->
実行すると、例のDスクリプトは以下のような出力をします。
<screen>
# ./txn_count.d `pgrep -n postgres` or ./txn_count.d &lt;PID&gt;
^C

Start                                          71
Commit                                         70
Total time (ns)                        2312105013
</screen>
  </para>

  <note>
   <para>
<!--
    SystemTap uses a different notation for trace scripts than DTrace does,
    even though the underlying trace points are compatible.  One point worth
    noting is that at this writing, SystemTap scripts must reference probe
    names using double underscores in place of hyphens.  This is expected to
    be fixed in future SystemTap releases.
-->
基本となる追跡ポイントの互換性はありますが、SystemTapはDTraceと異なる追跡スクリプトの表記を用います。
表記に関して特に注意すべき点として、SystemTapでは参照する追跡ポイント名のハイフンの代わりに二重のアンダースコアを用いる必要があります。
これは将来的なSystemTapのリリースで修正されることを期待しています。
   </para>
  </note>

  <para>
<!--
   You should remember that DTrace scripts need to be carefully written and
   debugged, otherwise the trace information collected might
   be meaningless. In most cases where problems are found it is the
   instrumentation that is at fault, not the underlying system. When
   discussing information found using dynamic tracing, be sure to enclose
   the script used to allow that too to be checked and discussed.
-->
DTraceスクリプトの作成には注意が必要であり、デバッグが必要であることは忘れないでください。さもないと、収集される追跡情報の意味がなくなるかもしれません。ほとんどの場合、見つかる問題はシステムではなく使用方法の間違いです。動的追跡を使用して見つかった情報に関して議論を行う際には、スクリプトの検査や議論もできるようにスクリプトも含めるようにしてください。
  </para>
  </sect2>

  <sect2 id="defining-trace-points">
<!--
   <title>Defining New Probes</title>
-->
   <title>新規プローブの定義</title>

  <para>
<!--
   New probes can be defined within the code wherever the developer
   desires, though this will require a recompilation. Below are the steps
   for inserting new probes:
-->
開発者が望めばコード内に新しくプローブを定義することができます。しかし、これには再コンパイルが必要です。下記は、新規プローブの定義の手順です。
  </para>

  <procedure>
   <step>
    <para>
<!--
     Decide on probe names and data to be made available through the probes
-->
プローブの名前とプローブの処理を通じて取得可能とするデータを決めます
    </para>
   </step>

   <step>
    <para>
<!--
     Add the probe definitions to <filename>src/backend/utils/probes.d</filename>
-->
<filename>src/backend/utils/probes.d</filename>にプローブの定義を追加します
    </para>
   </step>

   <step>
    <para>
<!--
     Include <filename>pg_trace.h</filename> if it is not already present in the
     module(s) containing the probe points, and insert
     <literal>TRACE_POSTGRESQL</literal> probe macros at the desired locations
     in the source code
-->
もし、プローブポイントを含むモジュールが<filename>pg_trace.h</filename>をインクルードしてなければそれをインクルードし、ソースコード中のプローブを行いたい場所に<literal>TRACE_POSTGRESQL</literal>マクロを挿入します
    </para>
   </step>

   <step>
    <para>
<!--
     Recompile and verify that the new probes are available
-->
再コンパイルを行い、新規プローブが利用できるか確認します
    </para>
   </step>
  </procedure>

  <formalpara>
<!--
   <title>Example:</title>
-->
   <title>例:</title>
   <para>
<!--
    Here is an example of how you would add a probe to trace all new
    transactions by transaction ID.
-->
これはトランザクションIDを用いて新規トランザクションを追跡するプローブ追加の仕方の例です。
   </para>
  </formalpara>

  <procedure>
   <step>
    <para>
<!--
     Decide that the probe will be named <literal>transaction-start</literal> and
     requires a parameter of type <type>LocalTransactionId</type>
-->
プローブ名を<literal>transaction-start</literal>とし、パラメータとして<type>LocalTransactionId</type>型を必要とすることを決めます。
    </para>
   </step>

   <step>
    <para>
<!--
     Add the probe definition to <filename>src/backend/utils/probes.d</filename>:
-->
<filename>src/backend/utils/probes.d</filename>にプローブの定義を追加します:
<programlisting>
probe transaction__start(LocalTransactionId);
</programlisting>
<!--
     Note the use of the double underline in the probe name. In a DTrace
     script using the probe, the double underline needs to be replaced with a
     hyphen, so <literal>transaction-start</literal> is the name to document for
     users.
-->
プローブ名に二重のアンダースコアを使用する場合は注意して下さい。
DTraceスクリプトでプローブを用いる場合、二重のアンダースコアをハイフンに置き換える必要があります。そのため、<literal>transaction-start</literal>がユーザ向けの文書に記載される名前となります。
    </para>
   </step>

   <step>
    <para>
<!--
     At compile time, <literal>transaction__start</literal> is converted to a macro
     called <literal>TRACE_POSTGRESQL_TRANSACTION_START</literal> (notice the
     underscores are single here), which is available by including
     <filename>pg_trace.h</filename>.  Add the macro call to the appropriate location
     in the source code.  In this case, it looks like the following:
-->
コンパイル時に、<literal>transaction__start</literal>は<literal>TRACE_POSTGRESQL_TRANSACTION_START</literal>と呼ばれるマクロに変換されます(ここではアンダースコアはひとつになります)。このマクロは、<filename>pg_trace.h</filename>をインクルードすることにより使用可能となります。
このマクロをソースコード中の適切な箇所へ追加していきます。
この場合、以下の様になります。

<programlisting>
TRACE_POSTGRESQL_TRANSACTION_START(vxid.localTransactionId);
</programlisting>
    </para>
   </step>

   <step>
    <para>
<!--
     After recompiling and running the new binary, check that your newly added
     probe is available by executing the following DTrace command.  You
     should see similar output:
-->
再コンパイル後に新しいバイナリでサーバを起動し、下記の様なDTraceコマンドの実行により新たに追加したプローブが利用可能なチェックします。下記の様な出力が確認できるはずです:
<screen>
# dtrace -ln transaction-start
   ID    PROVIDER          MODULE           FUNCTION NAME
18705 postgresql49878     postgres     StartTransactionCommand transaction-start
18755 postgresql49877     postgres     StartTransactionCommand transaction-start
18805 postgresql49876     postgres     StartTransactionCommand transaction-start
18855 postgresql49875     postgres     StartTransactionCommand transaction-start
18986 postgresql49873     postgres     StartTransactionCommand transaction-start
</screen>
    </para>
   </step>
  </procedure>

  <para>
<!--
   There are a few things to be careful about when adding trace macros
   to the C code:
-->
Cのソースコードに追跡用のマクロを追加する際、いくつかの注意点があります:

   <itemizedlist>
    <listitem>
     <para>
<!--
      You should take care that the data types specified for a probe's
      parameters match the data types of the variables used in the macro.
      Otherwise, you will get compilation errors.
-->
プローブの引数に指定したデータ型がマクロで使用される変数のデータ型と一致するよう注意しなければなりません。でなければ、コンパイル時にエラーとなるでしょう。
     </para>
    </listitem>


    <listitem>
     <para>
<!--
      On most platforms, if <productname>PostgreSQL</productname> is
      built with <option>&#045;-enable-dtrace</option>, the arguments to a trace
      macro will be evaluated whenever control passes through the
      macro, <emphasis>even if no tracing is being done</emphasis>.  This is
      usually not worth worrying about if you are just reporting the
      values of a few local variables.  But beware of putting expensive
      function calls into the arguments.  If you need to do that,
      consider protecting the macro with a check to see if the trace
      is actually enabled:
-->
ほとんどのプラットフォームでは、もし<productname>PostgreSQL</productname>が<option>--enable-dtrace</option>付きでビルドされた場合、<emphasis>何の追跡がされなかった</emphasis>としても、制御がマクロを通過する際はいつでも追跡用マクロの引数が評価されます。
ごく少数のローカルな変数を報告するような場合はそれほど心配はいりません。
ただし、高価な関数呼び出しを引数にする場合は注意して下さい。
もしそのようにする必要がある場合、追跡が実際に有効かどうかをチェックしてマクロを保護することを考慮してください:

<programlisting>
if (TRACE_POSTGRESQL_TRANSACTION_START_ENABLED())
    TRACE_POSTGRESQL_TRANSACTION_START(some_function(...));
</programlisting>

<!--
      Each trace macro has a corresponding <literal>ENABLED</literal> macro.
-->
各追跡マクロは対応する<literal>ENABLED</literal>マクロを持っています。
     </para>
    </listitem>
   </itemizedlist>

  </para>

  </sect2>

 </sect1>

</chapter>
