<!--
doc/src/sgml/ref/create_foreign_table.sgml
PostgreSQL documentation
-->

<refentry id="sql-createforeigntable">
 <indexterm zone="sql-createforeigntable">
  <primary>CREATE FOREIGN TABLE</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>CREATE FOREIGN TABLE</refentrytitle>
  <manvolnum>7</manvolnum>
<!--
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
-->
  <refmiscinfo>SQL - 言語</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE FOREIGN TABLE</refname>
<!--
  <refpurpose>define a new foreign table</refpurpose>
-->
  <refpurpose>新しい外部テーブルを定義する</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="parameter">table_name</replaceable> ( [
  { <replaceable class="parameter">column_name</replaceable> <replaceable class="parameter">data_type</replaceable> [ OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">value</replaceable>' [, ... ] ) ] [ COLLATE <replaceable>collation</replaceable> ] [ <replaceable class="parameter">column_constraint</replaceable> [ ... ] ]
    | <replaceable>table_constraint</replaceable>
    | LIKE <replaceable>source_table</replaceable> [ <replaceable>like_option</replaceable> ... ] }
    [, ... ]
] )
[ INHERITS ( <replaceable>parent_table</replaceable> [, ... ] ) ]
  SERVER <replaceable class="parameter">server_name</replaceable>
[ OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">value</replaceable>' [, ... ] ) ]

CREATE FOREIGN TABLE [ IF NOT EXISTS ] <replaceable class="parameter">table_name</replaceable>
  PARTITION OF <replaceable class="parameter">parent_table</replaceable> [ (
  { <replaceable class="parameter">column_name</replaceable> [ WITH OPTIONS ] [ <replaceable class="parameter">column_constraint</replaceable> [ ... ] ]
    | <replaceable>table_constraint</replaceable> }
    [, ... ]
) ]
{ FOR VALUES <replaceable class="parameter">partition_bound_spec</replaceable> | DEFAULT }
  SERVER <replaceable class="parameter">server_name</replaceable>
[ OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">value</replaceable>' [, ... ] ) ]

<!--
<phrase>where <replaceable class="parameter">column_constraint</replaceable> is:</phrase>
-->
<phrase>ここで<replaceable class="parameter">column_constraint</replaceable>は以下の通りです。</phrase>

[ CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ]
{ NOT NULL [ NO INHERIT ] |
  NULL |
  CHECK ( <replaceable class="parameter">expression</replaceable> ) [ NO INHERIT ] |
  DEFAULT <replaceable>default_expr</replaceable> |
  GENERATED ALWAYS AS ( <replaceable>generation_expr</replaceable> ) [ STORED | VIRTUAL ] }
[ ENFORCED | NOT ENFORCED ]

<!--
<phrase>and <replaceable class="parameter">table_constraint</replaceable> is:</phrase>
-->
<phrase>また<replaceable class="parameter">table_constraint</replaceable>は以下の通りです。</phrase>

[ CONSTRAINT <replaceable class="parameter">constraint_name</replaceable> ]
{  NOT NULL <replaceable class="parameter">column_name</replaceable> [ NO INHERIT ] |
   CHECK ( <replaceable class="parameter">expression</replaceable> ) [ NO INHERIT ] }
[ ENFORCED | NOT ENFORCED ]

<phrase>and <replaceable class="parameter">like_option</replaceable> is:</phrase>

{ INCLUDING | EXCLUDING } { COMMENTS | CONSTRAINTS | DEFAULTS | GENERATED | STATISTICS | ALL }

<!--
<phrase>and <replaceable class="parameter">partition_bound_spec</replaceable> is:</phrase>
-->
<phrase>また<replaceable class="parameter">partition_bound_spec</replaceable>は以下の通りです。</phrase>

IN ( <replaceable class="parameter">partition_bound_expr</replaceable> [, ...] ) |
FROM ( { <replaceable class="parameter">partition_bound_expr</replaceable> | MINVALUE | MAXVALUE } [, ...] )
  TO ( { <replaceable class="parameter">partition_bound_expr</replaceable> | MINVALUE | MAXVALUE } [, ...] ) |
WITH ( MODULUS <replaceable class="parameter">numeric_literal</replaceable>, REMAINDER <replaceable class="parameter">numeric_literal</replaceable> )
</synopsis>
 </refsynopsisdiv>

 <refsect1 id="sql-createforeigntable-description">
<!--
  <title>Description</title>
-->
  <title>説明</title>

  <para>
<!--
   <command>CREATE FOREIGN TABLE</command> creates a new foreign table
   in the current database. The table will be owned by the user issuing the
   command.
-->
<command>CREATE FOREIGN TABLE</command>は現在のデータベース内に新しい外部テーブルを作成します。
このテーブルはコマンドを発行したユーザにより所有されます。
  </para>

  <para>
<!--
   If a schema name is given (for example, <literal>CREATE FOREIGN TABLE
   myschema.mytable ...</literal>) then the table is created in the specified
   schema.  Otherwise it is created in the current schema.
   The name of the foreign table must be
   distinct from the name of any other relation (table, sequence, index, view,
   materialized view, or foreign table) in the same schema.
-->
スキーマ名が指定された場合（例えば<literal>CREATE FOREIGN TABLE myschema.mytable ...</literal>）、テーブルは指定されたスキーマ内に作成されます。
そうでなければ現在のスキーマ内に作成されます。
外部テーブルの名前は同じスキーマ内にある他のリレーション（テーブル、シーケンス、インデックス、ビュー、マテリアライズドビュー、外部テーブル）と異なるものでなければなりません。
  </para>

  <para>
<!--
   <command>CREATE FOREIGN TABLE</command> also automatically creates a data
   type that represents the composite type corresponding to one row of
   the foreign table.  Therefore, foreign tables cannot have the same
   name as any existing data type in the same schema.
-->
<command>CREATE FOREIGN TABLE</command>はまた自動的に外部テーブルの１行に対応する複合型を表すデータ型を作成します。
したがって外部テーブルは同じスキーマ内の既存のデータ型の名前と同じものを持つことができません。
  </para>

  <para>
<!--
   If <literal>PARTITION OF</literal> clause is specified then the table is
   created as a partition of <literal>parent_table</literal> with specified
   bounds.
-->
<literal>PARTITION OF</literal>句が指定された場合、テーブルは<literal>parent_table</literal>の指定された境界のパーティションとして作られます。
  </para>

  <para>
<!--
   To be able to create a foreign table, you must have <literal>USAGE</literal>
   privilege on the foreign server, as well as <literal>USAGE</literal>
   privilege on all column types used in the table.
-->
外部テーブルを作成するためには、外部サーバに対する<literal>USAGE</literal>権限とテーブルで使用される列の型すべてに対する<literal>USAGE</literal>権限を持たなければなりません。
  </para>
 </refsect1>

 <refsect1>
<!--
  <title>Parameters</title>
-->
  <title>パラメータ</title>

  <variablelist>

   <varlistentry>
    <term><literal>IF NOT EXISTS</literal></term>
    <listitem>
     <para>
<!--
      Do not throw an error if a relation with the same name already exists.
      A notice is issued in this case.  Note that there is no guarantee that
      the existing relation is anything like the one that would have been
      created.
-->
同じ名前のリレーションがすでに存在していてもエラーとしません。
この場合注意が発せられます。
既存のリレーションが作成しようとしたものと何かしら似たものであることは保証されません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">table_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name (optionally schema-qualified) of the table to be created.
-->
作成するテーブルの名前です（スキーマ修飾も可）。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">column_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of a column to be created in the new table.
-->
新しいテーブルで作成される列の名前です。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">data_type</replaceable></term>
    <listitem>
     <para>
<!--
      The data type of the column. This can include array
      specifiers. For more information on the data types supported by
      <productname>PostgreSQL</productname>, refer to <xref
      linkend="datatype"/>.
-->
列のデータ型です。
これには、配列指定子を含めることができます。
<productname>PostgreSQL</productname>でサポートされるデータ型の情報に関する詳細は<xref linkend="datatype"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>COLLATE <replaceable>collation</replaceable></literal></term>
    <listitem>
     <para>
<!--
      The <literal>COLLATE</literal> clause assigns a collation to
      the column (which must be of a collatable data type).
      If not specified, the column data type's default collation is used.
-->
<literal>COLLATE</literal>句は列（照合可能なデータ型でなければなりません）の照合順序を指定します。
指定されなければ、列のデータ型のデフォルトの照合順序が使用されます。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>INHERITS ( <replaceable>parent_table</replaceable> [, ... ] )</literal></term>
    <listitem>
     <para>
<!--
      The optional <literal>INHERITS</literal> clause specifies a list of
      tables from which the new foreign table automatically inherits
      all columns.  Parent tables can be plain tables or foreign tables.
      See the similar form of
      <link linkend="sql-createtable"><command>CREATE TABLE</command></link> for more details.
-->
オプションで<literal>INHERITS</literal>句を使い、新しい外部テーブルが自動的にすべての列を継承するテーブルのリストを指定できます。
親テーブルには通常のテーブルまたは外部テーブルが指定できます。
詳しくは<link linkend="sql-createtable"><command>CREATE TABLE</command></link>の類似の構文を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>PARTITION OF <replaceable>parent_table</replaceable> { FOR VALUES <replaceable class="parameter">partition_bound_spec</replaceable> | DEFAULT }</literal></term>
    <listitem>
     <para>
<!--
      This form can be used to create the foreign table as partition of
      the given parent table with specified partition bound values.
      See the similar form of
      <link linkend="sql-createtable"><command>CREATE TABLE</command></link> for more details.
      Note that it is currently not allowed to create the foreign table as a
      partition of the parent table if there are <literal>UNIQUE</literal>
      indexes on the parent table.  (See also
      <link linkend="sql-altertable"><command>ALTER TABLE ATTACH PARTITION</command></link>.)
-->
この形式は、与えられた親テーブルのパーティションとして指定されたパーティション境界値を持つ外部テーブルを作成するために使うことができます。
より詳細については<link linkend="sql-createtable"><command>CREATE TABLE</command></link>の類似の形式を参照してください。
現在のところに親テーブルに<literal>UNIQUE</literal>インデックスがある場合、親テーブルのパーティションとして外部テーブルを作成することは認められていないことに注意してください。
(<link linkend="sql-altertable"><command>ALTER TABLE ATTACH PARTITION</command></link>も参照してください。)
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>LIKE <replaceable>source_table</replaceable> [ <replaceable>like_option</replaceable> ... ]</literal></term>
    <listitem>
     <para>
<!--
      The <literal>LIKE</literal> clause specifies a table from which
      the new table automatically copies all column names, their data types,
      and their not-null constraints.
-->
《機械翻訳》<literal>LIKE</literal>句は、新しいテーブルがすべてのカラム名、データの種類、NULL以外の制約を自動的にコピーするテーブルを指定します。
     </para>
     <para>
<!--
      Unlike <literal>INHERITS</literal>, the new table and original table
      are completely decoupled after creation is complete.  Changes to the
      original table will not be applied to the new table, and it is not
      possible to include data of the new table in scans of the original
      table.
-->
《機械翻訳》<literal>INHERITS</literal>とは異なり、新規テーブルとオリジナルテーブルは作成後に完全に分離されます。
オリジナルテーブルへの変更は新規テーブルには適用されず、オリジナルテーブルのスキャンでは新規テーブルのincludeデータには適用できません。
     </para>
      <para>
<!--
      Also unlike <literal>INHERITS</literal>, columns and
      constraints copied by <literal>LIKE</literal> are not merged with similarly
      named columns and constraints.
      If the same name is specified explicitly or in another
      <literal>LIKE</literal> clause, an error is signaled.
-->
《機械翻訳》また、<literal>INHERITS</literal>とは異なり、<literal>LIKE</literal>によってコピーされた列および制約は、同様に記名的の列および制約とマージされません。
同じ名前が明示的に指定された場合、または別の<literal>LIKE</literal>句で指定された場合、エラーが通知されます。
     </para>
     <para>
<!--
      The optional <replaceable>like_option</replaceable> clauses specify
      which additional properties of the original table to copy.  Specifying
      <literal>INCLUDING</literal> copies the property, specifying
      <literal>EXCLUDING</literal> omits the property.
      <literal>EXCLUDING</literal> is the default.  If multiple specifications
      are made for the same kind of object, the last one is used.  The
      available options are:
-->
《機械翻訳》オプショナル<replaceable>like_option</replaceable>句は、オリジナルテーブルのどの追加プロパティをコピーに指定します。
指定するとプロパティがコピーされ、指定すると<literal>EXCLUDING</literal>プロパティが省略されます。
<literal>EXCLUDING</literal>はデフォルトです。
同じ種類のオブジェクトに対してマルチプル仕様が作成された場合は、最後の仕様が使用されます。
使用可能なオプションは次のとおりです。
<literal>INCLUDING</literal>

      <variablelist>
       <varlistentry>
        <term><literal>INCLUDING COMMENTS</literal></term>
        <listitem>
         <para>
<!--
          Comments for the copied columns and constraints will be
          copied.  The default behavior is to exclude comments, resulting in
          the copied columns and constraints in the new table having no
          comments.
-->
《機械翻訳》コピーした列と制約のコメントはコピーされます。
デフォルトの動作ではコメントが除外されるため、新しいテーブルにコピーした列と制約にはコメントがありません。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>INCLUDING CONSTRAINTS</literal></term>
        <listitem>
         <para>
<!--
          <literal>CHECK</literal> constraints will be copied.  No distinction
          is made between column constraints and table constraints.  Not-null
          constraints are always copied to the new table.
-->
《機械翻訳》<literal>CHECK</literal>拘束はコピーされます。
カラム拘束とテーブル拘束は区別されません。
NULL以外の拘束は常に新しいテーブルにコピーされます。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>INCLUDING DEFAULTS</literal></term>
        <listitem>
         <para>
<!--
          Default expressions for the copied column definitions will be
          copied.  Otherwise, default expressions are not copied, resulting in
          the copied columns in the new table having null defaults.  Note that
          copying defaults that call database-modification functions, such as
          <function>nextval</function>, may create a functional linkage
          between the original and new tables.
-->
《機械翻訳》コピーしたデフォルト定義のカラム式がコピーされます。
それ以外の場合、デフォルト式はコピーされず、新しいテーブルにコピーされた列にはNULLのデフォルト値が設定されます。
デフォルトをコピーするノートでは、呼び出しデータベース変更関数<function>nextval</function>などによってオリジナルと新しいテーブル間に機能リンクが作成される場合があります。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>INCLUDING GENERATED</literal></term>
        <listitem>
         <para>
<!--
          Any generation expressions of copied column definitions will be
          copied.  By default, new columns will be regular base columns.
-->
《機械翻訳》コピーされた列定義の全ての生成式がコピーされます。
デフォルトでは新たな列は通常の基底列となります。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>INCLUDING STATISTICS</literal></term>
        <listitem>
         <para>
<!--
          Extended statistics are copied to the new table.
-->
《機械翻訳》拡張統計情報が新しいテーブルにコピーされます。
         </para>
        </listitem>
       </varlistentry>

       <varlistentry>
        <term><literal>INCLUDING ALL</literal></term>
        <listitem>
         <para>
<!--
          <literal>INCLUDING ALL</literal> is an abbreviated form selecting
          all the available individual options.  (It could be useful to write
          individual <literal>EXCLUDING</literal> clauses after
          <literal>INCLUDING ALL</literal> to select all but some specific
          options.)
-->
《機械翻訳》<literal>INCLUDING ALL</literal>は、利用可能な個々のフォームをすべて選択する簡略化されたオプションです。
<literal>INCLUDING ALL</literal>特定のセレクトを除くすべてのオプションに対して、の後の句を個別に記述すると便利です。
<literal>EXCLUDING</literal>
         </para>
        </listitem>
       </varlistentry>
      </variablelist>
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CONSTRAINT <replaceable class="parameter">constraint_name</replaceable></literal></term>
    <listitem>
     <para>
<!--
      An optional name for a column or table constraint.  If the
      constraint is violated, the constraint name is present in error messages,
      so constraint names like <literal>col must be positive</literal> can be used
      to communicate helpful constraint information to client applications.
      (Double-quotes are needed to specify constraint names that contain spaces.)
      If a constraint name is not specified, the system generates a name.
-->
列制約またはテーブル制約の名前（省略可）です。
制約に違反した時、エラーメッセージ内に制約名が表示されるので、<literal>col must be positive</literal>のような制約名を使って、クライアントアプリケーションに役立つ制約情報を通知することができます。
（空白文字を含む制約名を指定するには二重引用符を使う必要があります。）
制約名が指定されなければ、システムが名前を生成します。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NOT NULL</literal> [ NO INHERIT ]</term>
    <listitem>
     <para>
<!--
      The column is not allowed to contain null values.
-->
その列がNULL値を持てないことを指定します。
     </para>

     <para>
<!--
      A constraint marked with <literal>NO INHERIT</literal> will not propagate to
      child tables.
-->
<literal>NO INHERIT</literal>と印を付けられた制約は、子テーブルに継承されません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>NULL</literal></term>
    <listitem>
     <para>
<!--
      The column is allowed to contain null values. This is the default.
-->
その列がNULL値を持てることを指定します。
これがデフォルトです。
     </para>

     <para>
<!--
      This clause is only provided for compatibility with
      non-standard SQL databases.  Its use is discouraged in new
      applications.
-->
この句は非標準的なSQLデータベースとの互換性のためだけに提供されています。
新しいアプリケーションでこれを使用するのはお勧めしません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>CHECK ( <replaceable class="parameter">expression</replaceable> ) [ NO INHERIT ] </literal></term>
    <listitem>
     <para>
<!--
      The <literal>CHECK</literal> clause specifies an expression producing a
      Boolean result which each row in the foreign table is expected
      to satisfy; that is, the expression should produce TRUE or UNKNOWN,
      never FALSE, for all rows in the foreign table.
      A check constraint specified as a column constraint should
      reference that column's value only, while an expression
      appearing in a table constraint can reference multiple columns.
-->
<literal>CHECK</literal>句では、外部テーブルの各行が満たすと期待される論理値の結果を生成する式を指定します。
つまり、式は外部テーブルのすべての行に対して、TRUEまたはUNKNOWNを生成し、決してFALSEにはなりません。
列制約として指定したチェック制約はその列の値だけを参照しますが、テーブル制約として使われる式は複数の列を参照することができます。
     </para>

     <para>
<!--
      Currently, <literal>CHECK</literal> expressions cannot contain
      subqueries nor refer to variables other than columns of the
      current row.  The system column <literal>tableoid</literal>
      may be referenced, but not any other system column.
-->
現在のところ、<literal>CHECK</literal>の式は副問い合わせを含むことや、現在の行の列以外の変数を参照することはできません。
システム列<literal>tableoid</literal>を参照することはできますが、それ以外のシステム列を参照することはできません。
     </para>

     <para>
<!--
      A constraint marked with <literal>NO INHERIT</literal> will not propagate to
      child tables.
-->
<literal>NO INHERIT</literal>と印を付けられた制約は、子テーブルに継承されません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>DEFAULT
    <replaceable>default_expr</replaceable></literal></term>
    <listitem>
     <para>
<!--
      The <literal>DEFAULT</literal> clause assigns a default data value for
      the column whose column definition it appears within.  The value
      is any variable-free expression (subqueries and cross-references
      to other columns in the current table are not allowed).  The
      data type of the default expression must match the data type of the
      column.
-->
<literal>DEFAULT</literal>句は、
列定義の中に現れる、列に対するデフォルトデータ値を割り当てます。
値は変数がない任意の式（副問い合わせおよび、現在のテーブル内の他の列へのクロス参照は許されません）です。
デフォルト式のデータ型は列のデータ型とマッチしなければなりません。
     </para>

     <para>
<!--
      The default expression will be used in any insert operation that
      does not specify a value for the column.  If there is no default
      for a column, then the default is null.
-->
デフォルト式は、列に対する値指定がないすべての挿入操作で使用されます。
列に対するデフォルトがない場合、デフォルトはNULLです。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>GENERATED ALWAYS AS ( <replaceable>generation_expr</replaceable> ) [ STORED | VIRTUAL ]</literal><indexterm><primary>generated column</primary></indexterm></term>
    <listitem>
     <para>
<!--
      This clause creates the column as a <firstterm>generated
      column</firstterm>.  The column cannot be written to, and when read the
      result of the specified expression will be returned.
-->
この句は、列を<firstterm>生成列</firstterm>として作成します。
その列に書き込むことはできず、読み出された場合に指定された式の結果が返されます。
     </para>

     <para>
<!--
      When <literal>VIRTUAL</literal> is specified, the column will be
      computed when it is read.  (The foreign-data wrapper will see it as a
      null value in new rows and may choose to store it as a null value or
      ignore it altogether.)  When <literal>STORED</literal> is specified, the
      column will be computed on write.  (The computed value will be presented
      to the foreign-data wrapper for storage and must be returned on
      reading.)  <literal>VIRTUAL</literal> is the default.
-->
《機械翻訳》<literal>VIRTUAL</literal>が指定された場合、カラムはそれが読み込まれた時に計算されます（外部データラッパーはそれを新しい行のNULL値として見て、それをNULL値として格納するか全く無視するかを選択できます）。
<literal>STORED</literal>が指定された場合、カラムは書き込み時に計算されます（計算された値はストレージの外部データラッパーに提示され、読み込んだ時に返されなければなりません）。
<literal>VIRTUAL</literal>はデフォルトです。
     </para>

     <para>
<!--
      The generation expression can refer to other columns in the table, but
      not other generated columns.  Any functions and operators used must be
      immutable.  References to other tables are not allowed.
-->
生成式はテーブル内の他の列を参照できますが、他の生成列は参照できません。
使われている関数や演算子はimmutableでなければなりません。
他のテーブルへの参照はできません。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">server_name</replaceable></term>
    <listitem>
     <para>
<!--
      The name of an existing foreign server to use for the foreign table.
      For details on defining a server, see <xref
      linkend="sql-createserver"/>.
-->
外部テーブル用に使用される既存の外部サーバの名前です。
外部サーバの詳細については<xref linkend="sql-createserver"/>を参照してください。
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>OPTIONS ( <replaceable class="parameter">option</replaceable> '<replaceable class="parameter">value</replaceable>' [, ...] )</literal></term>
    <listitem>
     <para>
<!--
      Options to be associated with the new foreign table or one of its
      columns.
      The allowed option names and values are specific to each foreign
      data wrapper and are validated using the foreign-data wrapper's
      validator function.  Duplicate option names are not allowed (although
      it's OK for a table option and a column option to have the same name).
-->
新しい外部テーブルまたはその列の１つに関連するオプションです。
設定可能なオプションの名前と値は外部データラッパーそれぞれに固有なものであり、外部データラッパーの検証関数を用いて検証されます。
重複するオプション名は許されません（しかしテーブルオプションと列オプションでは同じ名前を持たせることはできます）。
     </para>
    </listitem>
   </varlistentry>

  </variablelist>

 </refsect1>

 <refsect1>
<!--
  <title>Notes</title>
-->
  <title>注釈</title>

   <para>
<!--
    Constraints on foreign tables (such as <literal>CHECK</literal>
    or <literal>NOT NULL</literal> clauses) are not enforced by the
    core <productname>PostgreSQL</productname> system, and most foreign data wrappers
    do not attempt to enforce them either; that is, the constraint is
    simply assumed to hold true.  There would be little point in such
    enforcement since it would only apply to rows inserted or updated via
    the foreign table, and not to rows modified by other means, such as
    directly on the remote server.  Instead, a constraint attached to a
    foreign table should represent a constraint that is being enforced by
    the remote server.
-->
外部テーブル上の制約（<literal>CHECK</literal>句や<literal>NOT NULL</literal>句など）は<productname>PostgreSQL</productname>のコアシステムによって強制されませんし、ほとんどの外部データラッパーもそれを強制しようとはしません。
つまり、制約は単にそれが成り立つと仮定されるものです。
制約は外部テーブルの機能を使って行を挿入あるいは更新するときにのみ適用され、リモートサーバ上で直接更新するなど、他の手段による行の更新には適用されませんから、それを強制することにはあまり意味はありません。
その代わりに、外部テーブルに指定する制約は、リモートサーバによって強制される制約を表現するものであるべきです。
   </para>

   <para>
<!--
    Some special-purpose foreign data wrappers might be the only access
    mechanism for the data they access, and in that case it might be
    appropriate for the foreign data wrapper itself to perform constraint
    enforcement.  But you should not assume that a wrapper does that
    unless its documentation says so.
-->
一部の特別な目的の外部データラッパーは、それがアクセス対象のデータにアクセスするための唯一の機構であり、またその場合、外部データラッパーそれ自体にとって、制約の強制を実行することが適切なことがあります。
ただし、ラッパーのドキュメントにそのように書いてあるのでなければ、それを仮定しない方が良いでしょう。
   </para>

   <para>
<!--
    Although <productname>PostgreSQL</productname> does not attempt to enforce
    constraints on foreign tables, it does assume that they are correct
    for purposes of query optimization.  If there are rows visible in the
    foreign table that do not satisfy a declared constraint, queries on
    the table might produce errors or incorrect answers.  It is the user's
    responsibility to ensure that the constraint definition matches
    reality.
-->
<productname>PostgreSQL</productname>では外部テーブルの制約を強制しませんが、問い合わせの最適化という目的のため、制約が正しいということを仮定します。
外部テーブルで、宣言された制約を満たさない行が可視の状態で存在する場合、そのテーブルに対する問い合わせはエラーになったり誤った結果をもたらしたりするかもしれません。
制約の定義が現実に即したものであることを保証するのは、ユーザの責任です。
   </para>

   <caution>
    <para>
<!--
     When a foreign table is used as a partition of a partitioned table,
     there is an implicit constraint that its contents must satisfy the
     partitioning rule.  Again, it is the user's responsibility to ensure
     that that is true, which is best done by installing a matching
     constraint on the remote server.
-->
外部テーブルがパーティション化テーブルのパーティションとして使われていれば、その内容はパーティショニングの規則を満たさねばならないという暗黙の制約があります。
ここでもまた、それが真であることを保証するのは、ユーザの責任です。これにはリモートサーバに一致する制約を設定するのが最善です。
    </para>
   </caution>

   <para>
<!--
    Within a partitioned table containing foreign-table partitions,
    an <command>UPDATE</command> that changes the partition key value can
    cause a row to be moved from a local partition to a foreign-table
    partition, provided the foreign data wrapper supports tuple routing.
    However, it is not currently possible to move a row from a
    foreign-table partition to another partition.
    An <command>UPDATE</command> that would require doing that will fail
    due to the partitioning constraint, assuming that that is properly
    enforced by the remote server.
-->
外部テーブルパーティションを含むパーティション化テーブル内では、パーティションキー値を変更する<command>UPDATE</command>は、外部データラッパーがタプルルーティングをサポートしていれば、行をローカルパーティションから外部テーブルパーティションへと移動する原因となる可能性があります。
しかしながら、行を外部テーブルパーティションから別のパーティションに移動することは現在のところできません。
そのようなことを要求する<command>UPDATE</command>は、リモートサーバにより適切に強制されるのであれば、パーティショニングの制約のために失敗するでしょう。
   </para>

   <para>
<!--
    Similar considerations apply to generated columns.  Stored generated
    columns are computed on insert or update on the local
    <productname>PostgreSQL</productname> server and handed to the
    foreign-data wrapper for writing out to the foreign data store, but it is
    not enforced that a query of the foreign table returns values for stored
    generated columns that are consistent with the generation expression.
    Again, this might result in incorrect query results.
-->
似たような配慮は生成列に適用されます。
保存生成列は、ローカルの<productname>PostgreSQL</productname>サーバ上で挿入されたり更新されたりした時に計算され、外部データ保存領域へ書き出すために外部データラッパーへと渡されますが、外部テーブルへの問い合わせが生成式と矛盾しない保存生成列の値を返すことは強制されていません。
ここでも、問い合わせの結果が正しくないということになる可能性があります。
   </para>
 </refsect1>

 <refsect1 id="sql-createforeigntable-examples">
<!--
  <title>Examples</title>
-->
  <title>例</title>

  <para>
<!--
   Create foreign table <structname>films</structname>, which will be accessed through
   the server <structname>film_server</structname>:
-->
サーバ<structname>film_server</structname>を通してアクセスされる、外部テーブル<structname>films</structname>を作成します。

<programlisting>
CREATE FOREIGN TABLE films (
    code        char(5) NOT NULL,
    title       varchar(40) NOT NULL,
    did         integer NOT NULL,
    date_prod   date,
    kind        varchar(10),
    len         interval hour to minute
)
SERVER film_server;
</programlisting></para>

  <para>
<!--
   Create foreign table <structname>measurement_y2016m07</structname>, which will be
   accessed through the server <structname>server_07</structname>, as a partition
   of the range partitioned table <structname>measurement</structname>:
-->
範囲パーティションテーブル<structname>measurement</structname>のパーティションとして、サーバ<structname>server_07</structname>を通してアクセスされる外部テーブル<structname>measurement_y2016m07</structname>を作成します。

<programlisting>
CREATE FOREIGN TABLE measurement_y2016m07
    PARTITION OF measurement FOR VALUES FROM ('2016-07-01') TO ('2016-08-01')
    SERVER server_07;
</programlisting></para>

 </refsect1>

 <refsect1 id="sql-createforeigntable-compatibility">
<!--
  <title>Compatibility</title>
-->
  <title>互換性</title>

  <para>
<!--
   The <command>CREATE FOREIGN TABLE</command> command largely conforms to the
   <acronym>SQL</acronym> standard; however, much as with
   <link linkend="sql-createtable"><command>CREATE TABLE</command></link>,
   <literal>NULL</literal> constraints and zero-column foreign tables are permitted.
   The ability to specify column default values is also
   a <productname>PostgreSQL</productname> extension.  Table inheritance, in the form
   defined by <productname>PostgreSQL</productname>, is nonstandard.
   The <literal>LIKE</literal> clause, as supported in this command, is
   nonstandard.
-->
《マッチ度[81.657848]》<command>CREATE FOREIGN TABLE</command>はおおよそ標準<acronym>SQL</acronym>に準拠します。
しかし<link linkend="sql-createtable"><command>CREATE TABLE</command></link>とほとんど同様、<literal>NULL</literal>制約とゼロ列の外部テーブルが許されます。
列のデフォルト値を指定する機能も<productname>PostgreSQL</productname>の拡張です。
<productname>PostgreSQL</productname>が定義する形式のテーブルの継承は標準とは異なります。
《機械翻訳》<command>CREATE FOREIGN TABLE</command>コマンドは<acronym>SQL</acronym>標準にほぼ準拠していますが、<link linkend="sql-createtable"><command>CREATE TABLE</command></link>と同様に、<literal>NULL</literal>制約とゼロ-カラム外部テーブルが許可されています。
カラムデフォルトの値を指定する機能も<productname>PostgreSQL</productname>extension. テーブル継承であり、<productname>PostgreSQL</productname>によって定義されるフォームは非標準です。
このコマンドでサポートされている<literal>LIKE</literal>句は非標準です。
  </para>

 </refsect1>

 <refsect1>
<!--
  <title>See Also</title>
-->
  <title>関連項目</title>

  <simplelist type="inline">
   <member><xref linkend="sql-alterforeigntable"/></member>
   <member><xref linkend="sql-dropforeigntable"/></member>
   <member><xref linkend="sql-createtable"/></member>
   <member><xref linkend="sql-createserver"/></member>
   <member><xref linkend="sql-importforeignschema"/></member>
  </simplelist>
 </refsect1>
</refentry>
